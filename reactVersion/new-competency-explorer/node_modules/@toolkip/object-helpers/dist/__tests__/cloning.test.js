"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
describe('Cloning functions', () => {
    it('clones primitives appropriately', () => {
        expect(__1.clone('abc')).toEqual('abc');
        expect(__1.clone(123)).toEqual(123);
        expect(__1.clone(true)).toEqual(true);
        expect(__1.clone(null)).toEqual(null);
        expect(__1.clone(undefined)).toEqual(undefined);
    });
    it('clones a primitive array', () => {
        const arr = ['a', 'b', 'c'];
        expect(__1.clone(arr)).toMatchObject(arr);
        expect(__1.clone(arr) === arr).toBeFalsy();
    });
    it('clones a primitive object', () => {
        const obj = { name: 'Kip', age: 30 };
        expect(__1.clone(obj)).toMatchObject(obj);
        expect(__1.clone(obj) === obj).toBeFalsy();
    });
    it('clones a date appropriately', () => {
        const dt = new Date('2020-02-14');
        expect(__1.clone(dt).valueOf()).toEqual(dt.valueOf());
        expect(__1.clone(dt) === dt).toBeFalsy();
    });
    it('handles nested objects', () => {
        const obj = {
            name: 'Kip',
            info: {
                'email': 'email@email.com',
                'cell': '+1 888 000-0000'
            }
        };
        expect(__1.clone(obj)).toMatchObject(obj);
    });
    it('handles custom cloning functions', () => {
        const obj = {
            name: 'Kip',
            date: '2020-02-14'
        };
        const clonedObj = __1.clone(obj, [{
                typeGuard: (v, key) => key === 'date',
                cloner: (v) => new Date(v)
            }]);
        expect(clonedObj).toMatchObject({
            name: 'Kip',
            date: new Date('2020-02-14')
        });
    });
    it('handles class cloning', () => {
        class Clonable {
            constructor(prop) {
                this._property = prop;
            }
            getProperty() { return this._property; }
            doSomething() { return this._property + "!"; }
        }
        const clonable = new Clonable('hello');
        const cloned = __1.clone(clonable);
        expect(cloned.getProperty()).toEqual(clonable.getProperty());
        expect(cloned.doSomething()).toEqual(clonable.doSomething());
    });
});
