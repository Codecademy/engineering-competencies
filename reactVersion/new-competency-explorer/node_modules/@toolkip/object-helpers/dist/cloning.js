"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const combine_1 = require("./combine");
const manipulate_1 = require("./manipulate");
const shared_types_1 = require("@toolkip/shared-types");
const _typeguards_1 = require("./_typeguards");
function cloneRect(rect) {
    let out = {
        x: rect.x,
        y: rect.y,
        w: rect.w,
        h: rect.h
    };
    return out;
}
exports.cloneRect = cloneRect;
function clonePoint(point) {
    let out = {
        x: point.x,
        y: point.y
    };
    return out;
}
exports.clonePoint = clonePoint;
function clonePointArray(points) {
    let out = [];
    let pt;
    for (pt of points) {
        let clone = clonePoint(pt);
        out.push(clone);
    }
    return out;
}
exports.clonePointArray = clonePointArray;
function cloneObject(obj) {
    return JSON.parse(JSON.stringify(obj));
}
exports.cloneObject = cloneObject;
function clone(toClone, customCloners = [], key) {
    for (let c of customCloners) {
        if (c.typeGuard(toClone, key)) {
            return c.cloner(toClone, key);
        }
    }
    if (shared_types_1.isPrimitive(toClone)) {
        return _clonePrimitive(toClone);
    }
    else if (_typeguards_1.isCloneable(toClone)) {
        return toClone.clone();
    }
    else if (shared_types_1.isDate(toClone)) {
        return _cloneDate(toClone);
    }
    else if (shared_types_1.isArray(toClone)) {
        return _cloneArray(toClone, customCloners);
    }
    else if (shared_types_1.isObject(toClone)) {
        return _cloneObject(toClone, customCloners);
    }
}
exports.clone = clone;
const _clonePrimitive = (primitive) => {
    return primitive;
};
const _cloneDate = (date) => {
    return new Date(date.valueOf());
};
const _cloneObject = (obj, customCloners) => {
    const proto = Object.getPrototypeOf(obj);
    const out = Object.create(proto);
    manipulate_1.map(obj, (v, k) => {
        out[k] = clone(v, customCloners, k);
    });
    return out;
};
const _cloneArray = (arr, customCloners) => {
    const out = [];
    for (let e of arr) {
        out.push(clone(e, customCloners));
    }
    return out;
};
function shallowCloneObject(object) {
    return combine_1.combineObjects({}, object);
}
exports.shallowCloneObject = shallowCloneObject;
