import { IMapFunction, IQuitConditionFunction, Mappable, IShouldInclude } from "./_interfaces";
export declare function map<T = any, R = any>(toMap: Mappable<T>, callback?: IMapFunction<T, R>, shouldQuit?: IQuitConditionFunction): R[];
export declare function filter<T = any>(toFilter: Mappable<T>, shouldInclude: IShouldInclude<T>): T[];
export declare function getNextKey(object: any, lastKey?: string): string;
export declare function getKeys<T, K extends keyof T>(object: T): K[];
export declare function keyCount(object: any): number;
export declare function setDictValue(object: any, val: any, keys: string[]): any;
export declare function getPrototype(obj: any): any;
