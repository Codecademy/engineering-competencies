"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const historyNode_1 = require("./historyNode");
const object_helpers_1 = require("@toolkip/object-helpers");
class HistoryChain {
    get currentState() { return this._curNode.data; }
    push(data) {
        if (this._preventAdditions) {
            return;
        }
        let node = new historyNode_1.HistoryNode(data);
        if (!this._start) {
            this._start = node;
            this._end = node;
            this._curNode = node;
            return;
        }
        if (this._curNode !== this._end) {
            this._clearToCurIdx();
        }
        this._end.next = node;
        node.previous = this._end;
        this._end = node;
        this._curNode = this._end;
    }
    _clearToCurIdx() {
        this._end = this._curNode;
        this._curNode.next = null;
    }
    navigateBack(cb) {
        if (!this._curNode.previous) {
            return null;
        }
        const out = this._curNode.previous.data;
        this._curNode = this._curNode.previous;
        if (cb) {
            this._handleNavigateCallback(out, cb);
        }
        return out;
    }
    navigateForward(cb) {
        if (!this._curNode.next) {
            return null;
        }
        const out = this._curNode.next.data;
        this._curNode = this._curNode.next;
        if (cb) {
            this._handleNavigateCallback(out, cb);
        }
        return out;
    }
    _handleNavigateCallback(state, cb) {
        this._preventAdditions = true;
        cb(state);
        this._preventAdditions = false;
    }
    updateCurrentState(newState) {
        if (!this._curNode) {
            return false;
        }
        let curState = this._curNode.data;
        let combinedState = object_helpers_1.combineObjects(curState, newState, true);
        this._curNode.data = combinedState;
        return true;
    }
}
exports.HistoryChain = HistoryChain;
