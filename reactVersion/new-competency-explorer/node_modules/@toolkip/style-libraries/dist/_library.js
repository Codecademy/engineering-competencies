"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const style_helpers_1 = require("@toolkip/style-helpers");
const object_helpers_1 = require("@toolkip/object-helpers");
const html_helpers_1 = require("@toolkip/html-helpers");
const async_1 = require("@toolkip/async");
const comparable_1 = require("@toolkip/comparable");
class _Library {
    constructor() {
        this._rawStyles = {};
        this._elems = {};
        this._lastId = 0;
    }
    getNextId() {
        this._lastId += 1;
        return this._lastId.toString();
    }
    hasStyles(uniqueKey) {
        return !!this._rawStyles[uniqueKey];
    }
    add(uniqueKey, styles, force) {
        const existingStyles = this._getOrCreateExistingStyles(uniqueKey);
        const mergedStyles = this._merge([existingStyles, styles]);
        if (!this._shouldAdd(existingStyles, mergedStyles, force)) {
            return;
        }
        this._rawStyles[uniqueKey] = mergedStyles;
        this._updateElems(mergedStyles, uniqueKey);
    }
    _shouldAdd(existingStyles, mergedStyles, force) {
        if (force) {
            return true;
        }
        if (object_helpers_1.isEmptyObject(existingStyles)) {
            return true;
        }
        if (!comparable_1.equals(existingStyles, mergedStyles)) {
            return true;
        }
        return false;
    }
    remove(uniqueKey) {
        if (!this._rawStyles[uniqueKey]) {
            return false;
        }
        html_helpers_1.removeElement(this._elems[uniqueKey]);
        delete this._rawStyles[uniqueKey];
        delete this._elems[uniqueKey];
        return true;
    }
    _merge(styles) {
        if (styles.length < 1) {
            return null;
        }
        return style_helpers_1.combineStyles(...styles);
    }
    _stringify(styles) {
        return style_helpers_1.stringifyStyles(styles);
    }
    _updateElems(styles, uniqueKey) {
        let stringifiedStyles = this._stringify(styles);
        for (let cIdx = 0; cIdx < stringifiedStyles.length; cIdx += 1) {
            let elem = this._getOrCreateElem(uniqueKey);
            elem.innerHTML = stringifiedStyles[cIdx];
        }
    }
    _getOrCreateElem(uniqueKey) {
        if (this._elems[uniqueKey]) {
            return this._elems[uniqueKey];
        }
        let elem = style_helpers_1.createStyleElement(`${uniqueKey}-${this._idSuffix}`);
        this._elems[uniqueKey] = elem;
        async_1.nextRender().then(() => document.head.appendChild(elem));
        return elem;
    }
    _getOrCreateExistingStyles(uniqueKey) {
        if (!this._rawStyles[uniqueKey]) {
            this._rawStyles[uniqueKey] = {};
        }
        return this._rawStyles[uniqueKey];
    }
    getElemForKey(uniqueKey) {
        if (!this._elems[uniqueKey]) {
            return null;
        }
        return this._elems[uniqueKey];
    }
    get(uniqueKey) {
        if (!this._rawStyles[uniqueKey]) {
            return null;
        }
        return this._rawStyles[uniqueKey];
    }
}
exports._Library = _Library;
