import { TypedClassDefinition, IStandardStyles } from '@toolkip/style-helpers';
import { IKeyValPair, IDictionary, IConstructor } from '@toolkip/object-helpers';
import { StandardElement, IDrawable, DrawableElement } from '@toolkip/shared-types';
import { Selector, ModelEventFullPayload } from '@toolkip/model';
export declare type IAttribute = IKeyValPair<string> | string | number;
export interface IAttributes {
    [key: string]: SelectableValue<IAttribute>;
}
export declare type IChild<T extends IKeyedElems = IKeyedElems> = StandardElement | IElemDefinition<T> | IDrawable | SelectableValue<IChild<T>[]>;
export interface IClassDefinition {
    name: ClassName;
    styles: IStandardStyles;
}
export declare type ClassName = string | string[];
export declare type IKeyedElems = IDictionary<DrawableElement>;
export interface IElemDefinition<T extends IKeyedElems = IKeyedElems> {
    key?: keyof T;
    id?: SelectableValue<string>;
    cls?: SelectableValue<ClassName | IClassDefinition>;
    type?: keyof HTMLElementTagNameMap | keyof SVGElementTagNameMap;
    content?: SelectableValue<string>;
    innerText?: SelectableValue<string>;
    innerHTML?: SelectableValue<string>;
    attr?: IAttributes;
    style?: SelectableValue<TypedClassDefinition>;
    styles?: SelectableValue<IStandardStyles> | SelectableValue<IStandardStyles>[];
    children?: SelectableValue<IChild<T>[]>;
    parent?: StandardElement;
    eventListeners?: IEventListeners;
    namespace?: string;
    drawable?: IConstructor<IDrawable> | (() => IDrawable);
    focusable?: boolean;
    selector?: ElemSelector;
}
export declare type IEventListeners = {
    [key in keyof WindowEventMap]?: EventListener;
};
export interface ICreateElementFunc<T extends IKeyedElems = IKeyedElems, I extends IElemDefinition<T> = IElemDefinition<T>> {
    (obj: I, keyedElems?: T): StandardElement;
}
export interface ILabeledElement {
    data: HTMLElement;
    lbl: HTMLElement;
    wrapper: HTMLElement;
}
export interface IButtonDefinition<T extends IKeyedElems> extends Omit<IElemDefinition<T>, "type"> {
    label: string;
    onClick: EventListener;
}
export declare type HTMLInputType = 'button' | 'checkbox' | 'color' | 'date' | 'datetime-local' | 'email' | 'file' | 'hidden' | 'image' | 'month' | 'number' | 'password' | 'radio' | 'range' | 'reset' | 'search' | 'submit' | 'tel' | 'text' | 'time' | 'url' | 'week';
export interface IInputDefinition<T extends IKeyedElems, V> extends Omit<IElemDefinition<T>, "type"> {
    value?: V;
    onChange?: EventListener;
    type?: HTMLInputType;
}
export declare type SelectableValue<T> = T | Selector<any, T, any, any>;
export declare type SelectableDefinition<T extends IKeyedElems> = SelectableValue<IElemDefinition<T> | IElemDefinition<T>[]>;
export interface ElemSelector<I = any, O = any> {
    selector: Selector<I, O, any, any>;
    applyCb: (payload: ModelEventFullPayload<any, O>, elem: StandardElement) => void;
}
