"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const createElement_1 = require("./createElement");
function createTable(tableID, tableClass, elements, rowNum, colNum) {
    let tbl;
    let row;
    let cell;
    let elem;
    let rIdx;
    let cIdx;
    if (!rowNum) {
        rowNum = (elements && elements.length) || 0;
    }
    tbl = createElement_1.createElement({
        type: "table",
        cls: tableClass
    });
    for (rIdx = 0; rIdx < rowNum; rIdx += 1) {
        if (!colNum) {
            colNum = elements[rIdx].length;
        }
        row = tbl.insertRow(-1);
        for (cIdx = 0; cIdx < colNum; cIdx += 1) {
            elem = elements[rIdx][cIdx];
            cell = row.insertCell(-1);
            processCellContents(elem, cell);
        }
    }
    return tbl;
}
exports.createTable = createTable;
function processCellContents(data, cell) {
    ;
    let content;
    let key;
    if (!data) {
        return cell;
    }
    if (typeof data == "string") {
        cell.innerHTML = data;
    }
    else if (data.appendChild) {
        cell.appendChild(data);
    }
    else {
        if (data.create) {
            content = createElement_1.createElement(data.create);
            cell.appendChild(content);
        }
        else {
            cell.innerHTML = data.content;
        }
        for (key in data.attr) {
            if (data.attr.hasOwnProperty(key)) {
                cell.setAttribute(key, data.attr[key]);
            }
        }
    }
    return cell;
}
exports.processCellContents = processCellContents;
;
function addRow(table, elements, idx, colNum) {
    ;
    let row;
    let cell;
    let cIdx;
    let data;
    if (!idx && (idx !== 0)) {
        idx = -1;
    }
    if (!colNum && colNum !== 0) {
        colNum = elements.length;
    }
    if (!table)
        return;
    if (!table.insertRow)
        return;
    row = table.insertRow(idx);
    for (cIdx = 0; cIdx < colNum; cIdx += 1) {
        cell = row.insertCell(-1);
        data = elements[cIdx] || "";
        processCellContents(data, cell);
    }
    return row;
}
exports.addRow = addRow;
;
