"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const model_1 = require("@toolkip/model");
const __1 = require("..");
const style_libraries_1 = require("@toolkip/style-libraries");
describe('create element with selectors', () => {
    const setupModel = (data = { name: 'Big Bird', age: 11 }) => {
        const model = new model_1.MObject(data);
        return model;
    };
    const setupComplexModel = (data) => {
        if (!data) {
            data = {
                models: [
                    { id: '1', name: 'Big Bird', age: 11 },
                    { id: '2', name: 'Oscar', age: 45 }
                ]
            };
        }
        const model = new model_1.MObject(data);
        return model;
    };
    const setupStringSelector = (model) => {
        const selector = model_1.select(model, (data) => data.name && data.name.replace(" ", "_"));
        return selector;
    };
    it('allows for selectors to be set as IDs', () => {
        const model = setupModel();
        const selector = setupStringSelector(model);
        const elem = __1.createElement({
            id: selector
        });
        expect(elem.id).toEqual('Big_Bird');
        model.set('name', 'Oscar');
        expect(elem.id).toEqual('Oscar');
    });
    it('allows for selectors to be set as class names', () => {
        const model = setupModel();
        const selector = setupStringSelector(model);
        const elem = __1.createElement({
            cls: selector
        });
        expect(elem.className).toEqual('Big_Bird');
        model.set('name', 'Oscar');
        expect(elem.className).toEqual('Oscar');
    });
    it('allows for selectors to be set as content items', () => {
        const model = setupModel();
        const selector = setupStringSelector(model);
        const elem = __1.createElement({
            content: selector
        });
        expect(elem.innerHTML).toEqual('Big_Bird');
        model.set('name', 'Oscar');
        expect(elem.innerHTML).toEqual('Oscar');
    });
    it('allows for attributes to be set as content items', () => {
        const model = setupModel();
        const selector = model_1.select(model, (m) => `https://google.com/${m.age}`);
        const elem = __1.createElement({
            type: 'a',
            attr: { 'href': selector }
        });
        expect(elem.getAttribute('href')).toEqual('https://google.com/11');
        model.set('age', 8);
        expect(elem.getAttribute('href')).toEqual('https://google.com/8');
    });
    it('allows for a generic selector', () => {
        const model = setupModel();
        const selector = setupStringSelector(model);
        const elem = __1.createElement({
            selector: {
                selector,
                applyCb: ({ value }, elem) => {
                    if (value.indexOf('_') !== -1) {
                        elem.style.backgroundColor = 'rgb(50, 50, 50)';
                    }
                    else {
                        elem.style.backgroundColor = 'rgb(100, 100, 100)';
                    }
                }
            }
        });
        expect(elem.style.backgroundColor).toEqual('rgb(50, 50, 50)');
        model.set('name', 'Oscar');
        expect(elem.style.backgroundColor).toEqual('rgb(100, 100, 100)');
    });
    it('allows for mapped selectors', () => {
        const model = setupComplexModel();
        const selector = model_1.select(model, (d) => d.models)
            .mapSelect((m) => { return { content: m.name }; });
        const elem = __1.createElement({
            children: selector
        });
        expect(elem.children).toHaveLength(2);
        expect(elem.children[0].innerHTML).toEqual('Big Bird');
        expect(elem.children[1].innerHTML).toEqual('Oscar');
    });
    it('allows for children defined by selectors', () => {
        const model = setupComplexModel();
        const selector = model_1.select(model, (d) => d.models)
            .mapSelect((m) => { return { content: m.name }; });
        const elem = __1.createElement({
            children: [
                { content: 'top' },
                selector,
                { content: 'bottom' }
            ]
        });
        expect(elem.children).toHaveLength(4);
        expect(elem.children[0].innerHTML).toEqual('top');
        expect(elem.children[1].innerHTML).toEqual('Big Bird');
        expect(elem.children[2].innerHTML).toEqual('Oscar');
        expect(elem.children[3].innerHTML).toEqual('bottom');
    });
    it('handles an empty children array', () => {
        const model = setupComplexModel({ models: [] });
        const selector = model_1.select(model, (d) => d.models)
            .mapSelect((m) => { return { content: m.name }; });
        const elem = __1.createElement({
            children: [
                { content: 'top' },
                selector,
                { content: 'bottom' }
            ]
        });
        expect(elem.children).toHaveLength(2);
        expect(elem.children[0].innerHTML).toEqual('top');
        expect(elem.children[1].innerHTML).toEqual('bottom');
    });
    it('allows selecting on styles', () => {
        const model = new model_1.MObject({ color: '#333' });
        const elem = __1.createElement({
            styles: [
                { '.nonselected': { fontSize: '10pt' } },
                model_1.select(model, (m) => {
                    return { '.selected': { color: m.color } };
                })
            ]
        });
        model.set('color', '#AAA');
        const result = style_libraries_1.StyleLibrary.get('create_elements');
        expect(result).toMatchObject({ '.selected': { color: '#AAA' } });
    });
});
