"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _typeGuards_1 = require("../_typeGuards");
describe('shared typeguards', () => {
    describe('isUndefined', () => {
        it('succeeds for undefined value', () => {
            expect(_typeGuards_1.isUndefined(undefined)).toBeTruthy();
        });
        it('fails for all other values', () => {
            expect(_typeGuards_1.isUndefined(null)).toBeFalsy();
            expect(_typeGuards_1.isUndefined(0)).toBeFalsy();
            expect(_typeGuards_1.isUndefined('')).toBeFalsy();
            expect(_typeGuards_1.isUndefined({})).toBeFalsy();
        });
    });
    describe('isFalsy', () => {
        it('evaluates correctly on truthy values', () => {
            expect(_typeGuards_1.isFalsy('hello')).toBeFalsy();
            expect(_typeGuards_1.isFalsy(1)).toBeFalsy();
            expect(_typeGuards_1.isFalsy({})).toBeFalsy();
            expect(_typeGuards_1.isFalsy([])).toBeFalsy();
        });
        it('evaluates correctly on non-truthy values without overrides', () => {
            expect(_typeGuards_1.isFalsy(0)).toBeTruthy();
            expect(_typeGuards_1.isFalsy(null)).toBeTruthy();
            expect(_typeGuards_1.isFalsy(undefined)).toBeTruthy();
            expect(_typeGuards_1.isFalsy("")).toBeTruthy();
        });
        it('evaluates correctly on non-truthy values when other overrides are included', () => {
            expect(_typeGuards_1.isFalsy(0, [null, undefined, ''])).toBeTruthy();
            expect(_typeGuards_1.isFalsy(null, [0, undefined, ''])).toBeTruthy();
            expect(_typeGuards_1.isFalsy(undefined, [0, null, ''])).toBeTruthy();
            expect(_typeGuards_1.isFalsy("", [0, null, undefined])).toBeTruthy();
        });
        it('evaluates correctly with overrides', () => {
            expect(_typeGuards_1.isFalsy(0, [0])).toBeFalsy();
            expect(_typeGuards_1.isFalsy(null, [null])).toBeFalsy();
            expect(_typeGuards_1.isFalsy(undefined, [undefined])).toBeFalsy();
            expect(_typeGuards_1.isFalsy("", [''])).toBeFalsy();
        });
    });
    describe('isTruthy', () => {
        it('evaluates correctly on truthy values', () => {
            expect(_typeGuards_1.isTruthy('hello')).toBeTruthy();
            expect(_typeGuards_1.isTruthy(1)).toBeTruthy();
            expect(_typeGuards_1.isTruthy({})).toBeTruthy();
            expect(_typeGuards_1.isTruthy([])).toBeTruthy();
        });
        it('allows overriding falsy values', () => {
            expect(_typeGuards_1.isTruthy(0, [0])).toBeTruthy();
            expect(_typeGuards_1.isTruthy(null, [null])).toBeTruthy();
            expect(_typeGuards_1.isTruthy(undefined, [undefined])).toBeTruthy();
            expect(_typeGuards_1.isTruthy("", [''])).toBeTruthy();
        });
        it('evaluates non-overidden falsy values', () => {
            expect(_typeGuards_1.isTruthy(0)).toBeFalsy();
            expect(_typeGuards_1.isTruthy(null)).toBeFalsy();
            expect(_typeGuards_1.isTruthy(undefined)).toBeFalsy();
            expect(_typeGuards_1.isTruthy("")).toBeFalsy();
        });
    });
});
