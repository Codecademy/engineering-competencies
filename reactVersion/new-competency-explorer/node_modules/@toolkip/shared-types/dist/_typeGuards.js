"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function isUndefined(value) {
    if (value === undefined) {
        return true;
    }
    return false;
}
exports.isUndefined = isUndefined;
function isNullOrUndefined(value) {
    if (value === undefined) {
        return true;
    }
    if (value === null) {
        return true;
    }
    return false;
}
exports.isNullOrUndefined = isNullOrUndefined;
function isFalsy(value, falsyTypesToIgnore = []) {
    if (!!value) {
        return false;
    }
    for (let ignoredType of falsyTypesToIgnore) {
        if (ignoredType === value) {
            return false;
        }
    }
    return true;
}
exports.isFalsy = isFalsy;
function isTruthy(value, falsyTypesToTreatAsTruthy = []) {
    return !this.isFalsy(value, falsyTypesToTreatAsTruthy);
}
exports.isTruthy = isTruthy;
function isInterface(test, full_imp) {
    let prop;
    let req_match = true;
    let val;
    for (prop in full_imp) {
        if (full_imp.hasOwnProperty(prop)) {
            val = full_imp[prop];
            if (val && (test[prop] === undefined)) {
                req_match = false;
                break;
            }
        }
    }
    if (!req_match) {
        return false;
    }
    let has_extra = false;
    for (prop in test) {
        if (test.hasOwnProperty(prop)) {
            if (full_imp[prop] === undefined) {
                has_extra = true;
                break;
            }
        }
    }
    return (!has_extra);
}
exports.isInterface = isInterface;
function isString(test) {
    return (typeof test === "string");
}
exports.isString = isString;
function isKeyof(test, reference) {
    if (!reference) {
        return isString(test);
    }
    return reference.hasOwnProperty(test);
}
exports.isKeyof = isKeyof;
function isNumber(test) {
    return (typeof test === "number");
}
exports.isNumber = isNumber;
function isBoolean(test) {
    return (typeof test === "boolean");
}
exports.isBoolean = isBoolean;
function isPrimitive(test) {
    if (test === null) {
        return true;
    }
    switch (typeof test) {
        case 'boolean':
        case 'number':
        case 'string':
        case 'undefined':
            return true;
        default:
            return false;
    }
}
exports.isPrimitive = isPrimitive;
function isFunction(test) {
    return (typeof test === "function");
}
exports.isFunction = isFunction;
function isArray(test) {
    return (test instanceof Array);
}
exports.isArray = isArray;
function isObject(test) {
    return (typeof test === typeof {});
}
exports.isObject = isObject;
function isDate(test) {
    if (!(test instanceof Date)) {
        return false;
    }
    const protoName = Object.prototype.toString.call(test);
    return protoName === '[object Date]';
}
exports.isDate = isDate;
function isPromise(test) {
    if (test instanceof Promise) {
        return true;
    }
    return false;
}
exports.isPromise = isPromise;
function isPromiseLike(test) {
    if (!test.then) {
        return false;
    }
    if (typeof test.then !== 'function') {
        return false;
    }
    return true;
}
exports.isPromiseLike = isPromiseLike;
function isStandardElement(test) {
    if (test instanceof HTMLElement) {
        return true;
    }
    if (test instanceof SVGElement) {
        return true;
    }
    return false;
}
exports.isStandardElement = isStandardElement;
function isDrawable(test) {
    return !!test.draw;
}
exports.isDrawable = isDrawable;
function isDrawableElement(test) {
    return (!!(test.appendChild));
}
exports.isDrawableElement = isDrawableElement;
function isUpdatable(test) {
    if (!test) {
        return;
    }
    return !!(test.update);
}
exports.isUpdatable = isUpdatable;
