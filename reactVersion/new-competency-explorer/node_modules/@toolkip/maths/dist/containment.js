"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require(".");
function isWithin(val, min, max, non_inclusive) {
    ;
    if (non_inclusive)
        return (val < max && val > min);
    return (val <= max && val >= min);
}
exports.isWithin = isWithin;
function isPointContained(pt, rect) {
    ;
    let r = _1.toBasicRect(rect);
    if (pt.x < r.x) {
        return false;
    }
    if (pt.x > (r.x + r.w)) {
        return false;
    }
    if (pt.y < r.y) {
        return false;
    }
    if (pt.y > r.y + r.h) {
        return false;
    }
    return true;
}
exports.isPointContained = isPointContained;
function isRectContained(rect, container) {
    let r;
    let c;
    r = _1.toBasicRect(rect);
    c = _1.toBasicRect(container);
    if (r.x < c.x)
        return false;
    if ((r.x + r.w) > (c.w + c.x))
        return false;
    if (r.y < c.y)
        return false;
    if ((r.y + r.h) > (c.h + c.y))
        return false;
    return true;
}
exports.isRectContained = isRectContained;
function isElementContained(elem, container) {
    let rect = elem.getBoundingClientRect();
    let bounds = elem.getBoundingClientRect();
    return isRectContained(rect, bounds);
}
exports.isElementContained = isElementContained;
;
function isShapeContained(shape, bounds) {
    let pt;
    for (pt of shape) {
        if (!isPointContained(pt, bounds)) {
            return false;
        }
    }
    return true;
}
exports.isShapeContained = isShapeContained;
