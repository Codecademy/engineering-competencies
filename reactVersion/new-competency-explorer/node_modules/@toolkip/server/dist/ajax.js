"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const object_helpers_1 = require("@toolkip/object-helpers");
function ajax(ajaxDetails) {
    return new Promise((resolve, reject) => {
        _innerAjax(ajaxDetails, resolve, reject);
    });
}
exports.ajax = ajax;
function _innerAjax(ajaxDetails, resolve, reject) {
    let request = _getXmlRequestObject();
    if (!request)
        return null;
    _assignXmlRequestCallbacks(request, (...params) => resolve(...params), (...params) => reject(...params));
    _sendXmlRequest(request, ajaxDetails);
    return request;
}
;
function _getXmlRequestObject() {
    let request = null;
    try {
        request = new XMLHttpRequest();
    }
    catch (e) {
        try {
            request = new ActiveXObject("Msxml2.XMLHTTP");
        }
        catch (e) {
            try {
                request = new ActiveXObject("Microsoft.XMLHTTP");
            }
            catch (e) {
                return null;
            }
        }
    }
    return request;
}
function _assignXmlRequestCallbacks(request, successCb, errorCb) {
    request.onreadystatechange = () => {
        if (request.readyState !== 4) {
            return;
        }
        if (_isValidResponse(request.status)) {
            successCb(request.responseText);
        }
        else {
            errorCb(request.responseText);
        }
    };
    return request;
}
function _addHeaderData(request, headerParams) {
    if (!headerParams) {
        return;
    }
    object_helpers_1.map(headerParams, (value, key) => {
        request.setRequestHeader(key, value);
    });
}
function _sendXmlRequest(request, { type, requestUrl, params, headerParams }) {
    request.open(type, requestUrl, true);
    _addHeaderData(request, headerParams);
    let urlParams = null;
    if (type === "POST") {
        urlParams = _setRequestHeader(request, params);
    }
    request.send(urlParams);
    return request;
}
function _setRequestHeader(request, params) {
    let reqHeaderType;
    let outParams;
    if (params instanceof FormData) {
        reqHeaderType = "multipart/form-data";
        outParams = params;
    }
    else {
        reqHeaderType = "application/json";
        outParams = JSON.stringify(params);
    }
    if (reqHeaderType) {
        request.setRequestHeader("Content-Type", reqHeaderType);
    }
    return outParams;
}
function _buildParameters(params) {
    let paramOut = [];
    object_helpers_1.map(params, (val, key) => {
        let urlParam = encodeURIComponent(key) + "=" + encodeURIComponent(val);
        paramOut.push(urlParam);
    });
    return paramOut.join("&");
}
function _isValidResponse(responseCode) {
    if (responseCode < 200) {
        return false;
    }
    if (responseCode >= 300) {
        return false;
    }
    return true;
}
