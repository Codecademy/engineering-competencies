"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const object_helpers_1 = require("@toolkip/object-helpers");
class _StylePlaceholders {
    splitOutPlaceholders(flattenedStyles) {
        let out = { standard: {}, withPlaceholders: {} };
        object_helpers_1.map(flattenedStyles, (def, selector) => {
            object_helpers_1.map(def, (pVal, pName) => {
                if (this._containsPlaceholder(pVal)) {
                    object_helpers_1.setDictValue(out.withPlaceholders, pVal, [selector, pName]);
                }
                else {
                    object_helpers_1.setDictValue(out.standard, pVal, [selector, pName]);
                }
            });
        });
        return out;
    }
    findContainedPlaceholder(value) {
        let placeholderRegex = /<(.+?)>/;
        let result = placeholderRegex.exec(value);
        if (!result || !result[1]) {
            return null;
        }
        let splitPlaceholder = result[1].split(":");
        return {
            name: splitPlaceholder[0],
            defaultValue: splitPlaceholder[1]
        };
    }
    _containsPlaceholder(value) {
        let placeholder = this.findContainedPlaceholder(value);
        return !!placeholder;
    }
    indexStyleDictByPlaceholder(styleDict) {
        let idx = {};
        object_helpers_1.map(styleDict, (styles, uniqueKey) => {
            object_helpers_1.map(styles, (def, selector) => {
                object_helpers_1.map(def, (pVal, pName) => {
                    let placeholder = this.findContainedPlaceholder(pVal);
                    if (!placeholder) {
                        return;
                    }
                    object_helpers_1.setDictValue(idx, true, [placeholder.name, uniqueKey, selector, pName]);
                });
            });
        });
        return idx;
    }
    mapIndexToStyle(index, styles) {
        let out = {};
        object_helpers_1.map(index, (d, selector) => {
            object_helpers_1.map(d, (unused, pName) => {
                if (!styles[selector]) {
                    return;
                }
                object_helpers_1.setDictValue(out, styles[selector][pName], [selector, pName]);
            });
        });
        return out;
    }
    replacePlaceholders(styles, placeholder, replaceWith) {
        let matchRegex = new RegExp("<" + placeholder + ".*?>", "g");
        let out = object_helpers_1.cloneObject(styles);
        object_helpers_1.map(out, (def, selector) => {
            object_helpers_1.map(def, (pVal, pName) => {
                out[selector][pName] = pVal.replace(matchRegex, replaceWith);
            });
        });
        return out;
    }
}
exports.StylePlaceholders = new _StylePlaceholders();
function findContainedPlaceholder(value) {
    return exports.StylePlaceholders.findContainedPlaceholder(value);
}
exports.findContainedPlaceholder = findContainedPlaceholder;
function splitStyles(flattenedStyles) {
    return exports.StylePlaceholders.splitOutPlaceholders(flattenedStyles);
}
exports.splitStyles = splitStyles;
function indexByPlaceholder(styleDict) {
    return exports.StylePlaceholders.indexStyleDictByPlaceholder(styleDict);
}
exports.indexByPlaceholder = indexByPlaceholder;
function replacePlaceholders(styles, placeholder, replaceWith) {
    return exports.StylePlaceholders.replacePlaceholders(styles, placeholder, replaceWith);
}
exports.replacePlaceholders = replacePlaceholders;
function mapIndexToStyle(index, styles) {
    return exports.StylePlaceholders.mapIndexToStyle(index, styles);
}
exports.mapIndexToStyle = mapIndexToStyle;
