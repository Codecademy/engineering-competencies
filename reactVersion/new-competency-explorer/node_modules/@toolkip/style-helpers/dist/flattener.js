"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const object_helpers_1 = require("@toolkip/object-helpers");
const combiner_1 = require("./combiner");
class _StyleFlattener {
    flatten(styles) {
        return this._flattenStyles(styles, "");
    }
    _flattenStyles(styles, lastSelector) {
        let outStyles = {};
        object_helpers_1.map(styles, (value, selector) => {
            let newSelectors = this._buildNewSelectors(selector, lastSelector);
            for (let selector of newSelectors) {
                let calculatedStyles = this._flattenClassDefinition(selector, value);
                outStyles = combiner_1.combineStyles(outStyles, calculatedStyles);
            }
        });
        return outStyles;
    }
    _flattenClassDefinition(selector, classDef) {
        let topStyles = {
            [selector]: {},
        };
        object_helpers_1.map(classDef, (propertyValue, propertyName) => {
            if (propertyName === "nested") {
                let subnestedStyles = this._flattenStyles(propertyValue, selector);
                topStyles = combiner_1.combineStyles(topStyles, subnestedStyles);
            }
            else {
                topStyles[selector][propertyName] = propertyValue;
            }
        });
        return topStyles;
    }
    _buildNewSelectors(curSelector, lastSelector) {
        let newSelectors = curSelector.split(",");
        if (!lastSelector) {
            return newSelectors;
        }
        for (let i = 0; i < newSelectors.length; i += 1) {
            newSelectors[i] = this._buildNewSelector(newSelectors[i], lastSelector);
        }
        return newSelectors;
    }
    _buildNewSelector(newSelector, lastSelector) {
        let out = "";
        if (newSelector.indexOf("&") !== -1) {
            out = newSelector.replace(/&/g, lastSelector);
        }
        else {
            out = lastSelector + " " + newSelector;
        }
        return out;
    }
}
const StyleFlattener = new _StyleFlattener();
function flattenStyles(styles) {
    return StyleFlattener.flatten(styles);
}
exports.flattenStyles = flattenStyles;
