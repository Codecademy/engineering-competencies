"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const object_helpers_1 = require("@toolkip/object-helpers");
const async_1 = require("@toolkip/async");
const css_1 = require("./css");
const styleElement_1 = require("./styleElement");
const stringifier_1 = require("./stringifier");
class _TransitionController {
    constructor() {
        this._lastClsId = 0;
        this._generatedClasses = {};
    }
    transition(details) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!details.elem) {
                return Promise.reject("no element");
            }
            if (!details.time) {
                return Promise.reject("no time");
            }
            let startName = this._getClass(details.start, details.elem);
            if (!details.end.transition) {
                details.end.transition = "all ease-in-out " + (details.time / 1000) + "s";
            }
            let endName = this._getClass(details.end, details.elem);
            yield this._animate(details, startName, endName);
        });
    }
    _getClass(classDef, elem) {
        classDef = this._replacePlaceholders(classDef, elem);
        let strDef = JSON.stringify(classDef).replace(/ /g, "");
        if (this._generatedClasses[strDef]) {
            return this._generatedClasses[strDef];
        }
        let name = this._generateRandomClassName();
        this._generatedClasses[strDef] = name;
        this._createTransitionClass(name, classDef, elem);
        return name;
    }
    _generateRandomClassName() {
        this._lastClsId += 1;
        return "gencls" + this._lastClsId;
    }
    _createTransitionClass(className, classDef, elem) {
        if (!this._styleElem) {
            this._createStyleElem();
        }
        this._styleElem.innerHTML += stringifier_1.stringifyStyle("." + className, classDef);
    }
    _replacePlaceholders(classDef, elem) {
        object_helpers_1.map(classDef, (value, key) => {
            value = value.replace("<width>", (elem.offsetWidth + 1) + "px");
            value = value.replace("<height>", elem.offsetHeight + "px");
            value = value.replace("<left>", elem.offsetLeft + "px");
            value = value.replace("<top>", elem.offsetTop + "px");
            value = value.replace("<right>", (elem.offsetLeft + elem.offsetWidth) + "px");
            value = value.replace("<bottom>", (elem.offsetTop + elem.offsetHeight) + "px");
            classDef[key] = value;
        });
        return classDef;
    }
    _createStyleElem() {
        this._styleElem = styleElement_1.createStyleElement();
        document.head.appendChild(this._styleElem);
    }
    _animate(details, startName, endName) {
        return __awaiter(this, void 0, void 0, function* () {
            yield async_1.nextRender();
            css_1.addClass(details.elem, startName);
            yield async_1.wait(details.delay || 0);
            css_1.addClass(details.elem, endName);
            yield async_1.wait(details.time);
            css_1.removeClass(details.elem, startName);
            yield async_1.nextRender();
            this._removeEndClass(details.elem, endName);
            return;
        });
    }
    _removeEndClass(elem, endName) {
        return __awaiter(this, void 0, void 0, function* () {
            yield async_1.wait(10);
            css_1.removeClass(elem, endName);
        });
    }
}
const TransitionController = new _TransitionController();
function transition(element, startStyle, endStyle, time, delay) {
    return TransitionController.transition({
        elem: element,
        start: startStyle,
        end: endStyle,
        time: time,
        delay: delay || 0
    });
}
exports.transition = transition;
