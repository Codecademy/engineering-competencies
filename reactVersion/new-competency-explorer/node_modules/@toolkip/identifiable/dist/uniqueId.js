"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class _IdentifierAssigner {
    constructor() {
        this._lastIds = { "id": 0 };
    }
    getLastId(uniqueKey) { return this._lastIds[uniqueKey]; }
    _cleanUniqueKey(suffix) {
        if (!suffix) {
            return "id";
        }
        return suffix.replace(/-/g, "_");
    }
    _getNumericId(lastId) {
        const pieces = lastId.split("-");
        let numericId = NaN;
        for (let pc of pieces) {
            const parsedPiece = parseInt(pc);
            if (!isNaN(parsedPiece)) {
                numericId = parsedPiece;
            }
        }
        return numericId;
    }
    generateUniqueId(uniqueKey, supplementalSuffix) {
        uniqueKey = this._cleanUniqueKey(uniqueKey);
        const nextId = (this._lastIds[uniqueKey] || 0) + 1;
        this._lastIds[uniqueKey] = nextId;
        if (supplementalSuffix) {
            return `${nextId}-${supplementalSuffix}`;
        }
        else {
            return `${nextId}`;
        }
    }
    registerId(idToRegister, uniqueKey) {
        const lastId = this._getNumericId(idToRegister);
        const key = this._cleanUniqueKey(uniqueKey);
        if (isNaN(lastId)) {
            return false;
        }
        if (lastId <= this._lastIds[key]) {
            return false;
        }
        this._lastIds[key] = lastId;
        return true;
    }
    reset(uniqueKey) {
        const key = this._cleanUniqueKey(uniqueKey);
        this._lastIds[key] = 0;
    }
}
exports.IdentifierAssigner = new _IdentifierAssigner();
function generateUniqueId(uniqueKey, supplementalSuffix) {
    return exports.IdentifierAssigner.generateUniqueId(uniqueKey, supplementalSuffix);
}
exports.generateUniqueId = generateUniqueId;
function registerUniqueId(lastId, uniqueKey) {
    return this.IdentifierAssigner.registerId(lastId, uniqueKey);
}
exports.registerUniqueId = registerUniqueId;
