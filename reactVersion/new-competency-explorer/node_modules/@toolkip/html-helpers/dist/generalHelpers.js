"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const style_helpers_1 = require("@toolkip/style-helpers");
const _typeguards_1 = require("./_typeguards");
const shared_types_1 = require("@toolkip/shared-types");
function removeSubclassFromAllElements(cls, subcls, exception) {
    let elems;
    let e;
    let elem;
    elems = document.getElementsByClassName(cls);
    for (e = 0; e < elems.length; e += 1) {
        elem = elems[e];
        if (elem !== exception) {
            style_helpers_1.removeClass(elem, subcls);
        }
    }
}
exports.removeSubclassFromAllElements = removeSubclassFromAllElements;
;
function addResizingElement(elem, fixedRatio, forceInitW, forceInitH) {
}
;
function resizeElement(obj) {
}
;
function isChildEventTarget(ev, root) {
    return isChild(root, ev.target);
}
exports.isChildEventTarget = isChildEventTarget;
;
function isChild(root, child) {
    ;
    let parent;
    parent = child;
    while (parent) {
        if (parent === root)
            return true;
        parent = parent.parentNode;
    }
    return false;
}
exports.isChild = isChild;
;
function appendChildren(parent, ...kids) {
    ;
    let idx;
    for (idx = 0; idx < kids.length; idx += 1) {
        parent.appendChild(kids[idx]);
    }
}
exports.appendChildren = appendChildren;
function clearChildren(parent) {
    for (let idx = parent.children.length - 1; idx >= 0; idx -= 1) {
        let child = parent.children[idx];
        parent.removeChild(child);
    }
}
exports.clearChildren = clearChildren;
function moveElemRelativePosition(elem, distance) {
    let top = parseInt(elem.style.top) || 0;
    let left = parseInt(elem.style.left) || 0;
    elem.style.top = (top + distance.y) + "px";
    elem.style.left = (left + distance.x) + "px";
}
exports.moveElemRelativePosition = moveElemRelativePosition;
function resetPageFocus() {
    let oldTabIndex = -1;
    if (shared_types_1.isNullOrUndefined(document.body.tabIndex)) {
        oldTabIndex = document.body.tabIndex;
    }
    document.body.tabIndex = 0;
    document.body.focus();
    document.body.tabIndex = oldTabIndex;
}
exports.resetPageFocus = resetPageFocus;
function removeElement(elem) {
    if (!elem.parentNode) {
        return;
    }
    elem.parentNode.removeChild(elem);
}
exports.removeElement = removeElement;
function select(htmlElem) {
    if (_typeguards_1.isSelectable(htmlElem)) {
        htmlElem.select();
    }
    else {
        let range = document.createRange();
        range.selectNodeContents(htmlElem);
        let selection = window.getSelection();
        selection.removeAllRanges();
        selection.addRange(range);
    }
}
exports.select = select;
exports.HTML_TAB = "&nbsp;&nbsp;&nbsp;&nbsp;";
function encodeForHTML(data) {
    data = data.replace(/&/g, "&amp;");
    data = data.replace(/</g, "&lt;");
    data = data.replace(/>/g, "&gt;");
    data = data.replace(/\\n/g, "<br>");
    data = data.replace(/\\t/g, exports.HTML_TAB);
    return data;
}
exports.encodeForHTML = encodeForHTML;
function decodeFromHTML(data) {
    data = data.replace(/&amp;/g, "&");
    data = data.replace(/&lt;/g, "<");
    data = data.replace(/&gt;/g, ">");
    data = data.replace(/&quot;/g, "\"");
    data = data.replace(/&apos;/g, "'");
    data = data.replace(/<br>/g, "\n");
    data = data.replace(new RegExp(exports.HTML_TAB, "g"), "\t");
    data = data.replace(/&nbsp;/g, " ");
    return data;
}
exports.decodeFromHTML = decodeFromHTML;
function replaceElemWithElem(elemToReplace, replacement) {
    if (!elemToReplace.parentNode) {
        return;
    }
    let nextChild = elemToReplace.nextSibling;
    let parent = elemToReplace.parentNode;
    parent.removeChild(elemToReplace);
    parent.insertBefore(replacement, nextChild);
}
exports.replaceElemWithElem = replaceElemWithElem;
function isVisible(elem) {
    if (_typeguards_1.hasOffsets(elem)) {
        if (elem.offsetWidth !== 0) {
            return true;
        }
        if (elem.offsetHeight !== 0) {
            return true;
        }
    }
    else {
        if (elem.clientWidth !== 0) {
            return true;
        }
        if (elem.clientHeight !== 0) {
            return true;
        }
    }
    return false;
}
exports.isVisible = isVisible;
function getElementsBySelector(selector) {
    let list = document.body.querySelectorAll(selector);
    let out = [];
    for (let l of list) {
        out.push(l);
    }
    return out;
}
exports.getElementsBySelector = getElementsBySelector;
function doesElementMatchSelector(elem, selector) {
    if (!elem) {
        return false;
    }
    if (!elem.matches) {
        return false;
    }
    return elem.matches(selector);
}
exports.doesElementMatchSelector = doesElementMatchSelector;
