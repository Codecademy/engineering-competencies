"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function globalOffsetLeft(elem, parent, useStandardParent) {
    return _auxGlobalOffset(elem, "offsetLeft", parent, useStandardParent);
}
exports.globalOffsetLeft = globalOffsetLeft;
;
function globalOffsetTop(elem, parent, useStandardParent) {
    return _auxGlobalOffset(elem, "offsetTop", parent, useStandardParent);
}
exports.globalOffsetTop = globalOffsetTop;
;
function globalOffsets(elem, parent, useStandardParent) {
    ;
    return {
        left: globalOffsetLeft(elem, parent, useStandardParent),
        top: globalOffsetTop(elem, parent, useStandardParent)
    };
}
exports.globalOffsets = globalOffsets;
;
function _auxGlobalOffset(elem, type, parent, useStandardParent) {
    let offset = 0;
    while (elem && (elem !== parent)) {
        if (elem[type]) {
            offset += elem[type];
        }
        if (useStandardParent) {
            elem = elem.parentNode;
        }
        else {
            elem = elem.offsetParent;
        }
    }
    return offset;
}
;
function getScrollPosition() {
    let out = {
        x: (window.pageXOffset) ? window.pageXOffset : document.body.scrollLeft,
        y: (window.pageYOffset) ? window.pageYOffset : document.body.scrollTop
    };
    return out;
}
exports.getScrollPosition = getScrollPosition;
function measureElement(elem, parent) {
    let added = false;
    if (!elem.parentNode) {
        added = true;
        let origOpacity = elem.style.opacity;
        elem.style.opacity = "0";
        window.setTimeout(() => { elem.style.opacity = origOpacity; });
        if (!parent) {
            parent = document.body;
        }
        parent.appendChild(elem);
    }
    let rect = elem.getBoundingClientRect();
    if (added) {
        parent.removeChild(elem);
    }
    return rect;
}
exports.measureElement = measureElement;
function findCommonParent(elem_a, elem_b) {
    let parent_a;
    let parent_b;
    if (!elem_a || !elem_b)
        return undefined;
    parent_a = elem_a;
    parent_b = elem_b;
    while (parent_a) {
        while (parent_b) {
            if (parent_a === parent_b)
                return parent_a;
            parent_b = parent_b.parentNode;
        }
        parent_a = parent_a.parentNode;
        parent_b = elem_b;
    }
    return undefined;
}
exports.findCommonParent = findCommonParent;
;
function moveRelToElem(elem, ref, x, y, no_move) {
    let offset_me;
    let offset_them;
    let dx;
    let dy;
    offset_me = globalOffsets(elem);
    offset_them = globalOffsets(elem);
    dx = (offset_them.left + x) - offset_me.left;
    dy = (offset_them.top + y) - offset_me.top;
    if (!no_move) {
        elem.style.position = "absolute";
        elem.style.left = dx + "px";
        elem.style.top = dy + "px";
    }
    return { x: dx, y: dy };
}
exports.moveRelToElem = moveRelToElem;
;
function isInDOM(elem) {
    let parentNode = elem.parentNode;
    while (parentNode) {
        if (parentNode === document.body) {
            return true;
        }
        parentNode = parentNode.parentNode;
    }
    return false;
}
exports.isInDOM = isInDOM;
