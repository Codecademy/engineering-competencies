"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const shared_types_1 = require("@toolkip/shared-types");
function piece(str, delim, pc = 1) {
    let split_arr;
    split_arr = str.split(delim);
    return split_arr[pc] || "";
}
exports.piece = piece;
;
function addPiece(str, nextPiece, delim) {
    if (str.length > 0) {
        str += delim;
    }
    return str + nextPiece;
}
exports.addPiece = addPiece;
function titleCase(str, delim = " ") {
    let words;
    let w;
    let out;
    out = "";
    words = str.split(delim);
    for (w = 0; w < words.length; w += 1) {
        if (w !== 0) {
            out += delim;
        }
        out += charAt(words[w], 0).toUpperCase();
        out += rest(words[w], 1).toLowerCase();
    }
    return out;
}
exports.titleCase = titleCase;
;
function sentenceCase(str) {
    let out;
    out = charAt(str, 0).toUpperCase();
    out += rest(str, 1).toLowerCase();
    return out;
}
exports.sentenceCase = sentenceCase;
;
function charAt(str, idx) {
    return str.substr(idx, 1);
}
exports.charAt = charAt;
;
function rest(str, idx) {
    return str.substring(idx, str.length);
}
exports.rest = rest;
;
function trim(str) {
    let ret;
    ret = str.replace(/^\s*/g, "");
    ret = ret.replace(/\s*?$/g, "");
    return ret;
}
exports.trim = trim;
;
function stripSpaces(str) {
    let ret;
    ret = str.replace(/\s/g, "");
    ret = ret.replace(/\&nbsp\;/g, "");
    return ret;
}
exports.stripSpaces = stripSpaces;
function format(str, ...replacements) {
    let stringArr = str.split("");
    if (!replacements) {
        replacements = [];
    }
    let number = "";
    let lookingForNumber = false;
    for (let idx = 0; idx < stringArr.length; idx += 1) {
        let char = stringArr[idx];
        if (char === "\\") {
            stringArr[idx] = "";
            idx += 1;
            continue;
        }
        else if (char === "{") {
            lookingForNumber = true;
            stringArr[idx] = "";
        }
        else if (char === "}" && lookingForNumber) {
            stringArr[idx] = (!shared_types_1.isNullOrUndefined(replacements[+number]) ? replacements[+number].toString() : "{" + number + "}");
            lookingForNumber = false;
            number = "";
        }
        else if (isNumeric(char) && lookingForNumber) {
            number += char;
            stringArr[idx] = "";
        }
        else if (lookingForNumber) {
            lookingForNumber = false;
            number = "";
        }
    }
    return stringArr.join("");
}
exports.format = format;
function isNumeric(str) {
    return /^[0-9]+$/.test(str);
}
exports.isNumeric = isNumeric;
function addLeadingZeroes(count, unpadded) {
    ;
    let out;
    if (typeof unpadded === "string") {
        out = unpadded;
    }
    else {
        out = unpadded.toString();
    }
    let z;
    for (z = out.length; z < count; z += 1) {
        out = "0" + out;
    }
    return out;
}
exports.addLeadingZeroes = addLeadingZeroes;
;
function stripHTML(str) {
    let out;
    out = str.replace(/\<.*?\>/g, "");
    return out;
}
exports.stripHTML = stripHTML;
function join(joinChar, ...toJoin) {
    return toJoin.join(joinChar);
}
exports.join = join;
