"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const managers_1 = require("@toolkip/managers");
const abstractClasses_1 = require("../abstractClasses");
const object_helpers_1 = require("@toolkip/object-helpers");
const shared_types_1 = require("@toolkip/shared-types");
class MManager extends abstractClasses_1._KeyedModels {
    _getDefaultValues() { return new managers_1.DataManager(); }
    _getValue(output, key) {
        return output.get(key);
    }
    _innerGetData() {
        const out = super._innerGetData();
        return out.toArray();
    }
    _innerExport() {
        const out = super._innerExport();
        return out.toArray();
    }
    toDataManager() {
        return super._innerGetData();
    }
    toArray() {
        return this._innerGetData();
    }
    toDictionary() {
        const manager = this.toDataManager();
        return manager.toDictionary();
    }
    _setValue(output, key, value) {
        if (this._isRemoval(output, key, value)) {
            output.remove(key);
        }
        else if (this._isReplacement(output, key)) {
            output.remove(key);
            output.add(value);
        }
        else if (!shared_types_1.isUndefined(value)) {
            output.add(value);
        }
    }
    _isRemoval(output, key, value) {
        if (!managers_1.isDataManager(output)) {
            return false;
        }
        if (!output.contains(key)) {
            return false;
        }
        if (shared_types_1.isUndefined(value)) {
            return true;
        }
        if (shared_types_1.isUndefined(value.getData())) {
            return true;
        }
        return false;
    }
    _isReplacement(output, key) {
        if (!managers_1.isDataManager(output)) {
            return false;
        }
        if (!output.contains(key)) {
            return false;
        }
        return true;
    }
    _map(data, mapFunc) {
        if (managers_1.isDataManager(data)) {
            data.map(mapFunc);
        }
        else if (shared_types_1.isArray(data)) {
            object_helpers_1.map(data, (val, idx) => mapFunc(val, val.id));
        }
        else {
            object_helpers_1.map(data, mapFunc);
        }
    }
    add(item) {
        if (this.contains(item)) {
            return false;
        }
        this._innerSet({
            key: item.id,
            value: item,
            eventType: 'add'
        });
        return true;
    }
    getIndex(item) {
        if (this._innerModel.contains(item.id)) {
            return item.id;
        }
        return undefined;
    }
}
exports.MManager = MManager;
