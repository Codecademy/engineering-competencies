"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const arrayModel_1 = require("../arrayModel");
const modelFactory_1 = require("../../helpers/modelFactory");
modelFactory_1.setupModelWrapping();
describe('ModelArray', () => {
    describe('getters and setters', () => {
        it('sets an appropriate default value', () => {
            const model = new arrayModel_1.MArray();
            expect(model.getData()).toMatchObject([]);
        });
        it('sets values into the array', () => {
            const data = { name: 'Cookie Monster', age: 10 };
            const model = new arrayModel_1.MArray([data]);
            expect(model.getData()).toMatchObject([data]);
        });
        it('replaces the whole array', () => {
            const data = { name: 'Cookie Monster', age: 10 };
            const model = new arrayModel_1.MArray([data, data, data]);
            expect(model.getData()).toHaveLength(3);
            model.setData([data]);
            expect(model.getData()).toHaveLength(1);
        });
    });
    describe('listeners', () => {
        it('can set multiple times from the same nested object', () => {
            const models = [
                { name: 'Big Bird', age: 11 },
                { name: 'Oscar', age: 54 }
            ];
            const model = new arrayModel_1.MArray(models);
            const cb = jest.fn((payload) => {
                expect(payload.eventType).toEqual('modify');
            });
            model.addEventListener(cb);
            const nestedModel = model.getModel(0);
            nestedModel.set('name', 'Elmo');
            expect(model.get(0)).toEqual(Object.assign(Object.assign({}, models[0]), { name: 'Elmo' }));
            nestedModel.set('name', 'Grover');
            expect(model.get(0)).toEqual(Object.assign(Object.assign({}, models[0]), { name: 'Grover' }));
            expect(cb).toHaveBeenCalledTimes(2);
        });
    });
    describe('collection-specific functions', () => {
        it('processes adds differently', () => {
            expect.assertions(2);
            const data = { name: 'Cookie Monster', age: 10 };
            const model = new arrayModel_1.MArray();
            model.addEventListener((payload) => {
                expect(payload.eventType).toEqual('add');
            });
            model.add(data);
            expect(model.getData()).toMatchObject([data]);
        });
        it('processes removes differently', () => {
            expect.assertions(4);
            const data = { name: 'Cookie Monster', age: 10 };
            const model = new arrayModel_1.MArray([data]);
            model.addEventListener((payload) => {
                expect(payload.eventType).toEqual('remove');
            });
            expect(model.getData()).toMatchObject([data]);
            model.remove(0);
            expect(model.getData()).toMatchObject([]);
            expect(model.getData()).toHaveLength(0);
        });
        it('clears the array appropriately', () => {
            expect.assertions(3);
            const data = { name: 'Cookie Monster', age: 10 };
            const model = new arrayModel_1.MArray([data, data]);
            model.addEventListener((payload) => {
                expect(payload.eventType).toEqual('remove');
                expect(payload.oldValue).toHaveLength(2);
            });
            model.clear();
            expect(model.getData()).toHaveLength(0);
        });
        it('checks for containment', () => {
            const data = ['A', 'B', 'C'];
            const model = new arrayModel_1.MArray(data);
            expect(model.contains('A')).toBeTruthy();
            expect(model.contains('C')).toBeTruthy();
            expect(model.contains('D')).toBeFalsy();
        });
    });
});
