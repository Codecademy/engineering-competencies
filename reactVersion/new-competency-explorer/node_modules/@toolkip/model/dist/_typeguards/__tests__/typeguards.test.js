"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
const objectModels_1 = require("../../objectModels");
const modelFactory_1 = require("../../helpers/modelFactory");
const primitiveModels_1 = require("../../primitiveModels");
const arrayModels_1 = require("../../arrayModels");
modelFactory_1.setupModelWrapping();
describe('identfiable guards', () => {
    it('identfies an identifiable', () => {
        const identifiable = {
            greeting: 'hello',
            id: '1-test',
        };
        const model = new objectModels_1.MIdentifiable(identifiable);
        expect(__1.isIdentifiableModel(model)).toBeTruthy();
    });
    it('identifies a non-identifiable', () => {
        const identifiable = {
            greeting: 'hello',
            id: '1-test',
        };
        const model = new objectModels_1.MObject(identifiable);
        expect(__1.isIdentifiableModel(model)).toBeFalsy();
    });
});
describe('model guards', () => {
    it('identifies a primitive model', () => {
        const m = new primitiveModels_1.MPrimitive('hello');
        expect(__1.isModel(m)).toBeTruthy();
        expect(__1.isPrimitiveModel(m)).toBeTruthy();
    });
    it('identifies a date model', () => {
        const m = new primitiveModels_1.MDate(new Date('2020-05-20'));
        expect(__1.isModel(m)).toBeTruthy();
        expect(__1.isDateModel(m)).toBeTruthy();
    });
    it('identifies an object model', () => {
        const m = new objectModels_1.MObject({ name: 'Cookie Monster', age: 10 });
        expect(__1.isModel(m)).toBeTruthy();
        expect(__1.isObjectModel(m)).toBeTruthy();
    });
    it('identifies an array model', () => {
        const m = new arrayModels_1.MArray(['A', 'B', 'C']);
        expect(__1.isModel(m)).toBeTruthy();
        expect(__1.isArrayModel(m)).toBeTruthy();
    });
    it('identifies a model manager', () => {
        const m = new arrayModels_1.MManager();
        expect(__1.isModel(m)).toBeTruthy();
        expect(__1.isManagerModel(m)).toBeTruthy();
    });
    it('identifies a non-model appropriately', () => {
        const data = { name: 'Cookie Monster', age: 10 };
        expect(__1.isModel(data)).toBeFalsy();
        const m = new objectModels_1.MObject(data);
        expect(__1.isModel(m)).toBeTruthy();
        expect(__1.isModel(m.getData())).toBeFalsy();
    });
});
