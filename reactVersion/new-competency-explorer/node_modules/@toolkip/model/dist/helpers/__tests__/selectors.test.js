"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const primitiveModels_1 = require("../../primitiveModels");
const selectors_1 = require("../selectors");
const objectModels_1 = require("../../objectModels");
const modelFactory_1 = require("../../helpers/modelFactory");
const arrayModels_1 = require("../../arrayModels");
modelFactory_1.setupModelWrapping();
describe('Selectors', () => {
    it('allows for selecting on un-keyed models', () => {
        expect.assertions(3);
        const model = new primitiveModels_1.MPrimitive();
        selectors_1.select(model).apply(({ value }) => { expect(value).toEqual(model.getData()); });
        model.setData('hello');
        model.setData('goodbye');
    });
    it('handles applying the current value', () => {
        const model = new primitiveModels_1.MPrimitive('hello');
        selectors_1.select(model).apply((v) => expect(v).toBeTruthy());
        model.setData('good day');
        model.setData('goodbye');
    });
    it('allows for selecting on object models', () => {
        const data = { name: 'Big Bird', age: 11 };
        const model = new objectModels_1.MObject(data);
        selectors_1.select(model, (value) => {
            return `${value.name} is ${value.age} years old`;
        }).apply(({ value, oldValue }) => {
            expect(oldValue).toEqual('Big Bird is 11 years old');
            expect(value).toEqual('Big Bird is 8 years old');
        }, true);
        model.set('age', 8);
    });
    it('only fires for certain keys', () => {
        const data = { name: 'Big Bird', age: 11 };
        const model = new objectModels_1.MObject(data);
        const processor = jest.fn((value) => `Hello ${value.name}`);
        selectors_1.select(model, processor, { keys: ['name'] })
            .apply(({ value }) => {
            expect(value).toContain('Hello');
            expect(value).not.toContain(model.get('age'));
        });
        model.set('name', 'Elmo');
        model.set('age', 8);
        model.set('name', 'Big Bird');
        expect(processor).toHaveBeenCalledTimes(3);
    });
    it('only fires for certain event types', () => {
        const data = { name: 'Big Bird', age: 11 };
        const model = new objectModels_1.MObject(data);
        const processor = jest.fn((val, { eventType }) => {
            if (!eventType) {
                return;
            }
            expect(eventType).toEqual('modify');
        });
        selectors_1.select(model, processor, { eventTypes: ['modify'] });
        model.set('name', '');
        model.set('age', 12);
        model.set('name', 'Elmo');
        expect(processor).toHaveBeenCalledTimes(2);
    });
    it('can run a custom filter event', () => {
        const data = { name: 'Big Bird', age: 11 };
        const model = new objectModels_1.MObject(data);
        const processor = jest.fn((val, { eventType }) => {
            if (!eventType) {
                return;
            }
            expect(eventType).toEqual('modify');
        });
        selectors_1.select(model, processor, { eventTypes: ['modify'] }).filter(({ value }) => {
            if (value % 2 === 1) {
                return true;
            }
            return false;
        });
        model.set('age', 13);
        model.set('age', 12);
        model.set('age', 11);
        expect(processor).toHaveBeenCalledTimes(2);
    })
        >
            it('can be chained', () => {
                const model = new objectModels_1.MObject({
                    obj: { name: 'Big Bird', age: 11 }
                });
                const cb = jest.fn();
                selectors_1.select(model, (m) => m.obj)
                    .select((s) => s.name)
                    .apply(cb, true);
                model.update('obj', { name: 'Cookie Monster' });
                model.update('obj', { age: 10 });
                model.getModel('obj').set('age', 8);
                model.getModel('obj').set('name', 'Elmo');
                expect(cb).toHaveBeenCalledTimes(2);
            });
    it('can be chained to an array', () => {
        const results = [];
        const model = new arrayModels_1.MArray([
            { name: 'Big Bird', age: 11 },
            { name: 'Elmo', age: 8 },
            { name: 'Cookie Monster', age: 10 }
        ]);
        selectors_1.select(model, (data, event) => event ? data[event.key] : null)
            .select((data) => data && `Hello ${data.name}!`)
            .apply(({ value }) => results.push(value), true);
        model.update(1, { name: 'Elmer' });
        model.update(2, { name: 'Cookie Angel' });
        model.update(2, { age: 11 });
        model.update(0, { age: 12 });
        expect(results).toMatchObject([
            'Hello Elmer!',
            'Hello Cookie Angel!',
            'Hello Big Bird!'
        ]);
    });
    it('can map across elements', () => {
        const results = [];
        const model = new arrayModels_1.MArray();
        selectors_1.select(model).map((elem) => {
            results.push(`${elem.name} is ${elem.age} years old`);
        });
        model.setData([
            { name: 'Big Bird', age: 11 },
            { name: 'Elmo', age: 8 },
            { name: 'Cookie Monster', age: 10 }
        ]);
        expect(results).toMatchObject([
            'Big Bird is 11 years old',
            'Elmo is 8 years old',
            'Cookie Monster is 10 years old'
        ]);
    });
    it('can select via a map across elements', () => {
        let results = [];
        const model = new arrayModels_1.MArray();
        selectors_1.select(model)
            .mapSelect((e) => e.name)
            .apply(({ value }) => { results = value; });
        model.setData([
            { name: 'Big Bird', age: 11 },
            { name: 'Elmo', age: 8 },
            { name: 'Cookie Monster', age: 10 }
        ]);
        expect(results).toMatchObject([
            'Big Bird',
            'Elmo',
            'Cookie Monster'
        ]);
        model.update(0, { age: 12 });
        model.update(1, { age: 7 });
        expect(results).toMatchObject([
            'Big Bird',
            'Elmo',
            'Cookie Monster'
        ]);
    });
    it('can have multiple listeners', () => {
        const model = new objectModels_1.MObject({ name: 'Big Bird', age: 10 });
        const nameFunc = jest.fn(({ value }) => expect(typeof value).toEqual('string'));
        const ageFunc = jest.fn(({ value }) => expect(typeof value).toEqual('number'));
        selectors_1.select(model, (data) => data.name).apply(nameFunc);
        selectors_1.select(model, (data) => data.age).apply(ageFunc);
        model.setData({ name: 'Elmo', age: 8 });
        model.set('name', 'Oscar');
        expect(nameFunc).toHaveBeenCalledTimes(3);
        expect(ageFunc).toHaveBeenCalledTimes(2);
    });
    it('can listen at different levels', () => {
        const model = new arrayModels_1.MArray();
        const subModels = [];
        const results = [];
        selectors_1.select(model, (data, event) => event && data[event.key], { eventTypes: ['add'] })
            .apply((payload) => {
            const targetModel = payload.eventChain.target;
            const subModel = targetModel.getModel(payload.key);
            subModels.push(subModel);
            selectors_1.select(subModel, (data) => data.name, { eventTypes: ['modify'] })
                .apply(({ value }) => results.push(value), true);
        }, true);
        model.add({ name: 'Big Bird', age: 11 });
        model.add({ name: 'Elmo', age: 8 });
        model.update(0, { name: 'Oscar' });
        model.update(1, { age: 9 });
        model.update(1, { name: 'Bert' });
        expect(subModels.length).toEqual(2);
        expect(results).toMatchObject([
            'Oscar',
            'Bert'
        ]);
    });
    it('can chain selectors through select', () => {
        const model = new primitiveModels_1.Model({ name: 'Big Bird', age: 10 });
        const firstSelector = selectors_1.select(model, (m) => m.name);
        const secondSelector = selectors_1.select(firstSelector, (name) => name.toUpperCase());
        secondSelector.apply(({ value }) => {
            expect(value).toEqual("BIG BIRD");
        });
    });
    it('can listen for a model that does not yet exist', () => {
        const model = new primitiveModels_1.Model();
        const firstSelector = selectors_1.select(model, (m) => m === null || m === void 0 ? void 0 : m.name);
        const secondSelector = selectors_1.select(firstSelector, (name) => name === null || name === void 0 ? void 0 : name.toUpperCase());
        secondSelector.apply((payload) => {
            const { value } = payload;
            expect(value).toEqual('OSCAR');
        }, true);
        model.import({ name: 'Oscar', age: 45 });
    });
});
describe('Raw Selectors', () => {
    it('allows selecting on non-models', () => {
        const obj = { name: 'Big Bird', age: 10 };
        const fn = jest.fn(({ value }) => { expect(value).toEqual('Big Bird'); });
        selectors_1.rawSelect(obj, (o) => o.name)
            .apply(fn);
        expect(fn).toHaveBeenCalledTimes(1);
    });
});
