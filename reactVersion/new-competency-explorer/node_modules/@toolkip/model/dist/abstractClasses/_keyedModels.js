"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _keyedModel_1 = require("./_keyedModel");
const comparable_1 = require("@toolkip/comparable");
const shared_types_1 = require("@toolkip/shared-types");
const core_1 = require("../_typeguards/core");
class _KeyedModels extends _keyedModel_1._KeyedModel {
    _getType() { return 'array'; }
    remove(key) {
        const out = this.get(key);
        this._innerSet({
            key,
            value: undefined
        });
        return out;
    }
    findIndex(val) {
        let out;
        this._map(this._innerModel, (v, key) => {
            if (comparable_1.equals(val, core_1.isModel(v) ? v.getData() : v)) {
                out = key;
            }
        });
        return out;
    }
    contains(val) {
        const key = this.findIndex(val);
        if (shared_types_1.isUndefined(key)) {
            return false;
        }
        return true;
    }
    clear() {
        this._innerSetData({
            eventType: 'remove',
            value: this._getDefaultValues()
        });
    }
}
exports._KeyedModels = _KeyedModels;
