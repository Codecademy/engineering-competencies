import { DataManager } from '@toolkip/managers';
import { IIdentifiable, Identifier } from '@toolkip/identifiable';
import { _KeyedModels } from '../abstractClasses';
import { IArrayModel } from '../_shared/_interfaces';
import { MIdentifiable } from '../objectModels/identifiableModel';
import { IDictionary } from '@toolkip/object-helpers';
declare type ModelManagerInputs<T extends IIdentifiable> = DataManager<T> | T[] | IDictionary<T>;
export declare class MManager<T extends IIdentifiable> extends _KeyedModels<ModelManagerInputs<T>, Identifier, T> implements IArrayModel<T, Identifier> {
    protected _innerModel: DataManager<T>;
    protected _getDefaultValues(): DataManager<T>;
    protected _getValue(output: any, key: Identifier): MIdentifiable<T>;
    protected _innerGetData(): T[];
    protected _innerExport(): T[];
    toDataManager(): DataManager<T>;
    toArray(): T[];
    toDictionary(): Record<string | number, T>;
    protected _setValue(output: any, key: Identifier, value: MIdentifiable<T>): void;
    protected _isRemoval(output: any, key: Identifier, value: MIdentifiable<T>): boolean;
    protected _isReplacement(output: any, key: Identifier): boolean;
    protected _map(data: ModelManagerInputs<T>, mapFunc: (val: T, key: Identifier) => void): void;
    add(item: T): boolean;
    getIndex(item: T): Identifier;
}
export {};
