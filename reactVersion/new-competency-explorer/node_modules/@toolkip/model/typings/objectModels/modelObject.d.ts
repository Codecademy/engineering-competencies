import { _Model, _KeyedModel } from '../abstractClasses';
import { IModelData, IObjectKeyedModelTransforms } from '../_shared/_interfaces';
export declare class MObject<T extends IModelData, K extends keyof T = keyof T> extends _KeyedModel<T, K, T[K]> {
    protected _transforms: IObjectKeyedModelTransforms<T>;
    constructor(data?: Partial<T>, transforms?: IObjectKeyedModelTransforms<T>);
    protected _getDefaultValues(): T;
    protected _map<_K extends keyof T>(data: T, mapFunc: (val: T[_K], key: _K) => void): void;
    protected _getValue<_K extends keyof T>(model: T, key: _K): T[_K];
    get<_K extends K>(key: _K): T[_K];
    protected _setValue<_K extends keyof T>(model: T, key: _K, value: _Model<T[_K]>): void;
    set<_K extends K>(key: _K, value: T[_K]): void;
}
