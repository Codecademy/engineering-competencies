import { ISelector, SelectorFilterMaps, SelectorFunc, SelectorApplyFunc, SelectorMapFunc, SelectorFilters, SelectorFilterFunc, Selectable, ModelEventFullPayload, SelectorMapSelectFunc } from '../_shared';
export declare class Selector<I, O = I, X = any, K = any> implements ISelector<I, O, X, K> {
    protected _lastModel: O;
    protected _model: Selectable<I>;
    protected _filterMap: SelectorFilterMaps<I>;
    protected _processor: SelectorFunc<I, O>;
    protected _applyFuncs: SelectorApplyFunc<O>[];
    protected _mapFuncs: SelectorMapFunc<X, K>[];
    getData(): O;
    constructor(model: Selectable<I>, processor?: SelectorFunc<I, O>, filters?: SelectorFilters<I>);
    protected _setupFilters({ keys, eventTypes }: SelectorFilters<I>): void;
    filter(filterFunc: SelectorFilterFunc<I>): this;
    reselect(callbacks?: {
        apply?: SelectorApplyFunc<O>[];
        map?: SelectorMapFunc<X, K>[];
    }): void;
    protected _createReselectEvent(): ModelEventFullPayload<any, O>;
    protected _addEventListener(model: Selectable<I>): void;
    protected _isFiltered(payload: ModelEventFullPayload<any, I>): boolean;
    protected _notifyCallbacks(payload: ModelEventFullPayload<any, O>): void;
    protected _notifyApplySelectors(payload: ModelEventFullPayload<any, O>, cbs: SelectorApplyFunc<O>[]): void;
    protected _notifyMapSelectors(payload: ModelEventFullPayload<any, O>, cbs: SelectorMapFunc<X, K>[]): void;
    apply(cb: SelectorApplyFunc<O>, skipInitialNotify?: boolean): this;
    addEventListener(cb: SelectorApplyFunc<O>, skipInitialNotify?: boolean): this;
    map(cb: SelectorMapFunc<X, K>, skipInitialNotify?: boolean): this;
    mapSelect<OO>(cb: SelectorMapSelectFunc<X, K, OO>, filters?: SelectorFilters<O>): Selector<O, OO[], any, any>;
    select<OO>(processor: SelectorFunc<O, OO>, filters?: SelectorFilters<O>): Selector<O, OO, any, any>;
}
export declare const select: <I = any, O = any, X = any, K = any>(listenable: Selectable<I>, processor?: SelectorFunc<I, O>, filters?: SelectorFilters<I>) => Selector<I, O, X, K>;
export declare const rawSelect: <I = any, O = any, X = any, K = any>(rawData: I, processor?: SelectorFunc<I, O>, filters?: SelectorFilters<I>) => Selector<I, O, X, K>;
