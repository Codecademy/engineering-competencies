import { IEquatable } from "@toolkip/comparable";
import { ICloneable } from '@toolkip/object-helpers';
import { ModelEventPayload, IModelTransforms, ModelEventCallback, ModelEventType, IKeyedModelTransforms, ModelEvent, IModel, IBasicModel, ModelType } from "../_shared";
export declare abstract class _Model<T> implements IEquatable, ICloneable<_Model<T>>, IBasicModel<T> {
    constructor(data?: Partial<T>, transforms?: IModelTransforms<T>);
    protected abstract _getDefaultValues(): T;
    getType(): ModelType;
    static createModel: <T = any>(data: T | IModel<T>, transforms?: IKeyedModelTransforms<T>) => IModel<T>;
    protected _event: ModelEvent<T, any, any>;
    addEventListener<K, X>(cbFunc: ModelEventCallback<K, X>): void;
    protected static _event: ModelEvent<any, any, any>;
    static addEventListener(cbFunc: ModelEventCallback<any, any>): void;
    protected _dispatchEvent<K, X>(payload: ModelEventPayload<K, X>): void;
    protected _copyEvent<X>(modelToCopyFrom: _Model<X>, modelToCopyTo: _Model<X>): void;
    protected _notifyListeners<K, X>(payload: ModelEventPayload<K, X>): void;
    protected _calculateChangeType<X>(oldVal: X, newVal: X, eventChain?: ModelEventPayload<any, any>): ModelEventType;
    protected _transforms: IModelTransforms<T>;
    protected _getApplicableTransforms(): import("../_shared").IModelTransform<T>;
    private __history;
    protected _updateHistory(): void;
    undo(): void;
    redo(): void;
    protected _innerModel: T;
    getData(): T;
    protected _innerGetData(): T;
    setData(newData: T): void;
    protected _innerSetData<K>(payload: ModelEventPayload<K, T>): void;
    protected _sendUpdate<K, X>(payload: ModelEventPayload<K, X>): void;
    import(data: T): void;
    protected _innerImport(data: T): T;
    export(): T;
    protected _innerExport(): T;
    equals(otherModel: IEquatable): boolean;
    clone(tx?: IModelTransforms<T>): _Model<T>;
    protected _cloneData<X>(data: X): X;
    protected _wrapInModel<K, X>(dataToWrap: X | IModel<X>, key?: K): IModel<X>;
}
