!function(e){var t={};function __webpack_require__(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,__webpack_require__),r.l=!0,r.exports}__webpack_require__.m=e,__webpack_require__.c=t,__webpack_require__.d=function(e,t,n){__webpack_require__.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},__webpack_require__.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},__webpack_require__.t=function(e,t){if(1&t&&(e=__webpack_require__(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(__webpack_require__.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)__webpack_require__.d(n,r,function(t){return e[t]}.bind(null,r));return n},__webpack_require__.n=function(e){var t=e&&e.__esModule?function getDefault(){return e.default}:function getModuleExports(){return e};return __webpack_require__.d(t,"a",t),t},__webpack_require__.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},__webpack_require__.p="",__webpack_require__(__webpack_require__.s=55)}([function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(23)),__export(n(60)),__export(n(24)),__export(n(61)),__export(n(5)),__export(n(64))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}(n(87))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}(n(59))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(18),s=n(4),i=n(94),o=n(38),l=n(7),a=n(1);class _Model{constructor(e,t){this._innerModel=this._getDefaultValues(),this.__history=new i.HistoryChain,this._event=new o.ModelEvent("modelchange"),this._transforms=t||{},a.isNullOrUndefined(e)||this.import(e)}getType(){return"primitive"}addEventListener(e){this._event.addEventListener(e)}static addEventListener(e){this._event.addEventListener(e)}_dispatchEvent(e){this._event.dispatch(this,e),_Model._event.dispatch(this,e)}_copyEvent(e,t){t._event=e._event}_notifyListeners(e){const{oldValue:t,value:n,eventChain:s}=e;r.equals(t,n)||(e.eventType||(e.eventType=this._calculateChangeType(t,n,s)),this._dispatchEvent(e))}_calculateChangeType(e,t,n){return n?n.eventType:t&&!e?"add":e&&!t?"remove":"modify"}_getApplicableTransforms(){return this._transforms._}_updateHistory(){this.__history.push(this.getData())}undo(){this.__history.navigateBack(e=>{e&&this.import(e)})}redo(){this.__history.navigateForward(e=>{e&&this.import(e)})}getData(){return this._innerGetData()}_innerGetData(){return this._cloneData(this._innerModel)}setData(e){this._innerSetData({value:e})}_innerSetData(e){const t=this.getData(),{value:n}=e,r=this._cloneData(n);this._innerModel=r,this._sendUpdate(Object.assign(Object.assign({},e),{oldValue:t,value:this.getData()}))}_sendUpdate(e){this._updateHistory(),this._notifyListeners(e)}import(e){var t;const n=null===(t=this._getApplicableTransforms())||void 0===t?void 0:t.incoming;let r;r=n?n(e):this._innerImport(e),this.setData(r)}_innerImport(e){return e}export(){var e;const t=null===(e=this._getApplicableTransforms())||void 0===e?void 0:e.outgoing;return t?t(this.getData()):this._innerExport()}_innerExport(){return this.getData()}equals(e){return!!l.isModel(e)&&r.equals(e.getData(),this.getData())}clone(e){const t=e||this._transforms,n=new(0,this.constructor)(this.getData(),t);return n._event=this._event,n}_cloneData(e){return s.clone(e)}_wrapInModel(e,t){const n=_Model.createModel(e);return l.isModel(e)||this.addModelListener(n,t),n}addModelListener(e,t){let n=e.getData();e.addEventListener(e=>{if(a.isNullOrUndefined(t))return;const{target:r,eventType:s}=e,i=l.isModel(r)?r.getData():r;this._sendUpdate({eventType:s,key:t,oldValue:n,value:i,eventChain:e}),n=i})}}t._Model=_Model,_Model._event=new o.ModelEvent("modelchange")},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(40)),__export(n(89)),__export(n(41)),__export(n(90)),__export(n(8)),__export(n(93))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(2);function map(e,t,n){let s=[];if(!e)return s;if(r.isArray(e)){let r;e.map((e,i,o)=>{if(r)return;let l=t?t(e,i,o):e;s.push(l),n&&n()&&(r=!0)})}else{let r,i=0;for(r in e)if(e.hasOwnProperty(r)){let o=t?t(e[r],r,e):e[r];if(o&&s.push(o),i+=1,!n)continue;if(n())break}}return s}function getKeys(e){let t=Object.keys(e)||[];for(let n=t.length-1;n>=0;n-=1){let r=t[n];e.hasOwnProperty(r)||t.splice(n,1)}return t}t.map=map,t.filter=function filter(e,t){const n=[];return map(e,(e,r,s)=>{t(e,r,s)&&n.push(e)}),n},t.getNextKey=function getNextKey(e,t){let n,r=!t;for(n in e)if(e.hasOwnProperty(n)){if(r)return n;n===t&&(r=!0)}return""},t.getKeys=getKeys,t.keyCount=function keyCount(e){return getKeys(e).length},t.setDictValue=function setDictValue(e,t,n){e||(e={});let r=e;for(let e=0;e<n.length;e+=1){let s=n[e],i={};e===n.length-1&&(i=t),r[s]||(r[s]=i),r=r[s]}return e},t.getPrototype=function getPrototype(e){return e.prototype?e.prototype:e.__proto__?e.__proto__:null}},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(27)),__export(n(28)),__export(n(16)),__export(n(111)),__export(n(115))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3);t.isModel=e=>e instanceof r._Model},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(1);function map(e,t,n){let s=[];if(!e)return s;if(r.isArray(e)){let r;e.map((e,i,o)=>{if(r)return;let l=t?t(e,i,o):e;s.push(l),n&&n()&&(r=!0)})}else{let r,i=0;for(r in e)if(e.hasOwnProperty(r)){let o=t?t(e[r],r,e):e[r];if(o&&s.push(o),i+=1,!n)continue;if(n())break}}return s}function getKeys(e){let t=Object.keys(e)||[];for(let n=t.length-1;n>=0;n-=1){let r=t[n];e.hasOwnProperty(r)||t.splice(n,1)}return t}t.map=map,t.filter=function filter(e,t){const n=[];return map(e,(e,r,s)=>{t(e,r,s)&&n.push(e)}),n},t.getNextKey=function getNextKey(e,t){let n,r=!t;for(n in e)if(e.hasOwnProperty(n)){if(r)return n;n===t&&(r=!0)}return""},t.getKeys=getKeys,t.keyCount=function keyCount(e){return getKeys(e).length},t.setDictValue=function setDictValue(e,t,n){e||(e={});let r=e;for(let e=0;e<n.length;e+=1){let s=n[e],i={};e===n.length-1&&(i=t),r[s]||(r[s]=i),r=r[s]}return e},t.getPrototype=function getPrototype(e){return e.prototype?e.prototype:e.__proto__?e.__proto__:null}},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(67)),__export(n(29)),__export(n(30)),__export(n(68)),__export(n(31)),__export(n(69)),__export(n(17)),__export(n(32)),__export(n(70))},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(100)),__export(n(101)),__export(n(102))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(9),s=n(0),i=n(34),o=n(33),l=n(75);t._Library=class _Library{constructor(){this._rawStyles={},this._elems={},this._lastId=0}getNextId(){return this._lastId+=1,this._lastId.toString()}hasStyles(e){return!!this._rawStyles[e]}add(e,t,n){const r=this._getOrCreateExistingStyles(e),s=this._merge([r,t]);this._shouldAdd(r,s,n)&&(this._rawStyles[e]=s,this._updateElems(s,e))}_shouldAdd(e,t,n){return!!n||(!!s.isEmptyObject(e)||!l.equals(e,t))}remove(e){return!!this._rawStyles[e]&&(i.removeElement(this._elems[e]),delete this._rawStyles[e],delete this._elems[e],!0)}_merge(e){return e.length<1?null:r.combineStyles(...e)}_stringify(e){return r.stringifyStyles(e)}_updateElems(e,t){let n=this._stringify(e);for(let e=0;e<n.length;e+=1){this._getOrCreateElem(t).innerHTML=n[e]}}_getOrCreateElem(e){if(this._elems[e])return this._elems[e];let t=r.createStyleElement(`${e}-${this._idSuffix}`);return this._elems[e]=t,o.nextRender().then(()=>document.head.appendChild(t)),t}_getOrCreateExistingStyles(e){return this._rawStyles[e]||(this._rawStyles[e]={}),this._rawStyles[e]}getElemForKey(e){return this._elems[e]?this._elems[e]:null}get(e){return this._rawStyles[e]?this._rawStyles[e]:null}}},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(38)),__export(n(85)),__export(n(13)),__export(n(10)),__export(n(19)),__export(n(21)),__export(n(108)),__export(n(109));n(53).setupModelWrapping()},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(3)),__export(n(50)),__export(n(99))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hideOrUnhideLevel=t.updateState=t.STATE=void 0;const r=n(0),s=n(12);class _State extends s.MObject{}t.STATE=new _State({categories:[],levels:[],competencies:[],hiddenLevels:[],display:"list"},{categories:s.createModelTransform(s.MSet),levels:s.createModelTransform(s.MSet),competencies:s.createModelTransform(s.MManager),hiddenLevels:s.createModelTransform(s.MSet)}),t.updateState=e=>{const n=t.STATE.getData();n.display=e.display||n.display,r.map(e,(e,t)=>{for(let r of e){const e=n[t];-1===e.indexOf(r)&&e.push(r)}}),t.STATE.setData(n)},t.hideOrUnhideLevel=e=>{const n=t.STATE.get("hiddenLevels"),r=n.indexOf(e);-1===r?n.push(e):n.splice(r,1),t.STATE.set("hiddenLevels",n)},window.STATE=t.STATE},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(62)),__export(n(63)),__export(n(25)),__export(n(26))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(66),s=n(27);function createSVGElement(e,t){if(e)return e.type="svg",e.namespace=s.SVG_NAMESPACE,r._coreCreateElement(e,t)}t.createElement=function createElement(e,t){if(e)return r._coreCreateElement(e,t)},t.createElements=function createElements(e,t){if(e)return r._coreCreateElements(e,t)},t.createCustomElement=function createCustomElement(e,t,n){if(e)return r._coreCreateElement(e,t,n)},t.createSVGElement=createSVGElement,t.createSVGElements=function createSVGElements(e,t){if(!e)return;const n=[];for(let r of e)n.push(createSVGElement(r,t));return n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),s=n(31);const i=new class _StyleStringifier{stringify(e){return e?this._stringify(e):[]}_stringify(e){let t=[],n="";return r.map(e,(e,r)=>{let s=this.generateContentForStyle(r,e);s&&(n.length+s.length>=1e4?(t.push(n),n=s):n+=s)}),n&&t.push(n),t}generateContentForStyle(e,t){return t instanceof Array?this._generateContentForFontDefinition(e,t):this._generateContentForCssClass(e,t)}_generateContentForCssClass(e,t){let n=this._buildCssClassContentString(e,t);return n&&(n=this._formatClass(e,n),-1!==e.indexOf("{")&&(n+="\n}")),n}_generateContentForFontDefinition(e,t){let n=[];for(let e of t)n.push(this._formatFontface(e.url,e.format));let r={fontFamily:e,src:n.join(",")};return this._generateContentForCssClass("@font-face",r)}_buildCssClassContentString(e,t){let n=-1!==e.indexOf("@keyframes"),s=[];return r.map(t,(e,t)=>{n?s.push(this._buildAnimationValueString(t,e)):s.push(this._formatProperty(t,e))}),s.join("")}_buildAnimationValueString(e,t){let n="";return r.map(t,(e,t)=>{e&&(n+=this._formatProperty(t,e))}),n?this._formatClass(e,n):""}getPropertyName(e){let t=e;if(t.toLowerCase()===t)return t;let n=t.split(/([A-Z])/g);for(let e=0;e<n.length;e++)n[e]=this._getUpdatedSegment(n[e],0===e);return n.join("")}_getUpdatedSegment(e,t){return t&&this._isCssPrefix(e)&&(e="-"+e),e.toLowerCase()!==e&&(e="-"+e.toLowerCase()),e}_isCssPrefix(e){switch(e){case"webkit":case"moz":case"ms":case"o":return!0}return!1}_formatClass(e,t){return`${e} {\n${t}}\n`}_formatProperty(e,t){let n=s.findContainedPlaceholder(t);return n&&(t=t.replace(`<${n.name}:${n.defaultValue}>`,n.defaultValue)),`\t${this.getPropertyName(e)} : ${t};\n`}_formatFontface(e,t){return`url(${e}) format(${t})`}};function getCssPropertyName(e){return i.getPropertyName(e)}t.stringifyStyles=function stringifyStyles(e){return i.stringify(e)},t.stringifyStyle=function stringifyStyle(e,t){return i.generateContentForStyle(e,t)},t.getCssPropertyName=getCssPropertyName,getCssPropertyName("webkitAlignContent")},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(86)),__export(n(39)),__export(n(88))},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(47)),__export(n(49))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(42);t.ShortDateTransform={incoming:e=>new Date(e.toString()),outgoing:e=>r.shortDate(e)},t.ShortDateTimeTransform={incoming:e=>new Date(e.toString()),outgoing:e=>r.shortDateTime(e)},t.DefaultDateTransform={incoming:e=>new Date(e.toString()),outgoing:e=>e.toString()}},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(51)),__export(n(103)),__export(n(104))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(4);class DataManager{constructor(){this._data={},this._populateWithDefaultData()}_populateWithDefaultData(){}_createAndAddDefault(e){this.add(e)}add(e){return!this.contains(e.id)&&(this._data[e.id]=e,!0)}remove(e){if(!this.contains(e))return null;let t=this.get(e);return delete this._data[e],t}contains(e){return!!this._data[e]}clear(){this._data={}}get(e){return this.contains(e)?this._data[e]:null}map(e){r.map(this._data,e)}toArray(){let e=[];return this.map(t=>{e.push(t)}),e}toDictionary(){let e={};return this.map((t,n)=>{e[n]=t}),e}clone(){const e=new DataManager,t=this.toArray();for(let n of t)e.add(n);return e}}t.DataManager=DataManager},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(2),s=n(5);t.isCloneable=function isCloneable(e){return!!r.isFunction(e.clone)},t.isMappable=function isMappable(e){return!!r.isArray(e)||!!r.isObject(e)},t.isEmptyObject=function isEmptyObject(e){return!!r.isObject(e)&&!s.getNextKey(e)},t.isEmptyArray=function isEmptyArray(e){return!!r.isArray(e)&&!(e.length>0)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(5),s=n(2);function combineObjects(e,t,n){let i;return i=e||{},t&&function _loopThru(e,t,n){if(!e)return t;e.__proto__&&(t.__proto__=Object.create(e.__proto__));r.map(e,(e,r)=>{if(!s.isNullOrUndefined(e))if(n&&"object"==typeof e){let s=t[r];if(!s)return void(t[r]=e);s=combineObjects(s,e,n),t[r]=s}else t[r]=e})}(t,i,n),i}t.combineObjects=combineObjects,t.reconcileOptions=function reconcileOptions(e,t){let n,r;for(n in e||(e={}),t)t.hasOwnProperty(n)&&(r=e[n],null==r&&(e[n]=t[n]));return e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.padToDigits=function padToDigits(e,t){let n=e.toString().split("");for(;n.length<t;)n.splice(0,0,"0");return n.join("")},t.fullHexString=function fullHexString(e,t){let n,r;if(t=t||0,n=e.toString(16),n.length<t)for(r=0;r<t-n.length;r+=1)n="0"+n;return n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(2);function charAt(e,t){return e.substr(t,1)}function rest(e,t){return e.substring(t,e.length)}function isNumeric(e){return/^[0-9]+$/.test(e)}t.piece=function piece(e,t,n=1){let r;return r=e.split(t),r[n]||""},t.addPiece=function addPiece(e,t,n){return e.length>0&&(e+=n),e+t},t.titleCase=function titleCase(e,t=" "){let n,r,s;for(s="",n=e.split(t),r=0;r<n.length;r+=1)0!==r&&(s+=t),s+=charAt(n[r],0).toUpperCase(),s+=rest(n[r],1).toLowerCase();return s},t.sentenceCase=function sentenceCase(e){let t;return t=charAt(e,0).toUpperCase(),t+=rest(e,1).toLowerCase(),t},t.charAt=charAt,t.rest=rest,t.trim=function trim(e){let t;return t=e.replace(/^\s*/g,""),t=t.replace(/\s*?$/g,""),t},t.stripSpaces=function stripSpaces(e){let t;return t=e.replace(/\s/g,""),t=t.replace(/\&nbsp\;/g,""),t},t.format=function format(e,...t){let n=e.split("");t||(t=[]);let s="",i=!1;for(let e=0;e<n.length;e+=1){let o=n[e];"\\"!==o?"{"===o?(i=!0,n[e]=""):"}"===o&&i?(n[e]=r.isNullOrUndefined(t[+s])?"{"+s+"}":t[+s].toString(),i=!1,s=""):isNumeric(o)&&i?(s+=o,n[e]=""):i&&(i=!1,s=""):(n[e]="",e+=1)}return n.join("")},t.isNumeric=isNumeric,t.addLeadingZeroes=function addLeadingZeroes(e,t){let n,r;for(n="string"==typeof t?t:t.toString(),r=n.length;r<e;r+=1)n="0"+n;return n},t.stripHTML=function stripHTML(e){let t;return t=e.replace(/\<.*?\>/g,""),t},t.join=function join(e,...t){return t.join(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SVG_NAMESPACE="http://www.w3.org/2000/svg"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(2);t.isIElemDefinition=function isIElemDefinition(e){return!!r.isInterface(e,{attr:null,children:null,cls:"",content:"",id:"",parent:null,type:""})},t.isClassDefinition=function isClassDefinition(e){return!r.isString(e)&&!r.isArray(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0);const s=new class _StyleCombiner{combine(...e){return this._combineStyles(...e)}_combineStyles(...e){let t={};for(let n of e)n&&r.map(n,(e,n)=>{t[n]=e instanceof Array?this._combineFontStyle(t[n]||[],e):this._combineStandardStyle(t[n]||{},e)});return t}_combineStandardStyle(e,t){let n=this._combineStyle(e,t);if(n)return n}_combineFontStyle(e,t){return e.concat(t)}_combineStyle(e,t){let n=this._mergeClassDefinition(e,t);return r.isEmptyObject(n)?null:n}_mergeClassDefinition(...e){let t={};for(let n of e)r.map(n,(e,n)=>{t[n]=e});return t}};t.combineStyles=function combineStyles(...e){return s.combine(...e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(15),s=n(2),getClassableElement=e=>s.isDrawable(e)?e.base:e;function getClass(e){return getClassableElement(e).getAttribute("class")||""}function getClasses(e){const t=getClass(e);return t?t.split(" "):[]}function addClass(e,t){if(!e||!t)return;const n=getClassableElement(e),s=n.getAttribute("class");if(!s)return void n.setAttribute("class",r.trim(t));return-1===(" "+s+" ").indexOf(" "+t+" ")&&n.setAttribute("class",r.trim(s+" "+t)),e}function removeClass(e,t){if(!e||!t)return;let n;n=s.isDrawable(e)?e.base:e;let i=" "+n.getAttribute("class")+" ";const o=i.length;return i=i.replace(" "+t+" "," "),i.length!==o&&n.setAttribute("class",r.trim(i)),e}function addOrRemoveClass(e,t,n){return n?addClass(e,t):removeClass(e,t),e}function hasClass(e,t){let n,r;if(e)return n=s.isDrawable(e)?e.base:e,r=" "+n.getAttribute("class")+" ",-1!==r.indexOf(" "+t+" ")}t.getClass=getClass,t.getClasses=getClasses,t.addClass=addClass,t.addClasses=function addClasses(e,...t){if(!e||!t||0===t.length)return;const n=getClassableElement(e),s=getClasses(e);for(let e of t)e&&-1===r.indexOf(s,e)&&s.push(e);return n.setAttribute("class",s.join(" ")),e},t.removeClass=removeClass,t.addOrRemoveClass=addOrRemoveClass,t.hasClass=hasClass,t.clearClass=function clearClass(e){if(!e)return;let t;return t=s.isDrawable(e)?e.base:e,t.setAttribute("class",""),e},t.toggleClass=function toggleClass(e,t){return addOrRemoveClass(e,t,!hasClass(e,t))},t.setProperty=function setProperty(e,t,n,r){let s,i,o,l,a;for(o=0;o<document.styleSheets.length;o+=1)if(i=document.all?"rules":"cssRules",l=document.styleSheets[o][i],l)for(s=0;s<l.length;s+=1)if(a=l[s],a.selectorText===e&&(a.style[t]||r))return a.style[t]=n,!0;return!1},t.getProperty=function getProperty(e,t){let n,r,s,i,o;for(s=0;s<document.styleSheets.length;s+=1)if(r=document.all?"rules":"cssRules",i=document.styleSheets[s][r],i)for(n=0;n<i.length;n+=1)if(o=i[n],o.selectorText===e)return o.style[t];return""},t.getComputedStyle=function getComputedStyle(e,t){let n,r;return r=s.isDrawable(e)?e.base:e,window.getComputedStyle?(n=window.getComputedStyle(r),t?n.getPropertyValue(t):n):r.currentStyle?(n=r.currentStyle,t?n[t]:n):null}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0);t.StylePlaceholders=new class _StylePlaceholders{splitOutPlaceholders(e){let t={standard:{},withPlaceholders:{}};return r.map(e,(e,n)=>{r.map(e,(e,s)=>{this._containsPlaceholder(e)?r.setDictValue(t.withPlaceholders,e,[n,s]):r.setDictValue(t.standard,e,[n,s])})}),t}findContainedPlaceholder(e){let t=/<(.+?)>/.exec(e);if(!t||!t[1])return null;let n=t[1].split(":");return{name:n[0],defaultValue:n[1]}}_containsPlaceholder(e){return!!this.findContainedPlaceholder(e)}indexStyleDictByPlaceholder(e){let t={};return r.map(e,(e,n)=>{r.map(e,(e,s)=>{r.map(e,(e,i)=>{let o=this.findContainedPlaceholder(e);o&&r.setDictValue(t,!0,[o.name,n,s,i])})})}),t}mapIndexToStyle(e,t){let n={};return r.map(e,(e,s)=>{r.map(e,(e,i)=>{t[s]&&r.setDictValue(n,t[s][i],[s,i])})}),n}replacePlaceholders(e,t,n){let s=new RegExp("<"+t+".*?>","g"),i=r.cloneObject(e);return r.map(i,(e,t)=>{r.map(e,(e,r)=>{i[t][r]=e.replace(s,n)})}),i}},t.findContainedPlaceholder=function findContainedPlaceholder(e){return t.StylePlaceholders.findContainedPlaceholder(e)},t.splitStyles=function splitStyles(e){return t.StylePlaceholders.splitOutPlaceholders(e)},t.indexByPlaceholder=function indexByPlaceholder(e){return t.StylePlaceholders.indexStyleDictByPlaceholder(e)},t.replacePlaceholders=function replacePlaceholders(e,n,r){return t.StylePlaceholders.replacePlaceholders(e,n,r)},t.mapIndexToStyle=function mapIndexToStyle(e,n){return t.StylePlaceholders.mapIndexToStyle(e,n)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(17);const s=new class _StyleElementGenerator{createElement(e){return this._createElement(e)}_createElement(e){let t;return e&&(t=document.getElementById(e),t)||(t=document.createElement("style"),e&&t.setAttribute("id",e)),t}createElementForStyles(e,t,n){return e?this._createElementForStyles(e,t,n):[]}_createElementForStyles(e,t,n){let s=r.stringifyStyles(e),i=[];for(let e of s){let r=this._createElement(t);r.innerHTML=e,n&&document.head.appendChild(r),i.push(r)}return i}};t.createStyleElement=function createStyleElement(e){return s.createElement(e)},t.createElementForStyles=function createElementForStyles(e,t,n){return s.createElementForStyles(e,t,n)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}(n(71))},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(35)),__export(n(73)),__export(n(74))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(2);t.isHTMLElement=function isHTMLElement(e){return e instanceof HTMLElement},t.hasOffsets=function hasOffsets(e){return!r.isNullOrUndefined(e.offsetHeight)},t.isSelectable=function isSelectable(e){return!!e.select}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(2);t.isEquatable=function isEquatable(e){return!r.isNullOrUndefined(e)&&!!e.equals},t.isComparable=function isComparable(e){if(r.isNullOrUndefined(e))return!1;let t=e;return!!(t.lessThan&&t.greaterThan&&t.equals)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(11);class _StyleLibrary extends r._Library{get _idSuffix(){return"styles"}}t.StyleLibrary=new _StyleLibrary},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}(n(81))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(1);t.isEquatable=function isEquatable(e){return!r.isNullOrUndefined(e)&&!!e.equals},t.isComparable=function isComparable(e){if(r.isNullOrUndefined(e))return!1;let t=e;return!!(t.lessThan&&t.greaterThan&&t.equals)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(1),s=n(8);t.isCloneable=function isCloneable(e){return!!r.isFunction(e.clone)},t.isMappable=function isMappable(e){return!!r.isArray(e)||!!r.isObject(e)},t.isEmptyObject=function isEmptyObject(e){return!!r.isObject(e)&&!s.getNextKey(e)},t.isEmptyArray=function isEmptyArray(e){return!!r.isArray(e)&&!(e.length>0)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(8),s=n(1);function combineObjects(e,t,n){let i;return i=e||{},t&&function _loopThru(e,t,n){if(!e)return t;e.__proto__&&(t.__proto__=Object.create(e.__proto__));r.map(e,(e,r)=>{if(!s.isNullOrUndefined(e))if(n&&"object"==typeof e){let s=t[r];if(!s)return void(t[r]=e);s=combineObjects(s,e,n),t[r]=s}else t[r]=e})}(t,i,n),i}t.combineObjects=combineObjects,t.reconcileOptions=function reconcileOptions(e,t){let n,r;for(n in e||(e={}),t)t.hasOwnProperty(n)&&(r=e[n],null==r&&(e[n]=t[n]));return e}},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(91)),__export(n(92)),__export(n(43)),__export(n(44))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.padToDigits=function padToDigits(e,t){let n=e.toString().split("");for(;n.length<t;)n.splice(0,0,"0");return n.join("")},t.fullHexString=function fullHexString(e,t){let n,r;if(t=t||0,n=e.toString(16),n.length<t)for(r=0;r<t-n.length;r+=1)n="0"+n;return n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(1);function charAt(e,t){return e.substr(t,1)}function rest(e,t){return e.substring(t,e.length)}function isNumeric(e){return/^[0-9]+$/.test(e)}t.piece=function piece(e,t,n=1){let r;return r=e.split(t),r[n]||""},t.addPiece=function addPiece(e,t,n){return e.length>0&&(e+=n),e+t},t.titleCase=function titleCase(e,t=" "){let n,r,s;for(s="",n=e.split(t),r=0;r<n.length;r+=1)0!==r&&(s+=t),s+=charAt(n[r],0).toUpperCase(),s+=rest(n[r],1).toLowerCase();return s},t.sentenceCase=function sentenceCase(e){let t;return t=charAt(e,0).toUpperCase(),t+=rest(e,1).toLowerCase(),t},t.charAt=charAt,t.rest=rest,t.trim=function trim(e){let t;return t=e.replace(/^\s*/g,""),t=t.replace(/\s*?$/g,""),t},t.stripSpaces=function stripSpaces(e){let t;return t=e.replace(/\s/g,""),t=t.replace(/\&nbsp\;/g,""),t},t.format=function format(e,...t){let n=e.split("");t||(t=[]);let s="",i=!1;for(let e=0;e<n.length;e+=1){let o=n[e];"\\"!==o?"{"===o?(i=!0,n[e]=""):"}"===o&&i?(n[e]=r.isNullOrUndefined(t[+s])?"{"+s+"}":t[+s].toString(),i=!1,s=""):isNumeric(o)&&i?(s+=o,n[e]=""):i&&(i=!1,s=""):(n[e]="",e+=1)}return n.join("")},t.isNumeric=isNumeric,t.addLeadingZeroes=function addLeadingZeroes(e,t){let n,r;for(n="string"==typeof t?t:t.toString(),r=n.length;r<e;r+=1)n="0"+n;return n},t.stripHTML=function stripHTML(e){let t;return t=e.replace(/\<.*?\>/g,""),t},t.join=function join(e,...t){return t.join(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(46),s=n(4);t.HistoryChain=class HistoryChain{get currentState(){return this._curNode.data}push(e){if(this._preventAdditions)return;let t=new r.HistoryNode(e);if(!this._start)return this._start=t,this._end=t,void(this._curNode=t);this._curNode!==this._end&&this._clearToCurIdx(),this._end.next=t,t.previous=this._end,this._end=t,this._curNode=this._end}_clearToCurIdx(){this._end=this._curNode,this._curNode.next=null}navigateBack(e){if(!this._curNode.previous)return null;const t=this._curNode.previous.data;return this._curNode=this._curNode.previous,e&&this._handleNavigateCallback(t,e),t}navigateForward(e){if(!this._curNode.next)return null;const t=this._curNode.next.data;return this._curNode=this._curNode.next,e&&this._handleNavigateCallback(t,e),t}_handleNavigateCallback(e,t){this._preventAdditions=!0,t(e),this._preventAdditions=!1}updateCurrentState(e){if(!this._curNode)return!1;let t=this._curNode.data,n=s.combineObjects(t,e,!0);return this._curNode.data=n,!0}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.HistoryNode=class HistoryNode{constructor(e){this.data=e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(48),s=n(49);class MIdentifiable extends s.MObject{get id(){return this.get("id")}set id(e){this.set("id",e)}static get _uniqueKey(){return this.name}static _generateNewId(e){const t=e||this._uniqueKey;return r.generateUniqueId(t,e)}static _updateLastId(e,t){const n=t||this._uniqueKey;r.registerUniqueId(e,n)}constructor(e,t,n){if(super(e),null==e?void 0:e.id)this.constructor._updateLastId(e.id,n);else{const e=this.constructor._generateNewId(n);this.set("id",e)}}}t.MIdentifiable=MIdentifiable},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(97)),__export(n(98))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(13),s=n(4);class MObject extends r._KeyedModel{constructor(e,t){super(e,t)}_getDefaultValues(){return{}}_map(e,t){s.map(e,t)}_getValue(e,t){return e[t]}get(e){return super.get(e)}_setValue(e,t,n){e[t]=n}set(e,t){return super.set(e,t)}}t.MObject=MObject},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3),s=n(7),i=n(1);class _KeyedModel extends r._Model{constructor(e,t){super(e,t)}getType(){return"keyed"}addKeyedListener(e,t){this._event.addEventListener(n=>{n.key===e&&t(n)},this)}_getApplicableTransforms(e){return e?this._transforms[e]:super._getApplicableTransforms()}get(e){return this._innerGet(e)}_innerGet(e){const t=this._getValue(this._innerModel,e);return s.isModel(t)?t.getData():void 0}_innerGetData(){if(i.isNullOrUndefined(this._innerModel))return this._innerModel;const e=this._getDefaultValues();return this._map(this._innerModel,(t,n)=>{s.isModel(t)&&this._setValue(e,n,t.getData())}),e}getModel(e){const t=this._getValue(this._innerModel,e);if(!s.isModel(t))return null;switch(t.getType()){case"array":case"keyed":case"primitive":return t}}update(e,t){const n=Object.assign(Object.assign({},this.get(e)),t);this._innerSet({key:e,value:n})}set(e,t){this._innerSet({key:e,value:t})}_innerSet(e){const{value:t,key:n}=e,r=this.getModel(n);if(s.isModel(r))r.setData(t),this._setValue(this._innerModel,n,r);else{const r=e.oldValue||this.get(n),s=this._wrapInModel(t,n);this._setValue(this._innerModel,n,s),this._sendUpdate(Object.assign(Object.assign({},e),{oldValue:r,value:s.getData()}))}return this.getModel(n)}_innerSetData(e){const{value:t}=e;if(s.isModel(t))super._innerSetData(Object.assign(Object.assign({},e),{value:this._wrapInModel(t)}));else if(i.isNullOrUndefined(t))super._innerSetData(e);else{const n=this._getDefaultValues();this._map(t,(e,t)=>{let r=this._wrapInModel(e,t);this._setValue(n,t,r)}),super._innerSetData(Object.assign(Object.assign({},e),{value:n}))}}_innerImport(e){const t=this._getDefaultValues();return this._map(e,(e,n)=>{var r;let s=e;const i=null===(r=this._getApplicableTransforms(n))||void 0===r?void 0:r.incoming;i&&(s=i(e,n,this)),this._setValue(t,n,this._wrapInModel(s,n))}),t}_innerExport(){const e=this._getDefaultValues();return this._map(this._innerModel,(t,n)=>{var r;let i=s.isModel(t)?t.export():t;const o=null===(r=this._getApplicableTransforms(n))||void 0===r?void 0:r.outgoing;o&&(i=o(i,n,this)),this._setValue(e,n,i)}),e}}t._KeyedModel=_KeyedModel},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(13),s=n(4),i=n(1);class MArray extends r._KeyedModels{_getDefaultValues(){return[]}_map(e,t){s.map(e,t)}_getValue(e,t){return e[t]}_setValue(e,t,n){this._shouldSplice(e,t,n)?e.splice(t,1):e[t]=n}_shouldSplice(e,t,n){return!(t<0)&&(!(t>=e.length)&&(void 0===n||!!i.isUndefined(n.getData())))}add(e){return this._innerSet({key:this._innerModel.length,value:e}),!0}}t.MArray=MArray},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(4),s=n(18),i=n(10);class Selector{constructor(e,t,n){this._applyFuncs=[],this._mapFuncs=[],this._processor=t||(e=>e),this._lastModel=this._processor(e.getData(),{}),this._setupFilters(n||{}),this._addEventListener(e)}getData(){return this._lastModel}_setupFilters({keys:e=[],eventTypes:t=[]}){this._filterMap={keys:r.arrayToMap(e),eventTypes:r.arrayToMap(t),customFilters:[]}}filter(e){return this._filterMap.customFilters.push(e),this}reselect(e){const t=this._createReselectEvent();if(e){const{apply:n,map:r}=e;n&&this._notifyApplySelectors(t,n),r&&this._notifyMapSelectors(t,r)}else this._notifyCallbacks(t)}_createReselectEvent(){return{name:"modelchange",target:this,oldValue:this._lastModel,value:this._lastModel,eventType:"none"}}_addEventListener(e){e.addEventListener(e=>{if(this._isFiltered(e))return;const t=this._processor(e.target.getData(),e);if(s.equals(t,this._lastModel))return;const n=this._lastModel;this._lastModel=t,this._notifyCallbacks(Object.assign(Object.assign({},e),{target:this,oldValue:n,value:t,eventChain:e}))})}_isFiltered(e){const{key:t,eventType:n}=e,{keys:r,eventTypes:s,customFilters:i}=this._filterMap;if(r.size>0&&!r.has(t))return!0;if(s.size>0&&!s.has(n))return!0;for(let t of i)if(t(e))return!0;return!1}_notifyCallbacks(e){this._notifyApplySelectors(e,this._applyFuncs),this._notifyMapSelectors(e,this._mapFuncs)}_notifyApplySelectors(e,t){for(let n of t)n(e)}_notifyMapSelectors(e,t){const{value:n}=e;if(r.isMappable(n))for(let s of t)r.map(n,(t,n)=>{s(t,n,e)})}apply(e,t){return this._applyFuncs.push(e),t||this.reselect({apply:[e]}),this}addEventListener(e,t){return this.apply(e,t)}map(e,t){return this._mapFuncs.push(e),t||this.reselect({map:[e]}),this}mapSelect(e,t){return new Selector(this,(t,n)=>{const s=[];return r.isMappable(t)&&r.map(t,(t,r)=>{s.push(e(t,r,n))}),s},t)}select(e,t){return new Selector(this,e,t)}}t.Selector=Selector,t.select=(e,t,n)=>new Selector(e,t,n),t.rawSelect=(e,t,n)=>{const r=new i.Model(e);return new Selector(r,t,n)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3),s=n(7),i=n(1),o=n(48),l=n(10),a=n(19),u=n(21);t.createModel=(e,t)=>s.isModel(e)?e.clone(t):_createModelForData(e,t);const _createModelForData=(e,t)=>i.isPrimitive(e)?new l.MPrimitive(e,t):i.isDate(e)?new l.MDate(e,t):o.isIdentifiable(e)?new a.MIdentifiable(e,t):i.isArray(e)?_createArrayModelForData(e,t):i.isObject(e)?new a.MObject(e,t):void 0,_createArrayModelForData=(e,t)=>e[0]&&o.isIdentifiable(e[0])?new u.MManager(e,t):new u.MArray(e,t);t.setupModelWrapping=()=>{r._Model.createModel=t.createModel},t.setupModelWrapping()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.selectCompetency=t.selectCategories=t.selectUnhiddenLevels=t.selectLevels=t.selectCompetencies=void 0;const r=n(12),s=n(14),i=n(0);t.selectCompetencies=()=>r.select(s.STATE,e=>e.competencies),t.selectLevels=()=>r.select(s.STATE,e=>e.levels),t.selectUnhiddenLevels=()=>r.select(s.STATE,e=>i.filter(e.levels,t=>-1===e.hiddenLevels.indexOf(t))),t.selectCategories=()=>r.select(s.STATE,e=>e.categories),t.selectCompetency=e=>t.selectCompetencies().select(t=>{for(let n of t)if(n.id===e)return n;return null})},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(s,i){function fulfilled(e){try{step(r.next(e))}catch(e){i(e)}}function rejected(e){try{step(r.throw(e))}catch(e){i(e)}}function step(e){e.done?s(e.value):function adopt(e){return e instanceof n?e:new n((function(t){t(e)}))}(e.value).then(fulfilled,rejected)}step((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const s=n(56),i=n(116),o=n(14),l=n(118);window.addEventListener("load",()=>r(void 0,void 0,void 0,(function*(){l.renderLayout();const e=yield s.loadEngCompetencies(),t=i.parseFile(e);o.updateState(t)})))},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(s,i){function fulfilled(e){try{step(r.next(e))}catch(e){i(e)}}function rejected(e){try{step(r.throw(e))}catch(e){i(e)}}function step(e){e.done?s(e.value):function adopt(e){return e instanceof n?e:new n((function(t){t(e)}))}(e.value).then(fulfilled,rejected)}step((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.loadManagerCompetencies=t.loadEngCompetencies=void 0;const s=n(57);t.loadEngCompetencies=()=>r(void 0,void 0,void 0,(function*(){return yield s.loadFile({filename:"./README.md"})})),t.loadManagerCompetencies=()=>r(void 0,void 0,void 0,(function*(){return yield s.loadFile({filename:"../managers.md"})}))},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(58)),__export(n(65))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0);t.ajax=function ajax(e){return new Promise((t,n)=>{!function _innerAjax(e,t,n){let s=function _getXmlRequestObject(){let e=null;try{e=new XMLHttpRequest}catch(t){try{e=new ActiveXObject("Msxml2.XMLHTTP")}catch(t){try{e=new ActiveXObject("Microsoft.XMLHTTP")}catch(e){return null}}}return e}();return s?(function _assignXmlRequestCallbacks(e,t,n){return e.onreadystatechange=()=>{4===e.readyState&&(!function _isValidResponse(e){if(e<200)return!1;if(e>=300)return!1;return!0}(e.status)?n(e.responseText):t(e.responseText))},e}(s,(...e)=>t(...e),(...e)=>n(...e)),function _sendXmlRequest(e,{type:t,requestUrl:n,params:s,headerParams:i}){e.open(t,n,!0),function _addHeaderData(e,t){if(!t)return;r.map(t,(t,n)=>{e.setRequestHeader(n,t)})}(e,i);let o=null;"POST"===t&&(o=function _setRequestHeader(e,t){let n,r;t instanceof FormData?(n="multipart/form-data",r=t):(n="application/json",r=JSON.stringify(t));n&&e.setRequestHeader("Content-Type",n);return r}(e,s));return e.send(o),e}(s,e),s):null}(e,t,n)})}},function(e,t,n){"use strict";function isString(e){return"string"==typeof e}Object.defineProperty(t,"__esModule",{value:!0}),t.isUndefined=function isUndefined(e){return void 0===e},t.isNullOrUndefined=function isNullOrUndefined(e){return void 0===e||null===e},t.isFalsy=function isFalsy(e,t=[]){if(e)return!1;for(let n of t)if(n===e)return!1;return!0},t.isTruthy=function isTruthy(e,t=[]){return!this.isFalsy(e,t)},t.isInterface=function isInterface(e,t){let n,r,s=!0;for(n in t)if(t.hasOwnProperty(n)&&(r=t[n],r&&void 0===e[n])){s=!1;break}if(!s)return!1;let i=!1;for(n in e)if(e.hasOwnProperty(n)&&void 0===t[n]){i=!0;break}return!i},t.isString=isString,t.isKeyof=function isKeyof(e,t){return t?t.hasOwnProperty(e):isString(e)},t.isNumber=function isNumber(e){return"number"==typeof e},t.isBoolean=function isBoolean(e){return"boolean"==typeof e},t.isPrimitive=function isPrimitive(e){if(null===e)return!0;switch(typeof e){case"boolean":case"number":case"string":case"undefined":return!0;default:return!1}},t.isFunction=function isFunction(e){return"function"==typeof e},t.isArray=function isArray(e){return e instanceof Array},t.isObject=function isObject(e){return typeof e==typeof{}},t.isDate=function isDate(e){return e instanceof Date&&"[object Date]"===Object.prototype.toString.call(e)},t.isPromise=function isPromise(e){return e instanceof Promise},t.isPromiseLike=function isPromiseLike(e){return!!e.then&&"function"==typeof e.then},t.isStandardElement=function isStandardElement(e){return e instanceof HTMLElement||e instanceof SVGElement},t.isDrawable=function isDrawable(e){return!!e.draw},t.isDrawableElement=function isDrawableElement(e){return!!e.appendChild},t.isUpdatable=function isUpdatable(e){if(e)return!!e.update}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(24),s=n(5),i=n(2),o=n(23);function clonePoint(e){return{x:e.x,y:e.y}}function clone(e,t=[],n){for(let r of t)if(r.typeGuard(e,n))return r.cloner(e,n);return i.isPrimitive(e)?_clonePrimitive(e):o.isCloneable(e)?e.clone():i.isDate(e)?_cloneDate(e):i.isArray(e)?_cloneArray(e,t):i.isObject(e)?_cloneObject(e,t):void 0}t.cloneRect=function cloneRect(e){return{x:e.x,y:e.y,w:e.w,h:e.h}},t.clonePoint=clonePoint,t.clonePointArray=function clonePointArray(e){let t,n=[];for(t of e){let e=clonePoint(t);n.push(e)}return n},t.cloneObject=function cloneObject(e){return JSON.parse(JSON.stringify(e))},t.clone=clone;const _clonePrimitive=e=>e,_cloneDate=e=>new Date(e.valueOf()),_cloneObject=(e,t)=>{const n=Object.getPrototypeOf(e),r=Object.create(n);return s.map(e,(e,n)=>{r[n]=clone(e,t,n)}),r},_cloneArray=(e,t)=>{const n=[];for(let r of e)n.push(clone(r,t));return n};t.shallowCloneObject=function shallowCloneObject(e){return r.combineObjects({},e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(15),s=n(5);t.stringify=function stringify(e,t,n){let i=[],o=t?"<br>":"\n",l=t?"&nbsp;&nbsp;&nbsp;&nbsp;":"\t";return n||(n=""),s.map(e,(e,s)=>{let a;switch(typeof e){case"string":a=e;break;case"number":case"boolean":a=e.toString();break;default:if(!e){a=e;break}a=e.hasOwnProperty("toString")?o+e.toString():o+stringify(e,t,l)}i.push(function _format(e,t,n){if(n)return function _formatPropertyAsHTML(e,t){return r.format("<b>{0}</b>: {1}{2}",e,t,"<br>")}(e,t);return function _formatPropertyAsPlainText(e,t){return r.format("{0}: {1}\n",e,t)}(e,t)}(n+s,a,t))}),i.join("")}},function(e,t,n){"use strict";function indexOf(e,t,n){if(!e)return-1;for(let r=0;r<e.length;r+=1)if(n){if(n(e[r],t))return r}else if(e[r]===t)return r;return-1}Object.defineProperty(t,"__esModule",{value:!0}),t.contains=function contains(e,t,n){return-1!==indexOf(e,t,n)},t.indexOf=indexOf,t.removeElemFromArr=function removeElemFromArr(e,t,n){let r,s;for(n||(n=function(e,t){return e===t}),r=e.length-1;r>=0;r-=1)n(e[r],t)&&(s=e.splice(r,1));return s}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(25),s=n(26);function dateDiff(e,t,n,r,s){let i,o;return i=864e5,r||(e=clearTimeInfo(e,!0),t=clearTimeInfo(t,!0)),o=e>t||n?e-t:t-e,s||(o/=864e5),o}function getToday(e){let t;return t=new Date,e||(t=clearTimeInfo(t)),t}function clearTimeInfo(e,t){let n,r=shortDate(e);return n=t?new Date(r+" 00:00Z"):new Date(r),n}function shortDate(e){if(!e)return"";let t;return t=getShortYear(e),e.getMonth()+1+"/"+e.getDate()+"/"+t}function shortTime(e,t){let n,r,s,i;return n=+e.getMinutes(),s=+e.getHours(),i="",r=n<10?"0"+n:n.toString(),t&&(i=" AM",s>=12&&(i=" PM"),s>12&&(s-=12),0===s&&(s=12)),s+":"+r+i}function isLeapYear(e){if(!e)return!1;let t=e.getFullYear();return t%4==0&&(t%100!=0||t%400==0)}function getShortYear(e){return+e.getFullYear()%100}function isSameDate(e,t){return shortDate(e)===shortDate(t)}function _updateDateDifferences(e,t,n,r){t[n]||(t[n]=0),t[r]||(t[r]=0);let s=t[n],i=s%e,o=Math.floor(s/e);return t[n]=i,t[r]+=o,t}function _createPluralString(e,t,n){return 1===e?e+" "+t:(n||(n=t+"s"),e+" "+n)}t.dateDiff=dateDiff,function(e){e[e.EXCLUSIVE=-1]="EXCLUSIVE",e[e.DEFAULT=0]="DEFAULT",e[e.INCLUSIVE=1]="INCLUSIVE"}(t.InclusivityEnum||(t.InclusivityEnum={})),t.monthDiff=function monthDiff(e,t,n,r){let s,i;e>t||n?(s=e.getMonth()-t.getMonth(),i=e.getFullYear()-t.getFullYear()):(s=t.getMonth()-e.getMonth(),i=t.getFullYear()-e.getFullYear());let o=12*i+s;return o+=+r,o},t.getToday=getToday,t.clearTimeInfo=clearTimeInfo,t.businessDateDiff=function businessDateDiff(e,t,n,r,s){let i,o,l,a;i=dateDiff(e,t,n,r,s),o=(t>e?e.getDay():t.getDay())+1,o%=7,o<0&&(o=6);let u=0;for(a=0;a<Math.abs(i);a+=1)0!==o&&6!==o||(u+=1),o+=1,o%=7,o<0&&(o=6);return l=i<0?-1:1,i-u*l},t.shortDate=shortDate,t.inputDateFmt=function inputDateFmt(e){let t,n,r;return r=e.getFullYear(),t=e.getMonth()+1,t<10&&(t="0"+t),n=+e.getDate(),n<10&&(n="0"+n),e.getFullYear()+"-"+t+"-"+n},t.inputToDate=function inputToDate(e,t){let n;if(e){let t=e.split("-");n=new Date(+t[0],+t[1]-1,+t[2])}else{if(!t)return n=null,n;n=getToday()}if(t){let e=t.split(":");n.setHours(+e[0]),n.setMinutes(+e[1])}return n},t.shortTime=shortTime,t.inputTimeFmt=function inputTimeFmt(e,t){let n=[],s=e.getHours();n.push(r.padToDigits(s,2));let i=e.getMinutes();if(n.push(r.padToDigits(i,2)),t){let t=e.getSeconds();n.push(r.padToDigits(t,2))}return n.join(":")},t.shortDateTime=function shortDateTime(e,t){return shortDate(e)+" "+shortTime(e,t)},t.stopwatchDisplay=function stopwatchDisplay(e,t,n){let r,i,o;return t?(r=(void 0).toString(),i=(void 0).toString(),o=(void 0).toString()):(r=s.addLeadingZeroes(2,void 0),i=s.addLeadingZeroes(2,void 0),o=s.addLeadingZeroes(2,void 0)),void 0+"D  "+o+":"+i+":"+r+" '"+e},t.updatedStopwatchDisplay=function updatedStopwatchDisplay(e,t){let n=function _retrieveCountsFromMilli(e){let t={},n=e;return t.days=Math.floor(n/864e5),n-=24*t.days*60*60*1e3,t.hours=Math.floor(n/36e5),n-=60*t.hours*60*1e3,t.minutes=Math.floor(n/6e4),n-=60*t.minutes*1e3,t.seconds=Math.floor(n/1e3),n-=1e3*t.seconds,t.milliseconds=n,t}(e),r=[];return n.days&&r.push(n.days+" days"),n.hours&&r.push(n.hours+" hours"),n.minutes&&r.push(n.minutes+" minutes"),n.seconds&&r.push(n.seconds+" seconds"),n.milliseconds&&t.showMilli&&r.push(n.milliseconds+" ms"),r.join(" ")},t.addToDate=function addToDate(e,t){return t.milliseconds&&e.setMilliseconds(e.getMilliseconds()+t.milliseconds),t.seconds&&e.setSeconds(e.getSeconds()+t.seconds),t.minutes&&e.setMinutes(e.getMinutes()+t.minutes),t.hours&&e.setHours(e.getHours()+t.hours),t.days&&e.setDate(e.getDate()+t.days),t.months&&e.setMonth(e.getMonth()+t.months),t.years&&e.setFullYear(e.getFullYear()+t.years),e},t.getMonthName=function getMonthName(e,t){switch(e.getMonth()){case 0:return t?"Jan":"January";case 1:return t?"Feb":"February";case 2:return t?"Mar":"March";case 3:return t?"Apr":"April";case 4:return"May";case 5:return t?"Jun":"June";case 6:return t?"Jul":"July";case 7:return t?"Aug":"August";case 8:return t?"Sept":"September";case 9:return t?"Oct":"October";case 10:return t?"Nov":"November";case 11:return t?"Dec":"December"}return""},t.getDayOfWeek=function getDayOfWeek(e,t){switch(e.getDay()){case 0:return t?"Sun":"Sunday";case 1:return t?"Mon":"Monday";case 2:return t?"Tues":"Tuesday";case 3:return t?"Wed":"Wednesday";case 4:return t?"Thurs":"Thursday";case 5:return t?"Fri":"Friday";case 6:return t?"Sat":"Saturday"}return""},t.getLengthOfMonthInDays=function getLengthOfMonthInDays(e){if(!e)return-1;switch(e.getMonth()){case 0:case 2:case 4:case 6:case 7:case 9:case 11:return 31;case 1:return isLeapYear(e)?29:28;default:return 30}},t.isLeapYear=isLeapYear,t.getShortYear=getShortYear,t.isWeekend=function isWeekend(e){let t=e.getDay();return 0===t||6===t},t.isToday=function isToday(e){return isSameDate(getToday(),clearTimeInfo(e))},t.isSameDate=isSameDate,t.getDisplayDuration=function getDisplayDuration(e){_updateDateDifferences(1e3,e,"milliseconds","seconds"),_updateDateDifferences(60,e,"seconds","minutes"),_updateDateDifferences(60,e,"minutes","hours"),_updateDateDifferences(24,e,"hours","days"),_updateDateDifferences(30,e,"days","months"),_updateDateDifferences(12,e,"months","years");let t=[];return e.years&&t.push(_createPluralString(e.years,"year")),e.months&&t.push(_createPluralString(e.months,"month")),e.days&&t.push(_createPluralString(e.days,"day")),e.hours&&t.push(_createPluralString(e.hours,"hour")),e.minutes&&t.push(_createPluralString(e.minutes,"minute")),e.seconds&&t.push(_createPluralString(e.seconds,"second")),e.milliseconds&&t.push(_createPluralString(e.milliseconds,"millisecond")),t.join(" ")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(5);t.dictionaryToArray=(e={})=>{const t=[];return r.map(e,e=>{t.push(e)}),t},t.arrayToMap=(e=[])=>{const t=new Map;for(let n of e)t.set(n,!0);return t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(6);t.loadFile=function loadFile(e){return new Promise((t,n)=>{this._innerLoadFile(e,t,n)})},t._innerLoadFile=function _innerLoadFile(e,t,n){let r=new XMLHttpRequest;r.open("GET",e.filename),r.onreadystatechange=()=>{4==r.readyState&&200==r.status?t(r.responseText):404===r.status&&n(r.responseText)},r.send()},t.saveFile=function saveFile(e){return new Promise(t=>{!function _innerSaveFile({filename:e,content:t},n){let s;s="string"==typeof t?new Blob([t],{type:"text/plain"}):t;!function _generateDownload(e,t){if(window.navigator.msSaveOrOpenBlob)window.navigator.msSaveBlob(t,"u");else{let n=r.createElement({type:"a",attr:{href:window.URL.createObjectURL(t),download:e}});document.body.appendChild(n),n.click(),document.body.removeChild(n)}}(e,s)}(e)})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(2),s=n(9),i=n(72),o=n(0),l=n(28),a=n(12);function _setElemClassName(e,t){s.clearClass(e),r.isString(t)?s.addClass(e,t):r.isArray(t)&&s.addClass(e,t.join(" "))}function _setElemStyles(e,t){const n=t.styles;if(!n)return;let s;s=r.isArray(n)?[...n]:[n];for(let t of s)_handleSelector(t,t=>_innerSetElemStyles(e,t))}function _innerSetElemStyles(e,t){const n=s.flattenStyles(t);o.map(n,(e,t)=>{i.createCssClass(t,e,"create_elements")})}function _setElemAttribute(e,t,n){switch(t){case"value":e.value=n;break;default:e.setAttribute(t,n)}}function _isFocusable(e){return r.isNullOrUndefined(e.focusable)?!!e.eventListeners&&!!e.eventListeners.click:e.focusable}function _innerAddElemChildren(e,t,n,r,s){for(let i of t)i?_handleSelector(i,t=>{_innerAddElemChild(e,t,n,r,s)}):console.warn("cannot append non-existent child element")}function _innerAddElemChild(e,t,n,s,i){if(r.isArray(t))_innerAddElemChildren(e,t,n,s,i);else if(r.isDrawable(t))t.draw(e);else if(t.setAttribute)e.appendChild(t);else{let r=t;n&&(r.namespace=n);let o=i(r,s);e.appendChild(o)}}t._coreCreateElements=function _coreCreateElements(e,t,n){if(r.isArray(e)){const r=[];for(let s of e)r.push(this._coreCreateElement(s,t,n));return r}return[this._coreCreateElement(e,t,n)]},t._coreCreateElement=function _coreCreateElement(e,t,n){let s,i;return e.drawable?(i=function _createDrawable(e){let t;try{t=e()}catch(n){t=new e}return t}(e.drawable),s=i.base):s=function _createStandardElement(e){let t,n=e.type||"div";t=e.namespace?document.createElementNS(e.namespace,n):document.createElement(n);return t}(e),n||(n=_coreCreateElement),function _setElemIdentfiers(e,t,n,r){t.id&&_handleSelector(t.id,t=>e.setAttribute("id",t));t.key&&n&&(n[t.key]=r||e)}(s,e,t,i),function _setElemClass(e,t){const n=t.cls;if(!n)return;_handleSelector(n,t=>function _innerSetElemClass(e,t,n){l.isClassDefinition(t)?(_setElemStyles(e,{styles:t.styles}),_setElemClassName(e,t.name)):_setElemClassName(e,t)}(e,t))}(s,e),_setElemStyles(s,e),function _setElemAttributes(e,t){t.attr||(t.attr={});_isFocusable(t)&&(t.focusable=!0);(function _needsTabIndex(e){if(!_isFocusable(e))return!1;if(e.attr.tabIndex)return!1;return!0})(t)&&(t.attr.tabindex=0);o.map(t.attr,(t,n)=>{_handleSelector(t,t=>function _innerSetAttribute(e,t,n){if(r.isNullOrUndefined(t))return;if(t.key){let n=t;_setElemAttribute(e,n.key,n.val)}else _setElemAttribute(e,n,t)}(e,t,n))})}(s,e),function _setElemStyle(e,t){if(!t.style)return;_handleSelector(t.style,t=>{o.map(t,(t,n)=>{e.style[n]=t})})}(s,e),function _setEventListeners(e,t){if(!t.eventListeners)return;if(t.focusable&&t.eventListeners.click&&!t.eventListeners.keypress){let n=t.eventListeners.click;t.eventListeners.keypress=e=>{13!==e.keyCode&&32!==e.keyCode||(n(e),e.preventDefault())};let r=!1;t.eventListeners.mousedown=t=>{r=!0,e.blur()},t.eventListeners.mouseup=e=>{r=!1},t.eventListeners.focus=t=>{if(r)return t.preventDefault(),e.blur(),!1}}o.map(t.eventListeners,(t,n)=>{e.addEventListener(n,t)})}(s,e),e.children?function _addElemChildren(e,t,n,r){if(!t.children)return;_handleSelector(t.children,s=>{e.innerHTML="",_innerAddElemChildren(e,s,t.namespace,n,r)})}(s,e,t,n):function _setElemBaseContent(e,t){t.content?_handleSelector(t.content,t=>e.innerHTML=t):t.innerHTML?_handleSelector(t.innerHTML,t=>e.innerHTML=t):t.innerText&&_handleSelector(t.innerText,t=>e.innerText=t)}(s,e),_setElemSelector(e,s),function _appendElemToParent(e,t){if(!e.parent)return;r.isDrawable(t)?t.draw(e.parent):e.parent.appendChild(t)}(e,s),s};const _setElemSelector=(e,t)=>{if(!e.selector)return;const{selector:n,applyCb:r}=e.selector;n.apply(e=>{r(e,t)});const s=n.getData();r({value:s,eventType:"none"},t)},_handleSelector=(e,t)=>{a.isSelector(e)?e.apply(e=>{const{value:n}=e;t(n,e)}):t(e,{})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.THEME_BG_COLOR_CLS="themeBGColor",t.THEME_COLOR_CLS="themeColor",t.THEME_COLOR_HOVER_CLS="themeBGHoverColor"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),s=n(29);const i=new class _StyleFlattener{flatten(e){return this._flattenStyles(e,"")}_flattenStyles(e,t){let n={};return r.map(e,(e,r)=>{let i=this._buildNewSelectors(r,t);for(let t of i){let r=this._flattenClassDefinition(t,e);n=s.combineStyles(n,r)}}),n}_flattenClassDefinition(e,t){let n={[e]:{}};return r.map(t,(t,r)=>{if("nested"===r){let r=this._flattenStyles(t,e);n=s.combineStyles(n,r)}else n[e][r]=t}),n}_buildNewSelectors(e,t){let n=e.split(",");if(!t)return n;for(let e=0;e<n.length;e+=1)n[e]=this._buildNewSelector(n[e],t);return n}_buildNewSelector(e,t){let n="";return n=-1!==e.indexOf("&")?e.replace(/&/g,t):t+" "+e,n}};t.flattenStyles=function flattenStyles(e){return i.flatten(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=new class _StyleRuleHelper{getCssRule(e,t){return this._getCssRule(e,t)}_getCssRule(e,t){let n;return t||(n=this._getExistingSelector(e)),n||(n={style:{}}),n}_getExistingSelector(e){for(let t of document.styleSheets){let n=this._getRules(t);if(n)continue;let r=this._searchRulesForSelector(e,n);if(r)return r}return null}_getRules(e){let t,n=document.all?"rules":"cssRules";try{t=e[n]}catch(e){return null}return t}_searchRulesForSelector(e,t){for(let n of t)if(n.selectorText===e)return n;return null}};t.getCssRule=function getCssRule(e,t){return r.getCssRule(e,t)}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(s,i){function fulfilled(e){try{step(r.next(e))}catch(e){i(e)}}function rejected(e){try{step(r.throw(e))}catch(e){i(e)}}function step(e){e.done?s(e.value):function adopt(e){return e instanceof n?e:new n((function(t){t(e)}))}(e.value).then(fulfilled,rejected)}step((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const s=n(0),i=n(33),o=n(30),l=n(32),a=n(17);const u=new class _TransitionController{constructor(){this._lastClsId=0,this._generatedClasses={}}transition(e){return r(this,void 0,void 0,(function*(){if(!e.elem)return Promise.reject("no element");if(!e.time)return Promise.reject("no time");let t=this._getClass(e.start,e.elem);e.end.transition||(e.end.transition="all ease-in-out "+e.time/1e3+"s");let n=this._getClass(e.end,e.elem);yield this._animate(e,t,n)}))}_getClass(e,t){e=this._replacePlaceholders(e,t);let n=JSON.stringify(e).replace(/ /g,"");if(this._generatedClasses[n])return this._generatedClasses[n];let r=this._generateRandomClassName();return this._generatedClasses[n]=r,this._createTransitionClass(r,e,t),r}_generateRandomClassName(){return this._lastClsId+=1,"gencls"+this._lastClsId}_createTransitionClass(e,t,n){this._styleElem||this._createStyleElem(),this._styleElem.innerHTML+=a.stringifyStyle("."+e,t)}_replacePlaceholders(e,t){return s.map(e,(n,r)=>{n=(n=(n=(n=(n=(n=n.replace("<width>",t.offsetWidth+1+"px")).replace("<height>",t.offsetHeight+"px")).replace("<left>",t.offsetLeft+"px")).replace("<top>",t.offsetTop+"px")).replace("<right>",t.offsetLeft+t.offsetWidth+"px")).replace("<bottom>",t.offsetTop+t.offsetHeight+"px"),e[r]=n}),e}_createStyleElem(){this._styleElem=l.createStyleElement(),document.head.appendChild(this._styleElem)}_animate(e,t,n){return r(this,void 0,void 0,(function*(){yield i.nextRender(),o.addClass(e.elem,t),yield i.wait(e.delay||0),o.addClass(e.elem,n),yield i.wait(e.time),o.removeClass(e.elem,t),yield i.nextRender(),this._removeEndClass(e.elem,n)}))}_removeEndClass(e,t){return r(this,void 0,void 0,(function*(){yield i.wait(10),o.removeClass(e,t)}))}};t.transition=function transition(e,t,n,r,s){return u.transition({elem:e,start:t,end:n,time:r,delay:s||0})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.wait=function wait(e){return new Promise(t=>{window.setTimeout(t,e)})},t.nextRender=function nextRender(){return new Promise(e=>{requestAnimationFrame(()=>{e()})})}},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(11)),__export(n(37)),__export(n(78)),__export(n(79)),__export(n(80))},function(e,t,n){"use strict";function globalOffsetLeft(e,t,n){return _auxGlobalOffset(e,"offsetLeft",t,n)}function globalOffsetTop(e,t,n){return _auxGlobalOffset(e,"offsetTop",t,n)}function globalOffsets(e,t,n){return{left:globalOffsetLeft(e,t,n),top:globalOffsetTop(e,t,n)}}function _auxGlobalOffset(e,t,n,r){let s=0;for(;e&&e!==n;)e[t]&&(s+=e[t]),e=r?e.parentNode:e.offsetParent;return s}Object.defineProperty(t,"__esModule",{value:!0}),t.globalOffsetLeft=globalOffsetLeft,t.globalOffsetTop=globalOffsetTop,t.globalOffsets=globalOffsets,t.getScrollPosition=function getScrollPosition(){return{x:window.pageXOffset?window.pageXOffset:document.body.scrollLeft,y:window.pageYOffset?window.pageYOffset:document.body.scrollTop}},t.measureElement=function measureElement(e,t){let n=!1;if(!e.parentNode){n=!0;let r=e.style.opacity;e.style.opacity="0",window.setTimeout(()=>{e.style.opacity=r}),t||(t=document.body),t.appendChild(e)}let r=e.getBoundingClientRect();return n&&t.removeChild(e),r},t.findCommonParent=function findCommonParent(e,t){let n,r;if(e&&t)for(n=e,r=t;n;){for(;r;){if(n===r)return n;r=r.parentNode}n=n.parentNode,r=t}},t.moveRelToElem=function moveRelToElem(e,t,n,r,s){let i,o,l,a;return i=globalOffsets(e),o=globalOffsets(e),l=o.left+n-i.left,a=o.top+r-i.top,s||(e.style.position="absolute",e.style.left=l+"px",e.style.top=a+"px"),{x:l,y:a}},t.isInDOM=function isInDOM(e){let t=e.parentNode;for(;t;){if(t===document.body)return!0;t=t.parentNode}return!1}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(9),s=n(35),i=n(2);function isChild(e,t){let n;for(n=t;n;){if(n===e)return!0;n=n.parentNode}return!1}t.removeSubclassFromAllElements=function removeSubclassFromAllElements(e,t,n){let s,i,o;for(s=document.getElementsByClassName(e),i=0;i<s.length;i+=1)o=s[i],o!==n&&r.removeClass(o,t)},t.isChildEventTarget=function isChildEventTarget(e,t){return isChild(t,e.target)},t.isChild=isChild,t.appendChildren=function appendChildren(e,...t){let n;for(n=0;n<t.length;n+=1)e.appendChild(t[n])},t.clearChildren=function clearChildren(e){for(let t=e.children.length-1;t>=0;t-=1){let n=e.children[t];e.removeChild(n)}},t.moveElemRelativePosition=function moveElemRelativePosition(e,t){let n=parseInt(e.style.top)||0,r=parseInt(e.style.left)||0;e.style.top=n+t.y+"px",e.style.left=r+t.x+"px"},t.resetPageFocus=function resetPageFocus(){let e=-1;i.isNullOrUndefined(document.body.tabIndex)&&(e=document.body.tabIndex),document.body.tabIndex=0,document.body.focus(),document.body.tabIndex=e},t.removeElement=function removeElement(e){e.parentNode&&e.parentNode.removeChild(e)},t.select=function select(e){if(s.isSelectable(e))e.select();else{let t=document.createRange();t.selectNodeContents(e);let n=window.getSelection();n.removeAllRanges(),n.addRange(t)}},t.HTML_TAB="&nbsp;&nbsp;&nbsp;&nbsp;",t.encodeForHTML=function encodeForHTML(e){return e=(e=(e=(e=(e=e.replace(/&/g,"&amp;")).replace(/</g,"&lt;")).replace(/>/g,"&gt;")).replace(/\\n/g,"<br>")).replace(/\\t/g,t.HTML_TAB)},t.decodeFromHTML=function decodeFromHTML(e){return e=(e=(e=(e=(e=(e=(e=(e=e.replace(/&amp;/g,"&")).replace(/&lt;/g,"<")).replace(/&gt;/g,">")).replace(/&quot;/g,'"')).replace(/&apos;/g,"'")).replace(/<br>/g,"\n")).replace(new RegExp(t.HTML_TAB,"g"),"\t")).replace(/&nbsp;/g," ")},t.replaceElemWithElem=function replaceElemWithElem(e,t){if(!e.parentNode)return;let n=e.nextSibling,r=e.parentNode;r.removeChild(e),r.insertBefore(t,n)},t.isVisible=function isVisible(e){if(s.hasOffsets(e)){if(0!==e.offsetWidth)return!0;if(0!==e.offsetHeight)return!0}else{if(0!==e.clientWidth)return!0;if(0!==e.clientHeight)return!0}return!1},t.getElementsBySelector=function getElementsBySelector(e){let t=document.body.querySelectorAll(e),n=[];for(let e of t)n.push(e);return n},t.doesElementMatchSelector=function doesElementMatchSelector(e,t){return!!e&&(!!e.matches&&e.matches(t))}},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(76)),__export(n(36)),__export(n(77))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(36),s=n(2);t.equals=function equals(e,t){return r.isEquatable(e)?e.equals(t):s.isPrimitive(e)?e===t:s.isDate(e)?+e==+t:JSON.stringify(e)===JSON.stringify(t)},t.lesserThan=function lesserThan(e,t){return r.isComparable(e)?e.lesserThan(t):e<t},t.greaterThan=function greaterThan(e,t){return r.isComparable(e)?e.greaterThan(t):e>t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.INCORRECT_ORDER=1]="INCORRECT_ORDER",e[e.SAME=0]="SAME",e[e.CORRECT_ORDER=-1]="CORRECT_ORDER"}(t.SortOrderEnum||(t.SortOrderEnum={}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(11),s=n(0),i=n(9),o=n(34);class _PlaceholderLibrary extends r._Library{constructor(){super(...arguments),this._indexedPlaceholders={}}get _idSuffix(){return"placeholder"}_indexByPlaceholder(e,t){let n={[t]:e},r=i.indexByPlaceholder(n);return s.map(r,(e,n)=>{if(!e[t])return;let r=(this._indexedPlaceholders[n]||{})[t]||{},i=s.combineObjects(r,e[t]);s.setDictValue(this._indexedPlaceholders,i,[n,t])}),r}_updateElems(e,t){let n=this._indexByPlaceholder(e,t);s.map(n,(e,n)=>{let r=e[t],s=i.mapIndexToStyle(r,this._rawStyles[t]);s&&this._updatePlaceholderElem(s,t,n)})}_updatePlaceholderElem(e,t,n){super._updateElems(e,this._formatElemString(t,n))}replacePlaceholder(e){e.baseElem?this._replaceSingleElemPlaceholders(e):e.uniqueKey?this._replacePlaceholderForKey(e):this._replacePlaceholdersForMultipleKeys(e)}_replacePlaceholdersForMultipleKeys(e){const t=this._indexedPlaceholders[e.placeholder];t&&!s.isEmptyObject(t)&&s.map(t,(t,n)=>{e.uniqueKey=n,this._replacePlaceholderForKey(e),e.uniqueKey=null})}_replacePlaceholderForKey(e){if(!e.uniqueKey)return;const t=this._replacePlaceholderViaIndex(e);this._updatePlaceholderElem(t,e.uniqueKey,e.placeholder)}_replaceSingleElemPlaceholders(e){if(!e.uniqueKey||!e.newValue)return;const t=this._replacePlaceholderViaIndex(e),n=this._findMatches(e.baseElem,s.getKeys(t));s.map(n,(e,n)=>{for(let r of e)s.map(t[n],(e,t)=>{r.style[t]=e})})}_findMatches(e,t){let n={};for(let r of t)n[r]=this._findMatch(e,r);return n}_findMatch(e,t){let n=[],r=[e],s=0;for(;s<r.length;){let e=r[s];o.doesElementMatchSelector(e,t)&&n.push(e),r=r.concat([...e.childNodes]),s+=1}return n}_replacePlaceholderViaIndex(e){this._indexedPlaceholders[e.placeholder]||(this._indexedPlaceholders[e.placeholder]={});const t=this._indexedPlaceholders[e.placeholder][e.uniqueKey]||{};let n=i.mapIndexToStyle(t,this._rawStyles[e.uniqueKey]);return i.replacePlaceholders(n,e.placeholder,e.newValue)}_formatElemString(e,t){return`${e}-${t}`}}t.PlaceholderLibrary=new _PlaceholderLibrary},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(11);class _FontLibrary extends r._Library{get _idSuffix(){return"fonts"}}t.FontLibrary=new _FontLibrary},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(37);function createCssClass(e,t,n){return n=n||r.StyleLibrary.getNextId(),r.StyleLibrary.add(n,{[e]:t}),r.StyleLibrary.getElemForKey(n)}t.createCssClass=createCssClass,t.addHiddenClass=function addHiddenClass(e="hidden"){return createCssClass("."+e,{display:"none"})},t.addUnselectableClass=function addUnselectableClass(e="unselectable"){return createCssClass("."+e,{userSelect:"none",mozUserSelect:"none",webkitUserSelect:"none",khtmlUserSelect:"none",oUserSelect:"none"})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(82);class ModelEvent extends r.CodeEvent{}t.ModelEvent=ModelEvent},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(83)),__export(n(84))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.CodeEvent=class CodeEvent{constructor(e){this._name=e,this._listeners=new Map}get listeners(){return new Map(this._listeners)}dispatch(e,t){let n=t;n.target=e,n.name=this._name;let r=[];r=r.concat(this._listeners.get(e)),r=r.concat(this._listeners.get(null));for(let e of r)e&&e(n)}addEventListener(e,t){t||(t=null);let n=this._listeners.get(t);n||(n=[]),n.push(e),this._listeners.set(t,n)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isListenable=e=>!!e.addEventListener},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(7)),__export(n(96))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(39),s=n(1);t.equals=function equals(e,t){return r.isEquatable(e)?e.equals(t):s.isPrimitive(e)?e===t:s.isDate(e)?+e==+t:JSON.stringify(e)===JSON.stringify(t)},t.lesserThan=function lesserThan(e,t){return r.isComparable(e)?e.lesserThan(t):e<t},t.greaterThan=function greaterThan(e,t){return r.isComparable(e)?e.greaterThan(t):e>t}},function(e,t,n){"use strict";function isString(e){return"string"==typeof e}Object.defineProperty(t,"__esModule",{value:!0}),t.isUndefined=function isUndefined(e){return void 0===e},t.isNullOrUndefined=function isNullOrUndefined(e){return void 0===e||null===e},t.isFalsy=function isFalsy(e,t=[]){if(e)return!1;for(let n of t)if(n===e)return!1;return!0},t.isTruthy=function isTruthy(e,t=[]){return!this.isFalsy(e,t)},t.isInterface=function isInterface(e,t){let n,r,s=!0;for(n in t)if(t.hasOwnProperty(n)&&(r=t[n],r&&void 0===e[n])){s=!1;break}if(!s)return!1;let i=!1;for(n in e)if(e.hasOwnProperty(n)&&void 0===t[n]){i=!0;break}return!i},t.isString=isString,t.isKeyof=function isKeyof(e,t){return t?t.hasOwnProperty(e):isString(e)},t.isNumber=function isNumber(e){return"number"==typeof e},t.isBoolean=function isBoolean(e){return"boolean"==typeof e},t.isPrimitive=function isPrimitive(e){if(null===e)return!0;switch(typeof e){case"boolean":case"number":case"string":case"undefined":return!0;default:return!1}},t.isFunction=function isFunction(e){return"function"==typeof e},t.isArray=function isArray(e){return e instanceof Array},t.isObject=function isObject(e){return typeof e==typeof{}},t.isDate=function isDate(e){return e instanceof Date&&"[object Date]"===Object.prototype.toString.call(e)},t.isPromise=function isPromise(e){return e instanceof Promise},t.isPromiseLike=function isPromiseLike(e){return!!e.then&&"function"==typeof e.then},t.isStandardElement=function isStandardElement(e){return e instanceof HTMLElement||e instanceof SVGElement},t.isDrawable=function isDrawable(e){return!!e.draw},t.isDrawableElement=function isDrawableElement(e){return!!e.appendChild},t.isUpdatable=function isUpdatable(e){if(e)return!!e.update}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.INCORRECT_ORDER=1]="INCORRECT_ORDER",e[e.SAME=0]="SAME",e[e.CORRECT_ORDER=-1]="CORRECT_ORDER"}(t.SortOrderEnum||(t.SortOrderEnum={}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(41),s=n(8),i=n(1),o=n(40);function clonePoint(e){return{x:e.x,y:e.y}}function clone(e,t=[],n){for(let r of t)if(r.typeGuard(e,n))return r.cloner(e,n);return i.isPrimitive(e)?_clonePrimitive(e):o.isCloneable(e)?e.clone():i.isDate(e)?_cloneDate(e):i.isArray(e)?_cloneArray(e,t):i.isObject(e)?_cloneObject(e,t):void 0}t.cloneRect=function cloneRect(e){return{x:e.x,y:e.y,w:e.w,h:e.h}},t.clonePoint=clonePoint,t.clonePointArray=function clonePointArray(e){let t,n=[];for(t of e){let e=clonePoint(t);n.push(e)}return n},t.cloneObject=function cloneObject(e){return JSON.parse(JSON.stringify(e))},t.clone=clone;const _clonePrimitive=e=>e,_cloneDate=e=>new Date(e.valueOf()),_cloneObject=(e,t)=>{const n=Object.getPrototypeOf(e),r=Object.create(n);return s.map(e,(e,n)=>{r[n]=clone(e,t,n)}),r},_cloneArray=(e,t)=>{const n=[];for(let r of e)n.push(clone(r,t));return n};t.shallowCloneObject=function shallowCloneObject(e){return r.combineObjects({},e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(42),s=n(8);t.stringify=function stringify(e,t,n){let i=[],o=t?"<br>":"\n",l=t?"&nbsp;&nbsp;&nbsp;&nbsp;":"\t";return n||(n=""),s.map(e,(e,s)=>{let a;switch(typeof e){case"string":a=e;break;case"number":case"boolean":a=e.toString();break;default:if(!e){a=e;break}a=e.hasOwnProperty("toString")?o+e.toString():o+stringify(e,t,l)}i.push(function _format(e,t,n){if(n)return function _formatPropertyAsHTML(e,t){return r.format("<b>{0}</b>: {1}{2}",e,t,"<br>")}(e,t);return function _formatPropertyAsPlainText(e,t){return r.format("{0}: {1}\n",e,t)}(e,t)}(n+s,a,t))}),i.join("")}},function(e,t,n){"use strict";function indexOf(e,t,n){if(!e)return-1;for(let r=0;r<e.length;r+=1)if(n){if(n(e[r],t))return r}else if(e[r]===t)return r;return-1}Object.defineProperty(t,"__esModule",{value:!0}),t.contains=function contains(e,t,n){return-1!==indexOf(e,t,n)},t.indexOf=indexOf,t.removeElemFromArr=function removeElemFromArr(e,t,n){let r,s;for(n||(n=function(e,t){return e===t}),r=e.length-1;r>=0;r-=1)n(e[r],t)&&(s=e.splice(r,1));return s}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(43),s=n(44);function dateDiff(e,t,n,r,s){let i,o;return i=864e5,r||(e=clearTimeInfo(e,!0),t=clearTimeInfo(t,!0)),o=e>t||n?e-t:t-e,s||(o/=864e5),o}function getToday(e){let t;return t=new Date,e||(t=clearTimeInfo(t)),t}function clearTimeInfo(e,t){let n,r=shortDate(e);return n=t?new Date(r+" 00:00Z"):new Date(r),n}function shortDate(e){if(!e)return"";let t;return t=getShortYear(e),e.getMonth()+1+"/"+e.getDate()+"/"+t}function shortTime(e,t){let n,r,s,i;return n=+e.getMinutes(),s=+e.getHours(),i="",r=n<10?"0"+n:n.toString(),t&&(i=" AM",s>=12&&(i=" PM"),s>12&&(s-=12),0===s&&(s=12)),s+":"+r+i}function isLeapYear(e){if(!e)return!1;let t=e.getFullYear();return t%4==0&&(t%100!=0||t%400==0)}function getShortYear(e){return+e.getFullYear()%100}function isSameDate(e,t){return shortDate(e)===shortDate(t)}function _updateDateDifferences(e,t,n,r){t[n]||(t[n]=0),t[r]||(t[r]=0);let s=t[n],i=s%e,o=Math.floor(s/e);return t[n]=i,t[r]+=o,t}function _createPluralString(e,t,n){return 1===e?e+" "+t:(n||(n=t+"s"),e+" "+n)}t.dateDiff=dateDiff,function(e){e[e.EXCLUSIVE=-1]="EXCLUSIVE",e[e.DEFAULT=0]="DEFAULT",e[e.INCLUSIVE=1]="INCLUSIVE"}(t.InclusivityEnum||(t.InclusivityEnum={})),t.monthDiff=function monthDiff(e,t,n,r){let s,i;e>t||n?(s=e.getMonth()-t.getMonth(),i=e.getFullYear()-t.getFullYear()):(s=t.getMonth()-e.getMonth(),i=t.getFullYear()-e.getFullYear());let o=12*i+s;return o+=+r,o},t.getToday=getToday,t.clearTimeInfo=clearTimeInfo,t.businessDateDiff=function businessDateDiff(e,t,n,r,s){let i,o,l,a;i=dateDiff(e,t,n,r,s),o=(t>e?e.getDay():t.getDay())+1,o%=7,o<0&&(o=6);let u=0;for(a=0;a<Math.abs(i);a+=1)0!==o&&6!==o||(u+=1),o+=1,o%=7,o<0&&(o=6);return l=i<0?-1:1,i-u*l},t.shortDate=shortDate,t.inputDateFmt=function inputDateFmt(e){let t,n,r;return r=e.getFullYear(),t=e.getMonth()+1,t<10&&(t="0"+t),n=+e.getDate(),n<10&&(n="0"+n),e.getFullYear()+"-"+t+"-"+n},t.inputToDate=function inputToDate(e,t){let n;if(e){let t=e.split("-");n=new Date(+t[0],+t[1]-1,+t[2])}else{if(!t)return n=null,n;n=getToday()}if(t){let e=t.split(":");n.setHours(+e[0]),n.setMinutes(+e[1])}return n},t.shortTime=shortTime,t.inputTimeFmt=function inputTimeFmt(e,t){let n=[],s=e.getHours();n.push(r.padToDigits(s,2));let i=e.getMinutes();if(n.push(r.padToDigits(i,2)),t){let t=e.getSeconds();n.push(r.padToDigits(t,2))}return n.join(":")},t.shortDateTime=function shortDateTime(e,t){return shortDate(e)+" "+shortTime(e,t)},t.stopwatchDisplay=function stopwatchDisplay(e,t,n){let r,i,o;return t?(r=(void 0).toString(),i=(void 0).toString(),o=(void 0).toString()):(r=s.addLeadingZeroes(2,void 0),i=s.addLeadingZeroes(2,void 0),o=s.addLeadingZeroes(2,void 0)),void 0+"D  "+o+":"+i+":"+r+" '"+e},t.updatedStopwatchDisplay=function updatedStopwatchDisplay(e,t){let n=function _retrieveCountsFromMilli(e){let t={},n=e;return t.days=Math.floor(n/864e5),n-=24*t.days*60*60*1e3,t.hours=Math.floor(n/36e5),n-=60*t.hours*60*1e3,t.minutes=Math.floor(n/6e4),n-=60*t.minutes*1e3,t.seconds=Math.floor(n/1e3),n-=1e3*t.seconds,t.milliseconds=n,t}(e),r=[];return n.days&&r.push(n.days+" days"),n.hours&&r.push(n.hours+" hours"),n.minutes&&r.push(n.minutes+" minutes"),n.seconds&&r.push(n.seconds+" seconds"),n.milliseconds&&t.showMilli&&r.push(n.milliseconds+" ms"),r.join(" ")},t.addToDate=function addToDate(e,t){return t.milliseconds&&e.setMilliseconds(e.getMilliseconds()+t.milliseconds),t.seconds&&e.setSeconds(e.getSeconds()+t.seconds),t.minutes&&e.setMinutes(e.getMinutes()+t.minutes),t.hours&&e.setHours(e.getHours()+t.hours),t.days&&e.setDate(e.getDate()+t.days),t.months&&e.setMonth(e.getMonth()+t.months),t.years&&e.setFullYear(e.getFullYear()+t.years),e},t.getMonthName=function getMonthName(e,t){switch(e.getMonth()){case 0:return t?"Jan":"January";case 1:return t?"Feb":"February";case 2:return t?"Mar":"March";case 3:return t?"Apr":"April";case 4:return"May";case 5:return t?"Jun":"June";case 6:return t?"Jul":"July";case 7:return t?"Aug":"August";case 8:return t?"Sept":"September";case 9:return t?"Oct":"October";case 10:return t?"Nov":"November";case 11:return t?"Dec":"December"}return""},t.getDayOfWeek=function getDayOfWeek(e,t){switch(e.getDay()){case 0:return t?"Sun":"Sunday";case 1:return t?"Mon":"Monday";case 2:return t?"Tues":"Tuesday";case 3:return t?"Wed":"Wednesday";case 4:return t?"Thurs":"Thursday";case 5:return t?"Fri":"Friday";case 6:return t?"Sat":"Saturday"}return""},t.getLengthOfMonthInDays=function getLengthOfMonthInDays(e){if(!e)return-1;switch(e.getMonth()){case 0:case 2:case 4:case 6:case 7:case 9:case 11:return 31;case 1:return isLeapYear(e)?29:28;default:return 30}},t.isLeapYear=isLeapYear,t.getShortYear=getShortYear,t.isWeekend=function isWeekend(e){let t=e.getDay();return 0===t||6===t},t.isToday=function isToday(e){return isSameDate(getToday(),clearTimeInfo(e))},t.isSameDate=isSameDate,t.getDisplayDuration=function getDisplayDuration(e){_updateDateDifferences(1e3,e,"milliseconds","seconds"),_updateDateDifferences(60,e,"seconds","minutes"),_updateDateDifferences(60,e,"minutes","hours"),_updateDateDifferences(24,e,"hours","days"),_updateDateDifferences(30,e,"days","months"),_updateDateDifferences(12,e,"months","years");let t=[];return e.years&&t.push(_createPluralString(e.years,"year")),e.months&&t.push(_createPluralString(e.months,"month")),e.days&&t.push(_createPluralString(e.days,"day")),e.hours&&t.push(_createPluralString(e.hours,"hour")),e.minutes&&t.push(_createPluralString(e.minutes,"minute")),e.seconds&&t.push(_createPluralString(e.seconds,"second")),e.milliseconds&&t.push(_createPluralString(e.milliseconds,"millisecond")),t.join(" ")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(8);t.dictionaryToArray=(e={})=>{const t=[];return r.map(e,e=>{t.push(e)}),t},t.arrayToMap=(e=[])=>{const t=new Map;for(let n of e)t.set(n,!0);return t}},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(45)),__export(n(46)),__export(n(95))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(45);class _UndoChain extends r.HistoryChain{constructor(){super(),window.addEventListener("keyup",e=>{e.ctrlKey&&90===e.keyCode&&(this._shouldIgnoreEvent(e)||(e.shiftKey?this.redo():this.undo()))})}undo(){let e=this.navigateBack();e&&e.reverseFunction&&e.reverseFunction()}redo(){let e=this.navigateForward();e&&e.forwardFunction&&e.forwardFunction()}}t._UndoChain=_UndoChain},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(47),s=n(19),i=n(10),o=n(21),l=n(52);t.isPrimitiveModel=e=>e instanceof i.MPrimitive,t.isDateModel=e=>e instanceof i.MDate,t.isObjectModel=e=>e instanceof s.MObject,t.isArrayModel=e=>e instanceof o.MArray,t.isManagerModel=e=>e instanceof o.MManager,t.isIdentifiableModel=e=>e instanceof r.MIdentifiable,t.isSelector=e=>e instanceof l.Selector},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isIdentifiable=e=>!!e.id},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.IdentifierAssigner=new class _IdentifierAssigner{constructor(){this._lastIds={id:0}}getLastId(e){return this._lastIds[e]}_cleanUniqueKey(e){return e?e.replace(/-/g,"_"):"id"}_getNumericId(e){const t=e.split("-");let n=NaN;for(let e of t){const t=parseInt(e);isNaN(t)||(n=t)}return n}generateUniqueId(e,t){e=this._cleanUniqueKey(e);const n=(this._lastIds[e]||0)+1;return this._lastIds[e]=n,t?`${n}-${t}`:""+n}registerId(e,t){const n=this._getNumericId(e),r=this._cleanUniqueKey(t);return!isNaN(n)&&(!(n<=this._lastIds[r])&&(this._lastIds[r]=n,!0))}reset(e){const t=this._cleanUniqueKey(e);this._lastIds[t]=0}},t.generateUniqueId=function generateUniqueId(e,n){return t.IdentifierAssigner.generateUniqueId(e,n)},t.registerUniqueId=function registerUniqueId(e,t){return this.IdentifierAssigner.registerId(e,t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(50),s=n(18),i=n(1),o=n(7);class _KeyedModels extends r._KeyedModel{_getType(){return"array"}remove(e){const t=this.get(e);return this._innerSet({key:e,value:void 0}),t}findIndex(e){let t;return this._map(this._innerModel,(n,r)=>{s.equals(e,o.isModel(n)?n.getData():n)&&(t=r)}),t}contains(e){const t=this.findIndex(e);return!i.isUndefined(t)}clear(){this._innerSetData({eventType:"remove",value:this._getDefaultValues()})}}t._KeyedModels=_KeyedModels},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3);class MPrimitive extends r._Model{_getDefaultValues(){}}t.MPrimitive=MPrimitive},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3),s=n(20);class MDate extends r._Model{_getApplicableTransforms(){const e=super._getApplicableTransforms();return e||s.DefaultDateTransform}_getDefaultValues(){return null}getData(){return super.getData()}}t.MDate=MDate},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3),s=n(7);class Model extends r._Model{_getDefaultValues(){}setData(e){const t=this._wrapInModel(e,this._transforms);this._innerSetData({value:t})}getData(){const e=this._innerGetData();return s.isModel(e)?e.getData():e}getModel(e="o"){if(s.isModel(this._innerModel))return this._innerModel}}t.Model=Model},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(51);class MSet extends r.MArray{add(e){return!this.contains(e)&&super.add(e)}}t.MSet=MSet},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(105),s=n(13),i=n(4),o=n(1);class MManager extends s._KeyedModels{_getDefaultValues(){return new r.DataManager}_getValue(e,t){return e.get(t)}_innerGetData(){return super._innerGetData().toArray()}_innerExport(){return super._innerExport().toArray()}toDataManager(){return super._innerGetData()}toArray(){return this._innerGetData()}toDictionary(){return this.toDataManager().toDictionary()}_setValue(e,t,n){this._isRemoval(e,t,n)?e.remove(t):this._isReplacement(e,t)?(e.remove(t),e.add(n)):o.isUndefined(n)||e.add(n)}_isRemoval(e,t,n){return!!r.isDataManager(e)&&(!!e.contains(t)&&(!!o.isUndefined(n)||!!o.isUndefined(n.getData())))}_isReplacement(e,t){return!!r.isDataManager(e)&&!!e.contains(t)}_map(e,t){r.isDataManager(e)?e.map(t):o.isArray(e)?i.map(e,(e,n)=>t(e,e.id)):i.map(e,t)}add(e){return!this.contains(e)&&(this._innerSet({key:e.id,value:e,eventType:"add"}),!0)}getIndex(e){if(this._innerModel.contains(e.id))return e.id}}t.MManager=MManager},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(106)),__export(n(22)),__export(n(107))},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(s,i){function fulfilled(e){try{step(r.next(e))}catch(e){i(e)}}function rejected(e){try{step(r.throw(e))}catch(e){i(e)}}function step(e){e.done?s(e.value):function adopt(e){return e instanceof n?e:new n((function(t){t(e)}))}(e.value).then(fulfilled,rejected)}step((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const s=n(22);class AsyncManager extends s.DataManager{constructor(e,t){super(),this._innerLoad=e,this._innerCreate=t,this._inFlight={}}_createAndAddDefault(e){let t=this.create(e);return this.add(t),this}getOrCreate(e){return r(this,void 0,void 0,(function*(){if(!e)throw new Error("no ID provided");let t=this.get(e);return t||(this._inFlight[e]||(this._inFlight[e]=this._loadAndCreate(e)),this._inFlight[e])}))}_loadAndCreate(e){return r(this,void 0,void 0,(function*(){let t=yield this.load(e);if(!t)throw new Error("no data found for id '"+e+"'");let n=this.create(t);return this.add(n),n}))}create(e){return this._innerCreate?this._innerCreate(e):e}load(e){return r(this,void 0,void 0,(function*(){return this._innerLoad||Promise.reject("innerLoad not defined"),this._innerLoad(e)}))}}t.AsyncManager=AsyncManager},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(22);t.isDataManager=function isDataManager(e){return e instanceof r.DataManager}},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(53)),__export(n(52))},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(110)),__export(n(20))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(20),s=n(10);t.createModelTransform=e=>({incoming:(t,n,r)=>{const s=new e(t);return r&&r.addModelListener(s,n),s}}),t.createModelDateTransform=(e=r.DefaultDateTransform)=>({incoming:(t,n,r)=>{const i=new s.MDate(t,{_:e});return r&&r.addModelListener(i,n),i}})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(112),s=n(16);function createInput(e,t){const n=Object.assign(Object.assign({},e),{type:"input",attr:Object.assign(Object.assign({},e.attr),{value:e.value,type:e.type}),eventListeners:{change:e.onChange}});return s.createElement(n,t)}t.createInput=createInput,t.createLabeledInput=function createLabeledInput(e,t,n){if(!t.id){const e=r.IdentifierAssigner.generateUniqueId("input","genInput");t.id=e,t.attr=Object.assign(Object.assign({},t.attr),{name:e})}return e.type="label",e.attr=Object.assign(Object.assign({},e.attr),{for:t.id}),[s.createElement(e,n),createInput(t,n)]},t.createButton=function createButton(e,t){const n=Object.assign(Object.assign({},e),{type:"button",eventListeners:{click:e.onClick},content:e.label});return s.createElement(n,t)}},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(113)),__export(n(114))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isIdentifiable=e=>!!e.id},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.IdentifierAssigner=new class _IdentifierAssigner{constructor(){this._lastIds={id:0}}getLastId(e){return this._lastIds[e]}_cleanUniqueKey(e){return e?e.replace(/-/g,"_"):"id"}_getNumericId(e){const t=e.split("-");let n=NaN;for(let e of t){const t=parseInt(e);isNaN(t)||(n=t)}return n}generateUniqueId(e,t){e=this._cleanUniqueKey(e);const n=(this._lastIds[e]||0)+1;return this._lastIds[e]=n,t?`${n}-${t}`:""+n}registerId(e,t){const n=this._getNumericId(e),r=this._cleanUniqueKey(t);return!isNaN(n)&&(!(n<=this._lastIds[r])&&(this._lastIds[r]=n,!0))}reset(e){const t=this._cleanUniqueKey(e);this._lastIds[t]=0}},t.generateUniqueId=function generateUniqueId(e,n){return t.IdentifierAssigner.generateUniqueId(e,n)},t.registerUniqueId=function registerUniqueId(e,t){return this.IdentifierAssigner.registerId(e,t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(16);function processCellContents(e,t){let n,s;if(!e)return t;if("string"==typeof e)t.innerHTML=e;else if(e.appendChild)t.appendChild(e);else for(s in e.create?(n=r.createElement(e.create),t.appendChild(n)):t.innerHTML=e.content,e.attr)e.attr.hasOwnProperty(s)&&t.setAttribute(s,e.attr[s]);return t}t.createTable=function createTable(e,t,n,s,i){let o,l,a,u,c,d;for(s||(s=n&&n.length||0),o=r.createElement({type:"table",cls:t}),c=0;c<s;c+=1)for(i||(i=n[c].length),l=o.insertRow(-1),d=0;d<i;d+=1)u=n[c][d],a=l.insertCell(-1),processCellContents(u,a);return o},t.processCellContents=processCellContents,t.addRow=function addRow(e,t,n,r){let s,i,o,l;if(n||0===n||(n=-1),r||0===r||(r=t.length),e&&e.insertRow){for(s=e.insertRow(n),o=0;o<r;o+=1)i=s.insertCell(-1),l=t[o]||"",processCellContents(l,i);return s}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parseFile=void 0;const r=n(117),s=n(0);t.parseFile=e=>{const t=getLinesInFile(e),n={line:"",state:{competencies:{},levels:{},categories:{}},lastLevel:null,lastCategory:null,levelOrder:[],categoryOrder:[]};for(let e of t)n.line=e,parseLine(n);return{levels:n.levelOrder,categories:n.categoryOrder,competencies:s.map(n.state.competencies,e=>e)}};const getLinesInFile=e=>e.split("\n"),parseLine=e=>{const{line:t,state:n}=e,s=r.matchLevel(t);if(!e.lastLevel&&!s)return;if(e.lastLevel&&r.isH2(t)&&!s)return void(e.lastLevel=null);if(s)return parseLevel(e,s);const i=r.matchCategory(t);if(i)return parseCategory(e,i,s);const o=r.matchCompetency(t);return o?parseCompetency(o,e):void 0},parseCategory=(e,t,n)=>{const{state:r}=e;e.lastCategory=t,r.categories[t]||(r.categories[t]=0,e.categoryOrder.push(t)),r.categories[t]+=1},parseLevel=(e,t)=>{const{state:n}=e;e.lastLevel=t,n.levels[t]||(n.levels[t]=0,e.levelOrder.push(t)),n.levels[t]+=1},parseCompetency=(e,t)=>{const{state:n}=t;n.competencies[e]?n.competencies[e].levels.push(t.lastLevel):n.competencies[e]={id:e,name:e,levels:[t.lastLevel],category:t.lastCategory}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isH2=t.matchCompetency=t.matchCategory=t.matchLevel=void 0;const r=n(15),s=/^\s*?##\s*?([\w &\/]+)\s*?\{#/,i=/^\s*?###\s*?(.+)$/,o=/^\s*?[\*-]\s*?(.+)$/;t.matchLevel=e=>_match(s,e),t.matchCategory=e=>_match(i,e),t.matchCompetency=e=>_match(o,e);const _match=(e,t)=>{const n=e.exec(t);return n?r.trim(n[1]):""};t.isH2=e=>{const t=e.replace(/^\s+/,"");return"##"===t.substring(0,2)&&"#"!==t[2]}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.renderLayout=void 0;const r=n(6),s=n(119),i=n(122),o=n(126);t.renderLayout=()=>r.createElement({parent:document.body,cls:{name:"layout",styles:{"html, body, .layout":{width:"100%",height:"100%",margin:"0",padding:"0",fontFamily:"Roboto"},".layout":{display:"flex"}}},children:[i.renderFilterBar(),s.renderList(),o.renderMatrix()]})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.renderList=void 0;const r=n(6),s=n(120),i=n(54),o=n(123);t.renderList=()=>{const e=o.selectDisplay().select(e=>"list"===e?"list":"hidden"),t=i.selectLevels().mapSelect(e=>s.renderGroup(e));return r.createElement({cls:e,styles:{".list":{display:"flex",flexDirection:"column",alignItems:"center",gridTemplateColumns:"1fr",fontSize:"2em",width:"100%",overflowY:"auto"}},children:t})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.renderGroup=void 0;const r=n(6),s=n(0),i=n(121),o=n(9),l=n(14),a=n(54),u=n(123),c={".hidden":{display:"none"},".column":{fontSize:"0.9em",width:"50vw",marginBottom:"1em",nested:{"&.collapsed .colName img":{transform:"rotate(0deg)"},"&.collapsed .groupChildren":{display:"none"}}},".colName":{margin:"1rem",fontFamily:"Zilla Slab",fontSize:"0.9em",fontWeight:"500",cursor:"pointer",display:"flex",marginLeft:"-1.2em",nested:{img:{width:"1.5em",height:"1.5em",transform:"rotate(180deg)",transformOrigin:"50% 50%"}}}};t.renderGroup=(e,n)=>{const d=!n,f=n||e;let p;p=n?a.selectCompetencies().select(t=>s.filter(t,t=>t.category===n&&-1!==t.levels.indexOf(e))).mapSelect(t=>i.renderCompetency(t,e)):a.selectCategories().mapSelect(n=>t.renderGroup(e,n));const _=u.selectHiddenLevels().select(t=>-1!==t.indexOf(e)?"column hidden":"column");let h=!1;const y=r.createElement({cls:_,styles:c,children:[{cls:"colName",eventListeners:{click:()=>(h=!h,void o.addOrRemoveClass(y,"collapsed",h))},children:[{type:"img",attr:{src:"./res/down_caret.png"}},{content:f},{type:"img",attr:{src:"./res/ex.png"},cls:d?"icon":"hidden",eventListeners:{click:e=>(e=>{l.STATE.set("hiddenLevels",[...l.STATE.get("hiddenLevels"),f]),e.stopPropagation()})(e)}}]},{cls:"groupChildren",children:p}]});return y}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.renderCompetency=void 0;const r=n(6),s=n(0);r.createElement({styles:{".competency":{padding:"0.5rem",margin:"0.5rem",fontSize:"0.6em",borderTop:"1px solid #eee",fontFamily:"Anonymous Pro",nested:{".name":{opacity:"0.5"},".name.bold":{opacity:"1"},".category, .levels":{marginTop:"0.5rem",fontSize:"0.8rem",display:"none",position:"absolute",backgroundColor:"#fff",borderRadius:"10px",boxShadow:"1px 1px 3px 2px rgba(0,0,0,.2)",padding:"0.5rem"},"&:hover .levels":{display:"block",zIndex:"5"}}}}}),t.renderCompetency=(e,t)=>{const n=s.filter(e.levels,e=>e!==t);return r.createElement({cls:"competency",children:[{content:e.name,cls:["name",0===n.length?"bold":""]},0!==n.length?{cls:"levels",children:[{content:"Also in:"},{type:"ul",children:e.levels.map(e=>t===e?{}:{type:"li",content:e})}]}:{}]})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.renderFilterBar=void 0;const r=n(6),s=n(124),i=n(125);t.renderFilterBar=()=>r.createElement({cls:"filterBar",styles:{".filterBar":{height:"100%",backgroundColor:"#333",fontFamily:"Anonymous Pro",color:"#FFF",display:"flex",flexDirection:"column"},".label":{fontSize:"0.8rem",opacity:"0.8",marginBottom:"0.25rem",fontFamily:"Zilla Slab"},".title":{fontSize:"1.2rem",margin:"1rem",marginBottom:"0.2rem"},".subtitle":{fontSize:"0.7rem",marginLeft:"1rem",marginBottom:"1rem"}},children:[{cls:"title",content:"Competency Explorer"},{cls:"subtitle",content:"by kip price"},s.renderViews(),i.renderFilters()]})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.selectHiddenLevels=t.selectDisplay=t.selectFilters=void 0;const r=n(12),s=n(14);t.selectFilters=()=>r.select(s.STATE,e=>({levels:e.levels,display:e.display,hiddenLevels:e.hiddenLevels})),t.selectDisplay=()=>r.select(s.STATE,e=>e.display),t.selectHiddenLevels=()=>r.select(s.STATE,e=>e.hiddenLevels)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.renderViews=void 0;const r=n(6),s=n(123),i=n(14);t.renderViews=()=>{const clsSelector=e=>s.selectFilters().select(e=>e.display).select(t=>t===e?"selected displayMode":"displayMode");return r.createElement({cls:"views",styles:{".views":{margin:"1rem",display:"flex",flexDirection:"column",nested:{".displayMode":{cursor:"pointer",width:"auto",borderRadius:"5px",padding:"0.1rem 0.25rem"},".displayMode:not(.selected)":{opacity:"0.5"},".selected":{backgroundColor:"#fff",color:"#333"}}}},children:[{cls:"label",content:"View As: "},{children:[{content:"List",cls:clsSelector("list"),eventListeners:{click:()=>i.STATE.set("display","list")}},{content:"Matrix",cls:clsSelector("matrix"),eventListeners:{click:()=>i.STATE.set("display","matrix")}}]}]})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.renderFilters=void 0;const r=n(123),s=n(6),i=n(54),o=n(14);t.renderFilters=()=>{const e=i.selectLevels().mapSelect(e=>{return{cls:(t=e,r.selectFilters().select(e=>e.hiddenLevels).select(e=>-1!==e.indexOf(t)?"hidden level":"level")),content:e,eventListeners:{click:()=>{console.log("hiding"),o.hideOrUnhideLevel(e)}}};var t});return s.createElement({cls:"filters",styles:{".filters":{display:"flex",flexDirection:"column",padding:"1rem"}},children:[{cls:"label",content:"Visible Levels:"},{cls:"levels",styles:{".levels":{display:"flex",flexDirection:"column",justifyContent:"flex-start"},".level":{padding:"0.1rem 0.25rem",cursor:"pointer",marginBottom:"0.5rem",width:"auto",borderRadius:"5px"},".level:not(.hidden)":{backgroundColor:"#FFF",color:"#333"},".hidden.level":{display:"block",textDecoration:"line-through",opacity:"0.5"}},children:e}]})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.renderMatrix=void 0;const r=n(6),s=n(123);t.renderMatrix=()=>{const e=s.selectDisplay().select(e=>"matrix"===e?"matrix":"hidden");return r.createElement({cls:e,styles:{".matrix":{fontFamily:"Zilla Slab",fontSize:"2em",display:"flex",flexDirection:"column",width:"100%",alignItems:"center",justifyContent:"center",height:"100%"}},content:"Sorry, not ready yet :<"})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9raXAvbnBtL2NvbXBldGVuY3ktbWF0cml4L25vZGVfbW9kdWxlcy9AdG9vbGtpcC9vYmplY3QtaGVscGVycy9kaXN0L2luZGV4LmpzIiwid2VicGFjazovLy8vVXNlcnMva2lwL0Ryb3Bib3gva2lwX2NvZGUvbGlicmFyaWVzL3Rvb2xraXBfbW9kdWxlL19jb3JlL3BhY2thZ2VzL3NoYXJlZFR5cGVzL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9raXAvbnBtL2NvbXBldGVuY3ktbWF0cml4L25vZGVfbW9kdWxlcy9AdG9vbGtpcC9zaGFyZWQtdHlwZXMvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2tpcC9Ecm9wYm94L2tpcF9jb2RlL2xpYnJhcmllcy90b29sa2lwX21vZHVsZS9fY29yZS9wYWNrYWdlcy9tb2RlbC9kaXN0L2Fic3RyYWN0Q2xhc3Nlcy9fbW9kZWwuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9raXAvRHJvcGJveC9raXBfY29kZS9saWJyYXJpZXMvdG9vbGtpcF9tb2R1bGUvX2NvcmUvcGFja2FnZXMvb2JqZWN0SGVscGVycy9kaXN0L2luZGV4LmpzIiwid2VicGFjazovLy8vVXNlcnMva2lwL25wbS9jb21wZXRlbmN5LW1hdHJpeC9ub2RlX21vZHVsZXMvQHRvb2xraXAvb2JqZWN0LWhlbHBlcnMvZGlzdC9tYW5pcHVsYXRlLmpzIiwid2VicGFjazovLy8vVXNlcnMva2lwL25wbS9jb21wZXRlbmN5LW1hdHJpeC9ub2RlX21vZHVsZXMvQHRvb2xraXAvY3JlYXRlLWVsZW1lbnRzL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9raXAvRHJvcGJveC9raXBfY29kZS9saWJyYXJpZXMvdG9vbGtpcF9tb2R1bGUvX2NvcmUvcGFja2FnZXMvbW9kZWwvZGlzdC9fdHlwZWd1YXJkcy9jb3JlLmpzIiwid2VicGFjazovLy8vVXNlcnMva2lwL0Ryb3Bib3gva2lwX2NvZGUvbGlicmFyaWVzL3Rvb2xraXBfbW9kdWxlL19jb3JlL3BhY2thZ2VzL29iamVjdEhlbHBlcnMvZGlzdC9tYW5pcHVsYXRlLmpzIiwid2VicGFjazovLy8vVXNlcnMva2lwL25wbS9jb21wZXRlbmN5LW1hdHJpeC9ub2RlX21vZHVsZXMvQHRvb2xraXAvc3R5bGUtaGVscGVycy9kaXN0L2luZGV4LmpzIiwid2VicGFjazovLy8vVXNlcnMva2lwL0Ryb3Bib3gva2lwX2NvZGUvbGlicmFyaWVzL3Rvb2xraXBfbW9kdWxlL19jb3JlL3BhY2thZ2VzL21vZGVsL2Rpc3QvcHJpbWl0aXZlTW9kZWxzL2luZGV4LmpzIiwid2VicGFjazovLy8vVXNlcnMva2lwL25wbS9jb21wZXRlbmN5LW1hdHJpeC9ub2RlX21vZHVsZXMvQHRvb2xraXAvc3R5bGUtbGlicmFyaWVzL2Rpc3QvX2xpYnJhcnkuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9raXAvRHJvcGJveC9raXBfY29kZS9saWJyYXJpZXMvdG9vbGtpcF9tb2R1bGUvX2NvcmUvcGFja2FnZXMvbW9kZWwvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2tpcC9Ecm9wYm94L2tpcF9jb2RlL2xpYnJhcmllcy90b29sa2lwX21vZHVsZS9fY29yZS9wYWNrYWdlcy9tb2RlbC9kaXN0L2Fic3RyYWN0Q2xhc3Nlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kZWxzL3N0YXRlLnRzIiwid2VicGFjazovLy8vVXNlcnMva2lwL25wbS9jb21wZXRlbmN5LW1hdHJpeC9ub2RlX21vZHVsZXMvQHRvb2xraXAvcHJpbWl0aXZlLWhlbHBlcnMvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2tpcC9ucG0vY29tcGV0ZW5jeS1tYXRyaXgvbm9kZV9tb2R1bGVzL0B0b29sa2lwL2NyZWF0ZS1lbGVtZW50cy9kaXN0L2NyZWF0ZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9raXAvbnBtL2NvbXBldGVuY3ktbWF0cml4L25vZGVfbW9kdWxlcy9AdG9vbGtpcC9zdHlsZS1oZWxwZXJzL2Rpc3Qvc3RyaW5naWZpZXIuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9raXAvRHJvcGJveC9raXBfY29kZS9saWJyYXJpZXMvdG9vbGtpcF9tb2R1bGUvX2NvcmUvcGFja2FnZXMvY29tcGFyYWJsZS9kaXN0L2luZGV4LmpzIiwid2VicGFjazovLy8vVXNlcnMva2lwL0Ryb3Bib3gva2lwX2NvZGUvbGlicmFyaWVzL3Rvb2xraXBfbW9kdWxlL19jb3JlL3BhY2thZ2VzL21vZGVsL2Rpc3Qvb2JqZWN0TW9kZWxzL2luZGV4LmpzIiwid2VicGFjazovLy8vVXNlcnMva2lwL0Ryb3Bib3gva2lwX2NvZGUvbGlicmFyaWVzL3Rvb2xraXBfbW9kdWxlL19jb3JlL3BhY2thZ2VzL21vZGVsL2Rpc3QvdHJhbnNmb3Jtcy9kYXRlVHJhbnNmb3Jtcy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2tpcC9Ecm9wYm94L2tpcF9jb2RlL2xpYnJhcmllcy90b29sa2lwX21vZHVsZS9fY29yZS9wYWNrYWdlcy9tb2RlbC9kaXN0L2FycmF5TW9kZWxzL2luZGV4LmpzIiwid2VicGFjazovLy8vVXNlcnMva2lwL0Ryb3Bib3gva2lwX2NvZGUvbGlicmFyaWVzL3Rvb2xraXBfbW9kdWxlL19jb3JlL3BhY2thZ2VzL21hbmFnZXJzL2Rpc3QvZGF0YU1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9raXAvbnBtL2NvbXBldGVuY3ktbWF0cml4L25vZGVfbW9kdWxlcy9AdG9vbGtpcC9vYmplY3QtaGVscGVycy9kaXN0L190eXBlZ3VhcmRzLmpzIiwid2VicGFjazovLy8vVXNlcnMva2lwL25wbS9jb21wZXRlbmN5LW1hdHJpeC9ub2RlX21vZHVsZXMvQHRvb2xraXAvb2JqZWN0LWhlbHBlcnMvZGlzdC9jb21iaW5lLmpzIiwid2VicGFjazovLy8vVXNlcnMva2lwL25wbS9jb21wZXRlbmN5LW1hdHJpeC9ub2RlX21vZHVsZXMvQHRvb2xraXAvcHJpbWl0aXZlLWhlbHBlcnMvZGlzdC9udW1iZXJzLmpzIiwid2VicGFjazovLy8vVXNlcnMva2lwL25wbS9jb21wZXRlbmN5LW1hdHJpeC9ub2RlX21vZHVsZXMvQHRvb2xraXAvcHJpbWl0aXZlLWhlbHBlcnMvZGlzdC9zdHJpbmdzLmpzIiwid2VicGFjazovLy8vVXNlcnMva2lwL25wbS9jb21wZXRlbmN5LW1hdHJpeC9ub2RlX21vZHVsZXMvQHRvb2xraXAvY3JlYXRlLWVsZW1lbnRzL2Rpc3QvX2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2tpcC9ucG0vY29tcGV0ZW5jeS1tYXRyaXgvbm9kZV9tb2R1bGVzL0B0b29sa2lwL2NyZWF0ZS1lbGVtZW50cy9kaXN0L190eXBlR3VhcmRzLmpzIiwid2VicGFjazovLy8vVXNlcnMva2lwL25wbS9jb21wZXRlbmN5LW1hdHJpeC9ub2RlX21vZHVsZXMvQHRvb2xraXAvc3R5bGUtaGVscGVycy9kaXN0L2NvbWJpbmVyLmpzIiwid2VicGFjazovLy8vVXNlcnMva2lwL25wbS9jb21wZXRlbmN5LW1hdHJpeC9ub2RlX21vZHVsZXMvQHRvb2xraXAvc3R5bGUtaGVscGVycy9kaXN0L2Nzcy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2tpcC9ucG0vY29tcGV0ZW5jeS1tYXRyaXgvbm9kZV9tb2R1bGVzL0B0b29sa2lwL3N0eWxlLWhlbHBlcnMvZGlzdC9wbGFjZWhvbGRlcnMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9raXAvbnBtL2NvbXBldGVuY3ktbWF0cml4L25vZGVfbW9kdWxlcy9AdG9vbGtpcC9zdHlsZS1oZWxwZXJzL2Rpc3Qvc3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovLy8vVXNlcnMva2lwL25wbS9jb21wZXRlbmN5LW1hdHJpeC9ub2RlX21vZHVsZXMvQHRvb2xraXAvYXN5bmMvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2tpcC9ucG0vY29tcGV0ZW5jeS1tYXRyaXgvbm9kZV9tb2R1bGVzL0B0b29sa2lwL2h0bWwtaGVscGVycy9kaXN0L2luZGV4LmpzIiwid2VicGFjazovLy8vVXNlcnMva2lwL25wbS9jb21wZXRlbmN5LW1hdHJpeC9ub2RlX21vZHVsZXMvQHRvb2xraXAvaHRtbC1oZWxwZXJzL2Rpc3QvX3R5cGVndWFyZHMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9raXAvbnBtL2NvbXBldGVuY3ktbWF0cml4L25vZGVfbW9kdWxlcy9AdG9vbGtpcC9jb21wYXJhYmxlL2Rpc3QvX3R5cGVndWFyZHMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9raXAvbnBtL2NvbXBldGVuY3ktbWF0cml4L25vZGVfbW9kdWxlcy9AdG9vbGtpcC9zdHlsZS1saWJyYXJpZXMvZGlzdC9zdHlsZUxpYnJhcnkuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9raXAvRHJvcGJveC9raXBfY29kZS9saWJyYXJpZXMvdG9vbGtpcF9tb2R1bGUvX2NvcmUvcGFja2FnZXMvbW9kZWwvZGlzdC9fc2hhcmVkL2luZGV4LmpzIiwid2VicGFjazovLy8vVXNlcnMva2lwL0Ryb3Bib3gva2lwX2NvZGUvbGlicmFyaWVzL3Rvb2xraXBfbW9kdWxlL19jb3JlL3BhY2thZ2VzL2NvbXBhcmFibGUvZGlzdC9fdHlwZWd1YXJkcy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2tpcC9Ecm9wYm94L2tpcF9jb2RlL2xpYnJhcmllcy90b29sa2lwX21vZHVsZS9fY29yZS9wYWNrYWdlcy9vYmplY3RIZWxwZXJzL2Rpc3QvX3R5cGVndWFyZHMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9raXAvRHJvcGJveC9raXBfY29kZS9saWJyYXJpZXMvdG9vbGtpcF9tb2R1bGUvX2NvcmUvcGFja2FnZXMvb2JqZWN0SGVscGVycy9kaXN0L2NvbWJpbmUuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9raXAvRHJvcGJveC9raXBfY29kZS9saWJyYXJpZXMvdG9vbGtpcF9tb2R1bGUvX2NvcmUvcGFja2FnZXMvcHJpbWl0aXZlSGVscGVycy9kaXN0L2luZGV4LmpzIiwid2VicGFjazovLy8vVXNlcnMva2lwL0Ryb3Bib3gva2lwX2NvZGUvbGlicmFyaWVzL3Rvb2xraXBfbW9kdWxlL19jb3JlL3BhY2thZ2VzL3ByaW1pdGl2ZUhlbHBlcnMvZGlzdC9udW1iZXJzLmpzIiwid2VicGFjazovLy8vVXNlcnMva2lwL0Ryb3Bib3gva2lwX2NvZGUvbGlicmFyaWVzL3Rvb2xraXBfbW9kdWxlL19jb3JlL3BhY2thZ2VzL3ByaW1pdGl2ZUhlbHBlcnMvZGlzdC9zdHJpbmdzLmpzIiwid2VicGFjazovLy8vVXNlcnMva2lwL0Ryb3Bib3gva2lwX2NvZGUvbGlicmFyaWVzL3Rvb2xraXBfbW9kdWxlL19jb3JlL3BhY2thZ2VzL2hpc3RvcnkvZGlzdC9oaXN0b3J5LmpzIiwid2VicGFjazovLy8vVXNlcnMva2lwL0Ryb3Bib3gva2lwX2NvZGUvbGlicmFyaWVzL3Rvb2xraXBfbW9kdWxlL19jb3JlL3BhY2thZ2VzL2hpc3RvcnkvZGlzdC9oaXN0b3J5Tm9kZS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2tpcC9Ecm9wYm94L2tpcF9jb2RlL2xpYnJhcmllcy90b29sa2lwX21vZHVsZS9fY29yZS9wYWNrYWdlcy9tb2RlbC9kaXN0L29iamVjdE1vZGVscy9pZGVudGlmaWFibGVNb2RlbC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2tpcC9Ecm9wYm94L2tpcF9jb2RlL2xpYnJhcmllcy90b29sa2lwX21vZHVsZS9fY29yZS9wYWNrYWdlcy9pZGVudGlmaWFibGUvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2tpcC9Ecm9wYm94L2tpcF9jb2RlL2xpYnJhcmllcy90b29sa2lwX21vZHVsZS9fY29yZS9wYWNrYWdlcy9tb2RlbC9kaXN0L29iamVjdE1vZGVscy9tb2RlbE9iamVjdC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2tpcC9Ecm9wYm94L2tpcF9jb2RlL2xpYnJhcmllcy90b29sa2lwX21vZHVsZS9fY29yZS9wYWNrYWdlcy9tb2RlbC9kaXN0L2Fic3RyYWN0Q2xhc3Nlcy9fa2V5ZWRNb2RlbC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2tpcC9Ecm9wYm94L2tpcF9jb2RlL2xpYnJhcmllcy90b29sa2lwX21vZHVsZS9fY29yZS9wYWNrYWdlcy9tb2RlbC9kaXN0L2FycmF5TW9kZWxzL2FycmF5TW9kZWwuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9raXAvRHJvcGJveC9raXBfY29kZS9saWJyYXJpZXMvdG9vbGtpcF9tb2R1bGUvX2NvcmUvcGFja2FnZXMvbW9kZWwvZGlzdC9oZWxwZXJzL3NlbGVjdG9ycy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2tpcC9Ecm9wYm94L2tpcF9jb2RlL2xpYnJhcmllcy90b29sa2lwX21vZHVsZS9fY29yZS9wYWNrYWdlcy9tb2RlbC9kaXN0L2hlbHBlcnMvbW9kZWxGYWN0b3J5LmpzIiwid2VicGFjazovLy8uL3NyYy9zZWxlY3RvcnMvY29yZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2hlbHBlcnMvbG9hZEZpbGUudHMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9raXAvbnBtL2NvbXBldGVuY3ktbWF0cml4L25vZGVfbW9kdWxlcy9AdG9vbGtpcC9zZXJ2ZXIvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2tpcC9ucG0vY29tcGV0ZW5jeS1tYXRyaXgvbm9kZV9tb2R1bGVzL0B0b29sa2lwL3NlcnZlci9kaXN0L2FqYXguanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9raXAvbnBtL2NvbXBldGVuY3ktbWF0cml4L25vZGVfbW9kdWxlcy9AdG9vbGtpcC9zaGFyZWQtdHlwZXMvZGlzdC9fdHlwZUd1YXJkcy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2tpcC9ucG0vY29tcGV0ZW5jeS1tYXRyaXgvbm9kZV9tb2R1bGVzL0B0b29sa2lwL29iamVjdC1oZWxwZXJzL2Rpc3QvY2xvbmluZy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2tpcC9ucG0vY29tcGV0ZW5jeS1tYXRyaXgvbm9kZV9tb2R1bGVzL0B0b29sa2lwL29iamVjdC1oZWxwZXJzL2Rpc3QvZm9ybWF0dGluZy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2tpcC9ucG0vY29tcGV0ZW5jeS1tYXRyaXgvbm9kZV9tb2R1bGVzL0B0b29sa2lwL3ByaW1pdGl2ZS1oZWxwZXJzL2Rpc3QvYXJyYXlzLmpzIiwid2VicGFjazovLy8vVXNlcnMva2lwL25wbS9jb21wZXRlbmN5LW1hdHJpeC9ub2RlX21vZHVsZXMvQHRvb2xraXAvcHJpbWl0aXZlLWhlbHBlcnMvZGlzdC9kYXRlcy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2tpcC9ucG0vY29tcGV0ZW5jeS1tYXRyaXgvbm9kZV9tb2R1bGVzL0B0b29sa2lwL29iamVjdC1oZWxwZXJzL2Rpc3QvY29udmVydGVyLmpzIiwid2VicGFjazovLy8vVXNlcnMva2lwL25wbS9jb21wZXRlbmN5LW1hdHJpeC9ub2RlX21vZHVsZXMvQHRvb2xraXAvc2VydmVyL2Rpc3QvZmlsZUlPLmpzIiwid2VicGFjazovLy8vVXNlcnMva2lwL25wbS9jb21wZXRlbmN5LW1hdHJpeC9ub2RlX21vZHVsZXMvQHRvb2xraXAvY3JlYXRlLWVsZW1lbnRzL2Rpc3QvX2NvcmVDcmVhdGVFbGVtZW50LmpzIiwid2VicGFjazovLy8vVXNlcnMva2lwL25wbS9jb21wZXRlbmN5LW1hdHJpeC9ub2RlX21vZHVsZXMvQHRvb2xraXAvc3R5bGUtaGVscGVycy9kaXN0L19jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9raXAvbnBtL2NvbXBldGVuY3ktbWF0cml4L25vZGVfbW9kdWxlcy9AdG9vbGtpcC9zdHlsZS1oZWxwZXJzL2Rpc3QvZmxhdHRlbmVyLmpzIiwid2VicGFjazovLy8vVXNlcnMva2lwL25wbS9jb21wZXRlbmN5LW1hdHJpeC9ub2RlX21vZHVsZXMvQHRvb2xraXAvc3R5bGUtaGVscGVycy9kaXN0L3J1bGVzLmpzIiwid2VicGFjazovLy8vVXNlcnMva2lwL25wbS9jb21wZXRlbmN5LW1hdHJpeC9ub2RlX21vZHVsZXMvQHRvb2xraXAvc3R5bGUtaGVscGVycy9kaXN0L3RyYW5zaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9raXAvbnBtL2NvbXBldGVuY3ktbWF0cml4L25vZGVfbW9kdWxlcy9AdG9vbGtpcC9hc3luYy9kaXN0L3Byb21pc2VUeXBlcy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2tpcC9ucG0vY29tcGV0ZW5jeS1tYXRyaXgvbm9kZV9tb2R1bGVzL0B0b29sa2lwL3N0eWxlLWxpYnJhcmllcy9kaXN0L2luZGV4LmpzIiwid2VicGFjazovLy8vVXNlcnMva2lwL25wbS9jb21wZXRlbmN5LW1hdHJpeC9ub2RlX21vZHVsZXMvQHRvb2xraXAvaHRtbC1oZWxwZXJzL2Rpc3QvZWxlbWVudFBvc2l0aW9uaW5nLmpzIiwid2VicGFjazovLy8vVXNlcnMva2lwL25wbS9jb21wZXRlbmN5LW1hdHJpeC9ub2RlX21vZHVsZXMvQHRvb2xraXAvaHRtbC1oZWxwZXJzL2Rpc3QvZ2VuZXJhbEhlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9raXAvbnBtL2NvbXBldGVuY3ktbWF0cml4L25vZGVfbW9kdWxlcy9AdG9vbGtpcC9jb21wYXJhYmxlL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9raXAvbnBtL2NvbXBldGVuY3ktbWF0cml4L25vZGVfbW9kdWxlcy9AdG9vbGtpcC9jb21wYXJhYmxlL2Rpc3QvY29tcGFyaXNvbnMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9raXAvbnBtL2NvbXBldGVuY3ktbWF0cml4L25vZGVfbW9kdWxlcy9AdG9vbGtpcC9jb21wYXJhYmxlL2Rpc3QvX2ludGVyZmFjZXMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9raXAvbnBtL2NvbXBldGVuY3ktbWF0cml4L25vZGVfbW9kdWxlcy9AdG9vbGtpcC9zdHlsZS1saWJyYXJpZXMvZGlzdC9wbGFjZWhvbGRlcmxpYnJhcnkuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9raXAvbnBtL2NvbXBldGVuY3ktbWF0cml4L25vZGVfbW9kdWxlcy9AdG9vbGtpcC9zdHlsZS1saWJyYXJpZXMvZGlzdC9mb250TGlicmFyeS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2tpcC9ucG0vY29tcGV0ZW5jeS1tYXRyaXgvbm9kZV9tb2R1bGVzL0B0b29sa2lwL3N0eWxlLWxpYnJhcmllcy9kaXN0L2hlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9raXAvRHJvcGJveC9raXBfY29kZS9saWJyYXJpZXMvdG9vbGtpcF9tb2R1bGUvX2NvcmUvcGFja2FnZXMvbW9kZWwvZGlzdC9fc2hhcmVkL19ldmVudC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2tpcC9Ecm9wYm94L2tpcF9jb2RlL2xpYnJhcmllcy90b29sa2lwX21vZHVsZS9fY29yZS9wYWNrYWdlcy9jb2RlRXZlbnQvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2tpcC9Ecm9wYm94L2tpcF9jb2RlL2xpYnJhcmllcy90b29sa2lwX21vZHVsZS9fY29yZS9wYWNrYWdlcy9jb2RlRXZlbnQvZGlzdC9jb2RlRXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9raXAvRHJvcGJveC9raXBfY29kZS9saWJyYXJpZXMvdG9vbGtpcF9tb2R1bGUvX2NvcmUvcGFja2FnZXMvY29kZUV2ZW50L2Rpc3QvX3R5cGVndWFyZHMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9raXAvRHJvcGJveC9raXBfY29kZS9saWJyYXJpZXMvdG9vbGtpcF9tb2R1bGUvX2NvcmUvcGFja2FnZXMvbW9kZWwvZGlzdC9fdHlwZWd1YXJkcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2tpcC9Ecm9wYm94L2tpcF9jb2RlL2xpYnJhcmllcy90b29sa2lwX21vZHVsZS9fY29yZS9wYWNrYWdlcy9jb21wYXJhYmxlL2Rpc3QvY29tcGFyaXNvbnMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9raXAvRHJvcGJveC9raXBfY29kZS9saWJyYXJpZXMvdG9vbGtpcF9tb2R1bGUvX2NvcmUvcGFja2FnZXMvc2hhcmVkVHlwZXMvZGlzdC9fdHlwZUd1YXJkcy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2tpcC9Ecm9wYm94L2tpcF9jb2RlL2xpYnJhcmllcy90b29sa2lwX21vZHVsZS9fY29yZS9wYWNrYWdlcy9jb21wYXJhYmxlL2Rpc3QvX2ludGVyZmFjZXMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9raXAvRHJvcGJveC9raXBfY29kZS9saWJyYXJpZXMvdG9vbGtpcF9tb2R1bGUvX2NvcmUvcGFja2FnZXMvb2JqZWN0SGVscGVycy9kaXN0L2Nsb25pbmcuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9raXAvRHJvcGJveC9raXBfY29kZS9saWJyYXJpZXMvdG9vbGtpcF9tb2R1bGUvX2NvcmUvcGFja2FnZXMvb2JqZWN0SGVscGVycy9kaXN0L2Zvcm1hdHRpbmcuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9raXAvRHJvcGJveC9raXBfY29kZS9saWJyYXJpZXMvdG9vbGtpcF9tb2R1bGUvX2NvcmUvcGFja2FnZXMvcHJpbWl0aXZlSGVscGVycy9kaXN0L2FycmF5cy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2tpcC9Ecm9wYm94L2tpcF9jb2RlL2xpYnJhcmllcy90b29sa2lwX21vZHVsZS9fY29yZS9wYWNrYWdlcy9wcmltaXRpdmVIZWxwZXJzL2Rpc3QvZGF0ZXMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9raXAvRHJvcGJveC9raXBfY29kZS9saWJyYXJpZXMvdG9vbGtpcF9tb2R1bGUvX2NvcmUvcGFja2FnZXMvb2JqZWN0SGVscGVycy9kaXN0L2NvbnZlcnRlci5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2tpcC9Ecm9wYm94L2tpcF9jb2RlL2xpYnJhcmllcy90b29sa2lwX21vZHVsZS9fY29yZS9wYWNrYWdlcy9oaXN0b3J5L2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9raXAvRHJvcGJveC9raXBfY29kZS9saWJyYXJpZXMvdG9vbGtpcF9tb2R1bGUvX2NvcmUvcGFja2FnZXMvaGlzdG9yeS9kaXN0L3VuZG9DaGFpbi5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2tpcC9Ecm9wYm94L2tpcF9jb2RlL2xpYnJhcmllcy90b29sa2lwX21vZHVsZS9fY29yZS9wYWNrYWdlcy9tb2RlbC9kaXN0L190eXBlZ3VhcmRzL3NwZWNpZmljLmpzIiwid2VicGFjazovLy8vVXNlcnMva2lwL0Ryb3Bib3gva2lwX2NvZGUvbGlicmFyaWVzL3Rvb2xraXBfbW9kdWxlL19jb3JlL3BhY2thZ2VzL2lkZW50aWZpYWJsZS9kaXN0L190eXBlR3VhcmRzLmpzIiwid2VicGFjazovLy8vVXNlcnMva2lwL0Ryb3Bib3gva2lwX2NvZGUvbGlicmFyaWVzL3Rvb2xraXBfbW9kdWxlL19jb3JlL3BhY2thZ2VzL2lkZW50aWZpYWJsZS9kaXN0L3VuaXF1ZUlkLmpzIiwid2VicGFjazovLy8vVXNlcnMva2lwL0Ryb3Bib3gva2lwX2NvZGUvbGlicmFyaWVzL3Rvb2xraXBfbW9kdWxlL19jb3JlL3BhY2thZ2VzL21vZGVsL2Rpc3QvYWJzdHJhY3RDbGFzc2VzL19rZXllZE1vZGVscy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2tpcC9Ecm9wYm94L2tpcF9jb2RlL2xpYnJhcmllcy90b29sa2lwX21vZHVsZS9fY29yZS9wYWNrYWdlcy9tb2RlbC9kaXN0L3ByaW1pdGl2ZU1vZGVscy9tb2RlbFByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2tpcC9Ecm9wYm94L2tpcF9jb2RlL2xpYnJhcmllcy90b29sa2lwX21vZHVsZS9fY29yZS9wYWNrYWdlcy9tb2RlbC9kaXN0L3ByaW1pdGl2ZU1vZGVscy9tb2RlbERhdGUuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9raXAvRHJvcGJveC9raXBfY29kZS9saWJyYXJpZXMvdG9vbGtpcF9tb2R1bGUvX2NvcmUvcGFja2FnZXMvbW9kZWwvZGlzdC9wcmltaXRpdmVNb2RlbHMvbW9kZWxBbnkuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9raXAvRHJvcGJveC9raXBfY29kZS9saWJyYXJpZXMvdG9vbGtpcF9tb2R1bGUvX2NvcmUvcGFja2FnZXMvbW9kZWwvZGlzdC9hcnJheU1vZGVscy9tU2V0LmpzIiwid2VicGFjazovLy8vVXNlcnMva2lwL0Ryb3Bib3gva2lwX2NvZGUvbGlicmFyaWVzL3Rvb2xraXBfbW9kdWxlL19jb3JlL3BhY2thZ2VzL21vZGVsL2Rpc3QvYXJyYXlNb2RlbHMvbW9kZWxNYW5hZ2VyLmpzIiwid2VicGFjazovLy8vVXNlcnMva2lwL0Ryb3Bib3gva2lwX2NvZGUvbGlicmFyaWVzL3Rvb2xraXBfbW9kdWxlL19jb3JlL3BhY2thZ2VzL21hbmFnZXJzL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9raXAvRHJvcGJveC9raXBfY29kZS9saWJyYXJpZXMvdG9vbGtpcF9tb2R1bGUvX2NvcmUvcGFja2FnZXMvbWFuYWdlcnMvZGlzdC9hc3luY01hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9raXAvRHJvcGJveC9raXBfY29kZS9saWJyYXJpZXMvdG9vbGtpcF9tb2R1bGUvX2NvcmUvcGFja2FnZXMvbWFuYWdlcnMvZGlzdC9fdHlwZWd1YXJkcy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2tpcC9Ecm9wYm94L2tpcF9jb2RlL2xpYnJhcmllcy90b29sa2lwX21vZHVsZS9fY29yZS9wYWNrYWdlcy9tb2RlbC9kaXN0L2hlbHBlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9raXAvRHJvcGJveC9raXBfY29kZS9saWJyYXJpZXMvdG9vbGtpcF9tb2R1bGUvX2NvcmUvcGFja2FnZXMvbW9kZWwvZGlzdC90cmFuc2Zvcm1zL2luZGV4LmpzIiwid2VicGFjazovLy8vVXNlcnMva2lwL0Ryb3Bib3gva2lwX2NvZGUvbGlicmFyaWVzL3Rvb2xraXBfbW9kdWxlL19jb3JlL3BhY2thZ2VzL21vZGVsL2Rpc3QvdHJhbnNmb3Jtcy9tb2RlbFRyYW5zZm9ybXMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9raXAvbnBtL2NvbXBldGVuY3ktbWF0cml4L25vZGVfbW9kdWxlcy9AdG9vbGtpcC9jcmVhdGUtZWxlbWVudHMvZGlzdC9jcmVhdGVJbnB1dHMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9raXAvbnBtL2NvbXBldGVuY3ktbWF0cml4L25vZGVfbW9kdWxlcy9AdG9vbGtpcC9pZGVudGlmaWFibGUvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2tpcC9ucG0vY29tcGV0ZW5jeS1tYXRyaXgvbm9kZV9tb2R1bGVzL0B0b29sa2lwL2lkZW50aWZpYWJsZS9kaXN0L190eXBlR3VhcmRzLmpzIiwid2VicGFjazovLy8vVXNlcnMva2lwL25wbS9jb21wZXRlbmN5LW1hdHJpeC9ub2RlX21vZHVsZXMvQHRvb2xraXAvaWRlbnRpZmlhYmxlL2Rpc3QvdW5pcXVlSWQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9raXAvbnBtL2NvbXBldGVuY3ktbWF0cml4L25vZGVfbW9kdWxlcy9AdG9vbGtpcC9jcmVhdGUtZWxlbWVudHMvZGlzdC9jcmVhdGVUYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2hlbHBlcnMvcGFyc2VGaWxlLnRzIiwid2VicGFjazovLy8uL3NyYy9oZWxwZXJzL21hdGNoZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL2xheW91dC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvbGlzdC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvbGlzdC9ncm91cC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvbGlzdC9jb21wZXRlbmN5L2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9maWx0ZXJzL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9zZWxlY3RvcnMvZmlsdGVycy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvZmlsdGVycy92aWV3cy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvZmlsdGVycy9maWx0ZXJzLnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9tYXRyaXgvaW5kZXgudHMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJnZXREZWZhdWx0IiwiZ2V0TW9kdWxlRXhwb3J0cyIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIl9fZXhwb3J0IiwiY29tcGFyYWJsZV8xIiwib2JqZWN0X2hlbHBlcnNfMSIsImhpc3RvcnlfMSIsIl9zaGFyZWRfMSIsImNvcmVfMSIsInNoYXJlZF90eXBlc18xIiwiX01vZGVsIiwiZGF0YSIsInRyYW5zZm9ybXMiLCJ0aGlzIiwiX2lubmVyTW9kZWwiLCJfZ2V0RGVmYXVsdFZhbHVlcyIsIl9faGlzdG9yeSIsIkhpc3RvcnlDaGFpbiIsIl9ldmVudCIsIk1vZGVsRXZlbnQiLCJfdHJhbnNmb3JtcyIsImlzTnVsbE9yVW5kZWZpbmVkIiwiaW1wb3J0IiwiY2JGdW5jIiwiYWRkRXZlbnRMaXN0ZW5lciIsInBheWxvYWQiLCJkaXNwYXRjaCIsIm1vZGVsVG9Db3B5RnJvbSIsIm1vZGVsVG9Db3B5VG8iLCJvbGRWYWx1ZSIsIm5ld1ZhbHVlIiwiZXZlbnRDaGFpbiIsImVxdWFscyIsImV2ZW50VHlwZSIsIl9jYWxjdWxhdGVDaGFuZ2VUeXBlIiwiX2Rpc3BhdGNoRXZlbnQiLCJvbGRWYWwiLCJuZXdWYWwiLCJwdXNoIiwiZ2V0RGF0YSIsIm5hdmlnYXRlQmFjayIsImxhc3RTdGF0ZSIsIm5hdmlnYXRlRm9yd2FyZCIsIm5leHRTdGF0ZSIsIl9pbm5lckdldERhdGEiLCJfY2xvbmVEYXRhIiwibmV3RGF0YSIsIl9pbm5lclNldERhdGEiLCJjbG9uZWREYXRhIiwiX3NlbmRVcGRhdGUiLCJhc3NpZ24iLCJfdXBkYXRlSGlzdG9yeSIsIl9ub3RpZnlMaXN0ZW5lcnMiLCJfYSIsInRyYW5zZm9ybSIsIl9nZXRBcHBsaWNhYmxlVHJhbnNmb3JtcyIsImluY29taW5nIiwiaW1wb3J0ZWREYXRhIiwiX2lubmVySW1wb3J0Iiwic2V0RGF0YSIsIm91dGdvaW5nIiwiX2lubmVyRXhwb3J0Iiwib3RoZXJNb2RlbCIsImlzTW9kZWwiLCJ0eCIsIm5ld01vZGVsIiwiQ3RvciIsImNvbnN0cnVjdG9yIiwiY2xvbmUiLCJkYXRhVG9XcmFwIiwiY3JlYXRlTW9kZWwiLCJhZGRNb2RlbExpc3RlbmVyIiwibW9kZWxUb0xpc3RlblRvIiwidGFyZ2V0IiwibWFwIiwidG9NYXAiLCJjYWxsYmFjayIsInNob3VsZFF1aXQiLCJvdXQiLCJpc0FycmF5IiwiZG9uZSIsImFyciIsInJlc3VsdCIsImNudCIsImdldEtleXMiLCJrZXlzIiwibGVuZ3RoIiwic3BsaWNlIiwiZmlsdGVyIiwidG9GaWx0ZXIiLCJzaG91bGRJbmNsdWRlIiwiZWxlbSIsInNyYyIsImdldE5leHRLZXkiLCJsYXN0S2V5IiwicHJvcE5hbWUiLCJuZXh0S2V5Iiwia2V5Q291bnQiLCJzZXREaWN0VmFsdWUiLCJ2YWwiLCJjdXJPYmoiLCJrIiwiaW5pdFZhbCIsImdldFByb3RvdHlwZSIsIm9iaiIsIl9fcHJvdG9fXyIsIl9tb2RlbF8xIiwidGVzdCIsInN0eWxlX2hlbHBlcnNfMSIsImh0bWxfaGVscGVyc18xIiwiYXN5bmNfMSIsIl9MaWJyYXJ5IiwiX3Jhd1N0eWxlcyIsIl9lbGVtcyIsIl9sYXN0SWQiLCJ0b1N0cmluZyIsInVuaXF1ZUtleSIsInN0eWxlcyIsImZvcmNlIiwiZXhpc3RpbmdTdHlsZXMiLCJfZ2V0T3JDcmVhdGVFeGlzdGluZ1N0eWxlcyIsIm1lcmdlZFN0eWxlcyIsIl9tZXJnZSIsIl9zaG91bGRBZGQiLCJfdXBkYXRlRWxlbXMiLCJpc0VtcHR5T2JqZWN0IiwicmVtb3ZlRWxlbWVudCIsImNvbWJpbmVTdHlsZXMiLCJzdHJpbmdpZnlTdHlsZXMiLCJzdHJpbmdpZmllZFN0eWxlcyIsIl9zdHJpbmdpZnkiLCJjSWR4IiwiX2dldE9yQ3JlYXRlRWxlbSIsImlubmVySFRNTCIsImNyZWF0ZVN0eWxlRWxlbWVudCIsIl9pZFN1ZmZpeCIsIm5leHRSZW5kZXIiLCJ0aGVuIiwiZG9jdW1lbnQiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJzZXR1cE1vZGVsV3JhcHBpbmciLCJoaWRlT3JVbmhpZGVMZXZlbCIsInVwZGF0ZVN0YXRlIiwiU1RBVEUiLCJtb2RlbF8xIiwiX1N0YXRlIiwiTU9iamVjdCIsImNhdGVnb3JpZXMiLCJsZXZlbHMiLCJjb21wZXRlbmNpZXMiLCJoaWRkZW5MZXZlbHMiLCJkaXNwbGF5IiwiY3JlYXRlTW9kZWxUcmFuc2Zvcm0iLCJNU2V0IiwiTU1hbmFnZXIiLCJzdGF0ZSIsImN1clN0YXRlIiwidiIsImluZGV4T2YiLCJsZXZlbCIsImN1ckhpZGRlbkxldmVscyIsImlkeCIsInNldCIsIndpbmRvdyIsIl9jb3JlQ3JlYXRlRWxlbWVudF8xIiwiX2NvbnN0YW50c18xIiwiY3JlYXRlU1ZHRWxlbWVudCIsImRlZiIsImtleWVkRWxlbXMiLCJ0eXBlIiwibmFtZXNwYWNlIiwiU1ZHX05BTUVTUEFDRSIsIl9jb3JlQ3JlYXRlRWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjcmVhdGVFbGVtZW50cyIsIm9ianMiLCJfY29yZUNyZWF0ZUVsZW1lbnRzIiwiY3JlYXRlQ3VzdG9tRWxlbWVudCIsInJlY3Vyc2VWaWEiLCJjcmVhdGVTVkdFbGVtZW50cyIsImRlZnMiLCJwbGFjZWhvbGRlcnNfMSIsIlN0eWxlU3RyaW5naWZpZXIiLCJfU3R5bGVTdHJpbmdpZmllciIsImN1clN0ciIsImNzc0RlY2xhcmF0aW9uIiwic2VsZWN0b3IiLCJjbHNTdHIiLCJnZW5lcmF0ZUNvbnRlbnRGb3JTdHlsZSIsImF0dHIiLCJBcnJheSIsIl9nZW5lcmF0ZUNvbnRlbnRGb3JGb250RGVmaW5pdGlvbiIsIl9nZW5lcmF0ZUNvbnRlbnRGb3JDc3NDbGFzcyIsInN0eWxlU3RyaW5nIiwiX2J1aWxkQ3NzQ2xhc3NDb250ZW50U3RyaW5nIiwiX2Zvcm1hdENsYXNzIiwiZm9udE5hbWUiLCJzcmNGaWxlcyIsInNyY0ZpbGUiLCJfZm9ybWF0Rm9udGZhY2UiLCJ1cmwiLCJmb3JtYXQiLCJmb250RmFtaWx5Iiwiam9pbiIsImlzR2VuZXJhdGluZ0FuaW1hdGlvbiIsInByb3BlcnR5VmFsdWUiLCJwcm9wZXJ0eU5hbWUiLCJfYnVpbGRBbmltYXRpb25WYWx1ZVN0cmluZyIsIl9mb3JtYXRQcm9wZXJ0eSIsInBWYWx1ZSIsInBOYW1lIiwianNQcm9wTmFtZSIsInByb3AiLCJ0b0xvd2VyQ2FzZSIsInNlZ21lbnRzIiwic3BsaXQiLCJfZ2V0VXBkYXRlZFNlZ21lbnQiLCJzZWdtZW50IiwiaXNGaXJzdCIsIl9pc0Nzc1ByZWZpeCIsInBsYWNlaG9sZGVyIiwiZmluZENvbnRhaW5lZFBsYWNlaG9sZGVyIiwicmVwbGFjZSIsImRlZmF1bHRWYWx1ZSIsImdldFByb3BlcnR5TmFtZSIsImdldENzc1Byb3BlcnR5TmFtZSIsInN0cmluZ2lmeSIsInN0cmluZ2lmeVN0eWxlIiwiZGVmaW5pdGlvbiIsInByaW1pdGl2ZV9oZWxwZXJzXzEiLCJTaG9ydERhdGVUcmFuc2Zvcm0iLCJEYXRlIiwic2hvcnREYXRlIiwiU2hvcnREYXRlVGltZVRyYW5zZm9ybSIsInNob3J0RGF0ZVRpbWUiLCJEZWZhdWx0RGF0ZVRyYW5zZm9ybSIsIkRhdGFNYW5hZ2VyIiwiX2RhdGEiLCJfcG9wdWxhdGVXaXRoRGVmYXVsdERhdGEiLCJhZGQiLCJkYXR1bSIsImNvbnRhaW5zIiwiaWQiLCJtYXBGdW5jIiwiZGF0YUFzQXJyYXkiLCJ0b0FycmF5IiwibWFuaXB1bGF0ZV8xIiwiaXNDbG9uZWFibGUiLCJpc0Z1bmN0aW9uIiwiaXNNYXBwYWJsZSIsImlzT2JqZWN0IiwiaXNFbXB0eUFycmF5IiwiY29tYmluZU9iamVjdHMiLCJvYmpBIiwib2JqQiIsImRlZXAiLCJyZXQiLCJfbG9vcFRocnUiLCJvYmpUb0NvbWJpbmUiLCJvdXRwdXRPYmoiLCJ0bXAiLCJyZWNvbmNpbGVPcHRpb25zIiwib3B0aW9ucyIsImRlZmF1bHRzIiwib3B0IiwicGFkVG9EaWdpdHMiLCJ0b1BhZCIsIm51bWJlck9mRGlnaXRzIiwib3V0QXJyIiwiZnVsbEhleFN0cmluZyIsIm91dEhleFN0cmluZyIsImNoYXJBdCIsInN0ciIsInN1YnN0ciIsInJlc3QiLCJzdWJzdHJpbmciLCJpc051bWVyaWMiLCJwaWVjZSIsImRlbGltIiwicGMiLCJzcGxpdF9hcnIiLCJhZGRQaWVjZSIsIm5leHRQaWVjZSIsInRpdGxlQ2FzZSIsIndvcmRzIiwidyIsInRvVXBwZXJDYXNlIiwic2VudGVuY2VDYXNlIiwidHJpbSIsInN0cmlwU3BhY2VzIiwicmVwbGFjZW1lbnRzIiwic3RyaW5nQXJyIiwibnVtYmVyIiwibG9va2luZ0Zvck51bWJlciIsImNoYXIiLCJhZGRMZWFkaW5nWmVyb2VzIiwiY291bnQiLCJ1bnBhZGRlZCIsInoiLCJzdHJpcEhUTUwiLCJqb2luQ2hhciIsInRvSm9pbiIsImlzSUVsZW1EZWZpbml0aW9uIiwiaXNJbnRlcmZhY2UiLCJjaGlsZHJlbiIsImNscyIsImNvbnRlbnQiLCJwYXJlbnQiLCJpc0NsYXNzRGVmaW5pdGlvbiIsImlzU3RyaW5nIiwiU3R5bGVDb21iaW5lciIsIl9TdHlsZUNvbWJpbmVyIiwiX2NvbWJpbmVTdHlsZXMiLCJvdXRTdHlsZXMiLCJzdHlsZSIsImN1ckNscyIsIl9jb21iaW5lRm9udFN0eWxlIiwiX2NvbWJpbmVTdGFuZGFyZFN0eWxlIiwibWVyZ2VkRGVmIiwiX2NvbWJpbmVTdHlsZSIsImV4aXN0aW5nRm9udHMiLCJjdXJGb250cyIsImNvbmNhdCIsInN0YXJ0aW5nU3R5bGVzIiwiX21lcmdlQ2xhc3NEZWZpbml0aW9uIiwiZGVmaW5pdGlvbnMiLCJjb21iaW5lIiwiZ2V0Q2xhc3NhYmxlRWxlbWVudCIsImlzRHJhd2FibGUiLCJiYXNlIiwiZ2V0Q2xhc3MiLCJnZXRBdHRyaWJ1dGUiLCJnZXRDbGFzc2VzIiwiYWRkQ2xhc3MiLCJjbHNOYW1lIiwiZSIsInNldEF0dHJpYnV0ZSIsInJlbW92ZUNsYXNzIiwibGVuIiwiYWRkT3JSZW1vdmVDbGFzcyIsInNob3VsZEFkZCIsImhhc0NsYXNzIiwiY3VyX2NscyIsImFkZENsYXNzZXMiLCJjbHNOYW1lcyIsImNsYXNzZXMiLCJjbGVhckNsYXNzIiwidG9nZ2xlQ2xhc3MiLCJzZXRQcm9wZXJ0eSIsIml0ZW0iLCJjc3MiLCJzSWR4IiwicnVsZXMiLCJydWxlIiwic3R5bGVTaGVldHMiLCJhbGwiLCJzZWxlY3RvclRleHQiLCJnZXRQcm9wZXJ0eSIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiY3VycmVudFN0eWxlIiwiU3R5bGVQbGFjZWhvbGRlcnMiLCJfU3R5bGVQbGFjZWhvbGRlcnMiLCJmbGF0dGVuZWRTdHlsZXMiLCJzdGFuZGFyZCIsIndpdGhQbGFjZWhvbGRlcnMiLCJwVmFsIiwiX2NvbnRhaW5zUGxhY2Vob2xkZXIiLCJleGVjIiwic3BsaXRQbGFjZWhvbGRlciIsInN0eWxlRGljdCIsImluZGV4IiwidW51c2VkIiwicmVwbGFjZVdpdGgiLCJtYXRjaFJlZ2V4IiwiUmVnRXhwIiwiY2xvbmVPYmplY3QiLCJzcGxpdFN0eWxlcyIsInNwbGl0T3V0UGxhY2Vob2xkZXJzIiwiaW5kZXhCeVBsYWNlaG9sZGVyIiwiaW5kZXhTdHlsZURpY3RCeVBsYWNlaG9sZGVyIiwicmVwbGFjZVBsYWNlaG9sZGVycyIsIm1hcEluZGV4VG9TdHlsZSIsInN0cmluZ2lmaWVyXzEiLCJTdHlsZUVsZW1lbnRHZW5lcmF0b3IiLCJfU3R5bGVFbGVtZW50R2VuZXJhdG9yIiwiX2NyZWF0ZUVsZW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImFkZFRvRG9jdW1lbnQiLCJfY3JlYXRlRWxlbWVudEZvclN0eWxlcyIsInN0cmluZ2lmaWVkIiwiY3JlYXRlRWxlbWVudEZvclN0eWxlcyIsImlzSFRNTEVsZW1lbnQiLCJIVE1MRWxlbWVudCIsImhhc09mZnNldHMiLCJvZmZzZXRIZWlnaHQiLCJpc1NlbGVjdGFibGUiLCJzZWxlY3QiLCJpc0VxdWF0YWJsZSIsImlzQ29tcGFyYWJsZSIsImNvbXAiLCJsZXNzVGhhbiIsImdyZWF0ZXJUaGFuIiwiX2xpYnJhcnlfMSIsIl9TdHlsZUxpYnJhcnkiLCJTdHlsZUxpYnJhcnkiLCJoaXN0b3J5Tm9kZV8xIiwiX2N1ck5vZGUiLCJfcHJldmVudEFkZGl0aW9ucyIsIm5vZGUiLCJIaXN0b3J5Tm9kZSIsIl9zdGFydCIsIl9lbmQiLCJfY2xlYXJUb0N1cklkeCIsIm5leHQiLCJwcmV2aW91cyIsImNiIiwiX2hhbmRsZU5hdmlnYXRlQ2FsbGJhY2siLCJuZXdTdGF0ZSIsImNvbWJpbmVkU3RhdGUiLCJpZGVudGlmaWFibGVfMSIsIm1vZGVsT2JqZWN0XzEiLCJNSWRlbnRpZmlhYmxlIiwic3VmZml4IiwiX3VuaXF1ZUtleSIsImdlbmVyYXRlVW5pcXVlSWQiLCJsYXN0SWQiLCJyZWdpc3RlclVuaXF1ZUlkIiwiZGF0YVRvQ29weSIsInN1cGVyIiwiX3VwZGF0ZUxhc3RJZCIsIm5ld0lkIiwiX2dlbmVyYXRlTmV3SWQiLCJhYnN0cmFjdENsYXNzZXNfMSIsIl9LZXllZE1vZGVsIiwibW9kZWwiLCJfaW5uZXJHZXQiLCJfZ2V0VmFsdWUiLCJ1bmRlZmluZWQiLCJfbWFwIiwiX3NldFZhbHVlIiwiZ2V0VHlwZSIsIl9pbm5lclNldCIsIm9sZE1vZGVsIiwiZ2V0TW9kZWwiLCJfd3JhcEluTW9kZWwiLCJtb2RlbFZhbHVlIiwidXBkYXRlZFZhbCIsInVwZGF0ZWRWYWx1ZSIsIm91dFZhbHVlIiwiZXhwb3J0IiwiTUFycmF5IiwiX0tleWVkTW9kZWxzIiwib3V0cHV0IiwiX3Nob3VsZFNwbGljZSIsImlzVW5kZWZpbmVkIiwiZWxlbWVudCIsInByaW1pdGl2ZU1vZGVsc18xIiwiU2VsZWN0b3IiLCJwcm9jZXNzb3IiLCJmaWx0ZXJzIiwiX2FwcGx5RnVuY3MiLCJfbWFwRnVuY3MiLCJfcHJvY2Vzc29yIiwiX2xhc3RNb2RlbCIsIl9zZXR1cEZpbHRlcnMiLCJfYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50VHlwZXMiLCJfZmlsdGVyTWFwIiwiYXJyYXlUb01hcCIsImN1c3RvbUZpbHRlcnMiLCJmaWx0ZXJGdW5jIiwiY2FsbGJhY2tzIiwiZXZlbnQiLCJfY3JlYXRlUmVzZWxlY3RFdmVudCIsImFwcGx5IiwiX25vdGlmeUFwcGx5U2VsZWN0b3JzIiwiX25vdGlmeU1hcFNlbGVjdG9ycyIsIl9ub3RpZnlDYWxsYmFja3MiLCJfaXNGaWx0ZXJlZCIsInByb2Nlc3NlZERhdGEiLCJzaXplIiwiaGFzIiwiY2YiLCJjYnMiLCJza2lwSW5pdGlhbE5vdGlmeSIsInJlc2VsZWN0IiwibGlzdGVuYWJsZSIsInJhd1NlbGVjdCIsInJhd0RhdGEiLCJNb2RlbCIsIm9iamVjdE1vZGVsc18xIiwiYXJyYXlNb2RlbHNfMSIsIl9jcmVhdGVNb2RlbEZvckRhdGEiLCJpc1ByaW1pdGl2ZSIsIk1QcmltaXRpdmUiLCJpc0RhdGUiLCJNRGF0ZSIsImlzSWRlbnRpZmlhYmxlIiwiX2NyZWF0ZUFycmF5TW9kZWxGb3JEYXRhIiwic2VsZWN0Q29tcGV0ZW5jeSIsInNlbGVjdENhdGVnb3JpZXMiLCJzZWxlY3RVbmhpZGRlbkxldmVscyIsInNlbGVjdExldmVscyIsInNlbGVjdENvbXBldGVuY2llcyIsInN0YXRlXzEiLCJjb21wZXRlbmN5SWQiLCJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInN0ZXAiLCJyZWplY3RlZCIsImFkb3B0IiwibG9hZEZpbGVfMSIsInBhcnNlRmlsZV8xIiwibGF5b3V0XzEiLCJyZW5kZXJMYXlvdXQiLCJpYyIsImxvYWRFbmdDb21wZXRlbmNpZXMiLCJwYXJzZWQiLCJwYXJzZUZpbGUiLCJsb2FkTWFuYWdlckNvbXBldGVuY2llcyIsInNlcnZlcl8xIiwibG9hZEZpbGUiLCJmaWxlbmFtZSIsImFqYXgiLCJhamF4RGV0YWlscyIsIl9pbm5lckFqYXgiLCJyZXF1ZXN0IiwiX2dldFhtbFJlcXVlc3RPYmplY3QiLCJYTUxIdHRwUmVxdWVzdCIsIkFjdGl2ZVhPYmplY3QiLCJfYXNzaWduWG1sUmVxdWVzdENhbGxiYWNrcyIsInN1Y2Nlc3NDYiIsImVycm9yQ2IiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwiX2lzVmFsaWRSZXNwb25zZSIsInJlc3BvbnNlQ29kZSIsInN0YXR1cyIsInJlc3BvbnNlVGV4dCIsInBhcmFtcyIsIl9zZW5kWG1sUmVxdWVzdCIsInJlcXVlc3RVcmwiLCJoZWFkZXJQYXJhbXMiLCJvcGVuIiwiX2FkZEhlYWRlckRhdGEiLCJzZXRSZXF1ZXN0SGVhZGVyIiwidXJsUGFyYW1zIiwiX3NldFJlcXVlc3RIZWFkZXIiLCJyZXFIZWFkZXJUeXBlIiwib3V0UGFyYW1zIiwiRm9ybURhdGEiLCJKU09OIiwic2VuZCIsImlzRmFsc3kiLCJmYWxzeVR5cGVzVG9JZ25vcmUiLCJpZ25vcmVkVHlwZSIsImlzVHJ1dGh5IiwiZmFsc3lUeXBlc1RvVHJlYXRBc1RydXRoeSIsImZ1bGxfaW1wIiwicmVxX21hdGNoIiwiaGFzX2V4dHJhIiwiaXNLZXlvZiIsInJlZmVyZW5jZSIsImlzTnVtYmVyIiwiaXNCb29sZWFuIiwiaXNQcm9taXNlIiwiaXNQcm9taXNlTGlrZSIsImlzU3RhbmRhcmRFbGVtZW50IiwiU1ZHRWxlbWVudCIsImRyYXciLCJpc0RyYXdhYmxlRWxlbWVudCIsImlzVXBkYXRhYmxlIiwiY29tYmluZV8xIiwiX3R5cGVndWFyZHNfMSIsImNsb25lUG9pbnQiLCJwb2ludCIsIngiLCJ5IiwidG9DbG9uZSIsImN1c3RvbUNsb25lcnMiLCJ0eXBlR3VhcmQiLCJjbG9uZXIiLCJfY2xvbmVQcmltaXRpdmUiLCJfY2xvbmVEYXRlIiwiX2Nsb25lQXJyYXkiLCJfY2xvbmVPYmplY3QiLCJjbG9uZVJlY3QiLCJyZWN0IiwiaCIsImNsb25lUG9pbnRBcnJheSIsInBvaW50cyIsInB0IiwicGFyc2UiLCJwcmltaXRpdmUiLCJkYXRlIiwidmFsdWVPZiIsInByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJzaGFsbG93Q2xvbmVPYmplY3QiLCJhc0h0bWwiLCJwcmVmaXgiLCJuZXdMaW5lQ2hhciIsInRhYkNoYXIiLCJ2YWxTdHIiLCJfZm9ybWF0IiwiX2Zvcm1hdFByb3BlcnR5QXNIVE1MIiwiX2Zvcm1hdFByb3BlcnR5QXNQbGFpblRleHQiLCJlcXVhbGl0eUZ1bmN0aW9uIiwicmVtb3ZlRWxlbUZyb21BcnIiLCJlcXVhbCIsImEiLCJiIiwibnVtYmVyc18xIiwic3RyaW5nc18xIiwiZGF0ZURpZmYiLCJzaWduZWQiLCJpbmNsdWRlVGltZSIsInJldHVybk1pbGxpIiwibXMiLCJkaWZmIiwiY2xlYXJUaW1lSW5mbyIsImdldFRvZGF5IiwiaW5jbHVkZV90aW1lIiwiY2xlYXJUWiIsIm91dERhdGUiLCJkYXRlU3RyIiwiZHQiLCJ5ciIsImdldFNob3J0WWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsInNob3J0VGltZSIsIndpdGhFeHRyYSIsIm1pbiIsIm1pbl9zdHIiLCJob3VycyIsImhhbGYiLCJnZXRNaW51dGVzIiwiZ2V0SG91cnMiLCJpc0xlYXBZZWFyIiwieWVhciIsImdldEZ1bGxZZWFyIiwiaXNTYW1lRGF0ZSIsImRhdGVBIiwiZGF0ZUIiLCJfdXBkYXRlRGF0ZURpZmZlcmVuY2VzIiwiZGl2aXNvciIsInN0YXJ0S2V5IiwiZW5kS2V5IiwiZGl2aWRlbmQiLCJyZW1haW5kZXIiLCJxdW90aWVudCIsIk1hdGgiLCJmbG9vciIsIl9jcmVhdGVQbHVyYWxTdHJpbmciLCJhbW91bnQiLCJzaW5ndWxhciIsInBsdXJhbCIsIkluY2x1c2l2aXR5RW51bSIsIm1vbnRoRGlmZiIsImluY2x1c2l2aXR5IiwieWVhckRpZmYiLCJidXNpbmVzc0RhdGVEaWZmIiwiZGF5T2ZXZWVrIiwiZGlyIiwiZ2V0RGF5Iiwid2Vla2VuZERheXMiLCJhYnMiLCJpbnB1dERhdGVGbXQiLCJpbnB1dFRvRGF0ZSIsImlEdCIsImlUaW1lIiwiZHRBcnIiLCJ0aW1lQXJyIiwic2V0SG91cnMiLCJzZXRNaW51dGVzIiwiaW5wdXRUaW1lRm10IiwidGltZSIsImluY2x1ZGVTZWNvbmRzIiwibWludXRlcyIsInNlY29uZHMiLCJnZXRTZWNvbmRzIiwid2l0aF9leHRyYSIsInN0b3B3YXRjaERpc3BsYXkiLCJtaWxsaSIsIm5vTGVhZGluZ1plcm9zIiwibm9CbGFua3MiLCJzZWNfc3RyIiwiaHJfc3RyIiwiZGF5cyIsInVwZGF0ZWRTdG9wd2F0Y2hEaXNwbGF5IiwiZGlmZnMiLCJfcmV0cmlldmVDb3VudHNGcm9tTWlsbGkiLCJyZW1haW5pbmciLCJtaWxsaXNlY29uZHMiLCJzaG93TWlsbGkiLCJhZGRUb0RhdGUiLCJjb3VudHMiLCJzZXRNaWxsaXNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJzZXRTZWNvbmRzIiwic2V0RGF0ZSIsIm1vbnRocyIsInNldE1vbnRoIiwieWVhcnMiLCJzZXRGdWxsWWVhciIsImdldE1vbnRoTmFtZSIsInNob3J0IiwiZ2V0RGF5T2ZXZWVrIiwiZ2V0TGVuZ3RoT2ZNb250aEluRGF5cyIsImlzV2Vla2VuZCIsImlzVG9kYXkiLCJnZXREaXNwbGF5RHVyYXRpb24iLCJkaWN0aW9uYXJ5VG9BcnJheSIsImRpY3QiLCJhcnJheSIsIk1hcCIsImNyZWF0ZV9lbGVtZW50c18xIiwiZmlsZURldGFpbHMiLCJfaW5uZXJMb2FkRmlsZSIsInN1Y2Nlc3MiLCJlcnJvciIsInNhdmVGaWxlIiwiX2lubmVyU2F2ZUZpbGUiLCJibG9iIiwiQmxvYiIsIl9nZW5lcmF0ZURvd25sb2FkIiwiZmlsZSIsIm5hdmlnYXRvciIsIm1zU2F2ZU9yT3BlbkJsb2IiLCJtc1NhdmVCbG9iIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwiYm9keSIsImNsaWNrIiwicmVtb3ZlQ2hpbGQiLCJzdHlsZV9saWJyYXJpZXNfMSIsIl90eXBlR3VhcmRzXzEiLCJfc2V0RWxlbUNsYXNzTmFtZSIsIl9zZXRFbGVtU3R5bGVzIiwic3R5bGVBcnJheSIsIl9oYW5kbGVTZWxlY3RvciIsIl9pbm5lclNldEVsZW1TdHlsZXMiLCJmbGF0dGVuU3R5bGVzIiwiY3JlYXRlQ3NzQ2xhc3MiLCJfc2V0RWxlbUF0dHJpYnV0ZSIsIl9pc0ZvY3VzYWJsZSIsImZvY3VzYWJsZSIsImV2ZW50TGlzdGVuZXJzIiwiX2lubmVyQWRkRWxlbUNoaWxkcmVuIiwiX2lubmVyQWRkRWxlbUNoaWxkIiwiY29uc29sZSIsIndhcm4iLCJjaGlsZCIsImRyYXdhYmxlIiwiX2NyZWF0ZURyYXdhYmxlIiwiY3RvciIsIl9jcmVhdGVTdGFuZGFyZEVsZW1lbnQiLCJjcmVhdGVFbGVtZW50TlMiLCJfc2V0RWxlbUlkZW50ZmllcnMiLCJfc2V0RWxlbUNsYXNzIiwiX2lubmVyU2V0RWxlbUNsYXNzIiwiX3NldEVsZW1BdHRyaWJ1dGVzIiwiX25lZWRzVGFiSW5kZXgiLCJ0YWJJbmRleCIsInRhYmluZGV4IiwiX2lubmVyU2V0QXR0cmlidXRlIiwicGFpciIsIl9zZXRFbGVtU3R5bGUiLCJfc2V0RXZlbnRMaXN0ZW5lcnMiLCJrZXlwcmVzcyIsImNsaWNrRnVuYyIsImtleUNvZGUiLCJwcmV2ZW50RGVmYXVsdCIsInByZXZlbnRGb2N1cyIsIm1vdXNlZG93biIsImJsdXIiLCJtb3VzZXVwIiwiZm9jdXMiLCJsaXN0ZW5lciIsIl9hZGRFbGVtQ2hpbGRyZW4iLCJfc2V0RWxlbUJhc2VDb250ZW50IiwiaW5uZXJUZXh0IiwiX3NldEVsZW1TZWxlY3RvciIsIl9hcHBlbmRFbGVtVG9QYXJlbnQiLCJhcHBseUNiIiwiaXNTZWxlY3RvciIsIlRIRU1FX0JHX0NPTE9SX0NMUyIsIlRIRU1FX0NPTE9SX0NMUyIsIlRIRU1FX0NPTE9SX0hPVkVSX0NMUyIsImNvbWJpbmVyXzEiLCJTdHlsZUZsYXR0ZW5lciIsIl9TdHlsZUZsYXR0ZW5lciIsIl9mbGF0dGVuU3R5bGVzIiwibGFzdFNlbGVjdG9yIiwibmV3U2VsZWN0b3JzIiwiX2J1aWxkTmV3U2VsZWN0b3JzIiwiY2FsY3VsYXRlZFN0eWxlcyIsIl9mbGF0dGVuQ2xhc3NEZWZpbml0aW9uIiwiY2xhc3NEZWYiLCJ0b3BTdHlsZXMiLCJzdWJuZXN0ZWRTdHlsZXMiLCJjdXJTZWxlY3RvciIsIl9idWlsZE5ld1NlbGVjdG9yIiwibmV3U2VsZWN0b3IiLCJmbGF0dGVuIiwiU3R5bGVSdWxlSGVscGVyIiwiX1N0eWxlUnVsZUhlbHBlciIsInNraXBFeGlzdGluZ1NlbGVjdG9yIiwiX2dldENzc1J1bGUiLCJjc3NSdWxlIiwiX2dldEV4aXN0aW5nU2VsZWN0b3IiLCJzdHlsZXNoZWV0IiwiX2dldFJ1bGVzIiwiZm91bmRSdWxlIiwiX3NlYXJjaFJ1bGVzRm9yU2VsZWN0b3IiLCJlcnIiLCJnZXRDc3NSdWxlIiwiY3NzXzEiLCJzdHlsZUVsZW1lbnRfMSIsIlRyYW5zaXRpb25Db250cm9sbGVyIiwiX1RyYW5zaXRpb25Db250cm9sbGVyIiwiX2xhc3RDbHNJZCIsIl9nZW5lcmF0ZWRDbGFzc2VzIiwiZGV0YWlscyIsInN0YXJ0TmFtZSIsIl9nZXRDbGFzcyIsInN0YXJ0IiwiZW5kIiwidHJhbnNpdGlvbiIsImVuZE5hbWUiLCJfYW5pbWF0ZSIsIl9yZXBsYWNlUGxhY2Vob2xkZXJzIiwic3RyRGVmIiwiX2dlbmVyYXRlUmFuZG9tQ2xhc3NOYW1lIiwiX2NyZWF0ZVRyYW5zaXRpb25DbGFzcyIsImNsYXNzTmFtZSIsIl9zdHlsZUVsZW0iLCJfY3JlYXRlU3R5bGVFbGVtIiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0VG9wIiwid2FpdCIsImRlbGF5IiwiX3JlbW92ZUVuZENsYXNzIiwic3RhcnRTdHlsZSIsImVuZFN0eWxlIiwidGltZUluTXMiLCJzZXRUaW1lb3V0IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZ2xvYmFsT2Zmc2V0TGVmdCIsInVzZVN0YW5kYXJkUGFyZW50IiwiX2F1eEdsb2JhbE9mZnNldCIsImdsb2JhbE9mZnNldFRvcCIsImdsb2JhbE9mZnNldHMiLCJsZWZ0IiwidG9wIiwib2Zmc2V0IiwicGFyZW50Tm9kZSIsIm9mZnNldFBhcmVudCIsImdldFNjcm9sbFBvc2l0aW9uIiwicGFnZVhPZmZzZXQiLCJzY3JvbGxMZWZ0IiwicGFnZVlPZmZzZXQiLCJzY3JvbGxUb3AiLCJtZWFzdXJlRWxlbWVudCIsImFkZGVkIiwib3JpZ09wYWNpdHkiLCJvcGFjaXR5IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiZmluZENvbW1vblBhcmVudCIsImVsZW1fYSIsImVsZW1fYiIsInBhcmVudF9hIiwicGFyZW50X2IiLCJtb3ZlUmVsVG9FbGVtIiwicmVmIiwibm9fbW92ZSIsIm9mZnNldF9tZSIsIm9mZnNldF90aGVtIiwiZHgiLCJkeSIsInBvc2l0aW9uIiwiaXNJbkRPTSIsImlzQ2hpbGQiLCJyb290IiwicmVtb3ZlU3ViY2xhc3NGcm9tQWxsRWxlbWVudHMiLCJzdWJjbHMiLCJleGNlcHRpb24iLCJlbGVtcyIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJpc0NoaWxkRXZlbnRUYXJnZXQiLCJldiIsImFwcGVuZENoaWxkcmVuIiwia2lkcyIsImNsZWFyQ2hpbGRyZW4iLCJtb3ZlRWxlbVJlbGF0aXZlUG9zaXRpb24iLCJkaXN0YW5jZSIsInBhcnNlSW50IiwicmVzZXRQYWdlRm9jdXMiLCJvbGRUYWJJbmRleCIsImh0bWxFbGVtIiwicmFuZ2UiLCJjcmVhdGVSYW5nZSIsInNlbGVjdE5vZGVDb250ZW50cyIsInNlbGVjdGlvbiIsImdldFNlbGVjdGlvbiIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwiSFRNTF9UQUIiLCJlbmNvZGVGb3JIVE1MIiwiZGVjb2RlRnJvbUhUTUwiLCJyZXBsYWNlRWxlbVdpdGhFbGVtIiwiZWxlbVRvUmVwbGFjZSIsInJlcGxhY2VtZW50IiwibmV4dENoaWxkIiwibmV4dFNpYmxpbmciLCJpbnNlcnRCZWZvcmUiLCJpc1Zpc2libGUiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImdldEVsZW1lbnRzQnlTZWxlY3RvciIsImxpc3QiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZG9lc0VsZW1lbnRNYXRjaFNlbGVjdG9yIiwibWF0Y2hlcyIsIm9yaWciLCJjb21wYXJpc29uIiwibGVzc2VyVGhhbiIsIlNvcnRPcmRlckVudW0iLCJfUGxhY2Vob2xkZXJMaWJyYXJ5IiwiYXJndW1lbnRzIiwiX2luZGV4ZWRQbGFjZWhvbGRlcnMiLCJ1bmlxdWVJZHgiLCJjb21ibyIsImluZGV4ZWQiLCJfaW5kZXhCeVBsYWNlaG9sZGVyIiwiYnVpbHRTdHlsZXMiLCJfdXBkYXRlUGxhY2Vob2xkZXJFbGVtIiwiX2Zvcm1hdEVsZW1TdHJpbmciLCJvcHRzIiwiYmFzZUVsZW0iLCJfcmVwbGFjZVNpbmdsZUVsZW1QbGFjZWhvbGRlcnMiLCJfcmVwbGFjZVBsYWNlaG9sZGVyRm9yS2V5IiwiX3JlcGxhY2VQbGFjZWhvbGRlcnNGb3JNdWx0aXBsZUtleXMiLCJfIiwicmVwbGFjZWRTdHlsZXMiLCJfcmVwbGFjZVBsYWNlaG9sZGVyVmlhSW5kZXgiLCJfZmluZE1hdGNoZXMiLCJtYXRjaGVkRWxlbXMiLCJtYXRjaGVkRWxlbSIsInNlbGVjdG9ycyIsIl9maW5kTWF0Y2giLCJub2RlUXVldWUiLCJjdXJyZW50Tm9kZSIsImNoaWxkTm9kZXMiLCJtYXBwZWRTdHlsZXMiLCJQbGFjZWhvbGRlckxpYnJhcnkiLCJfRm9udExpYnJhcnkiLCJGb250TGlicmFyeSIsInN0eWxlTGlicmFyeV8xIiwiZ2V0TmV4dElkIiwiZ2V0RWxlbUZvcktleSIsImFkZEhpZGRlbkNsYXNzIiwiYWRkVW5zZWxlY3RhYmxlQ2xhc3MiLCJ1c2VyU2VsZWN0IiwibW96VXNlclNlbGVjdCIsIndlYmtpdFVzZXJTZWxlY3QiLCJraHRtbFVzZXJTZWxlY3QiLCJvVXNlclNlbGVjdCIsImNvZGVfZXZlbnRfMSIsIkNvZGVFdmVudCIsIl9uYW1lIiwiX2xpc3RlbmVycyIsImRpc3BhdGNoRGF0YSIsImxpc3RlbmVycyIsImlzTGlzdGVuYWJsZSIsIl9VbmRvQ2hhaW4iLCJjdHJsS2V5IiwiX3Nob3VsZElnbm9yZUV2ZW50Iiwic2hpZnRLZXkiLCJyZWRvIiwidW5kbyIsInVuZG9hYmxlIiwicmV2ZXJzZUZ1bmN0aW9uIiwiZm9yd2FyZEZ1bmN0aW9uIiwiaWRlbnRpZmlhYmxlTW9kZWxfMSIsInNlbGVjdG9yc18xIiwiaXNQcmltaXRpdmVNb2RlbCIsImlzRGF0ZU1vZGVsIiwiaXNPYmplY3RNb2RlbCIsImlzQXJyYXlNb2RlbCIsImlzTWFuYWdlck1vZGVsIiwiaXNJZGVudGlmaWFibGVNb2RlbCIsIklkZW50aWZpZXJBc3NpZ25lciIsIl9JZGVudGlmaWVyQXNzaWduZXIiLCJfbGFzdElkcyIsInBpZWNlcyIsIm51bWVyaWNJZCIsIk5hTiIsInBhcnNlZFBpZWNlIiwiaXNOYU4iLCJzdXBwbGVtZW50YWxTdWZmaXgiLCJfY2xlYW5VbmlxdWVLZXkiLCJuZXh0SWQiLCJpZFRvUmVnaXN0ZXIiLCJfZ2V0TnVtZXJpY0lkIiwicmVnaXN0ZXJJZCIsIl9rZXllZE1vZGVsXzEiLCJmaW5kSW5kZXgiLCJkYXRlVHJhbnNmb3Jtc18xIiwiY2xvbmVkTW9kZWwiLCJhc1R5cGUiLCJhcnJheU1vZGVsXzEiLCJtYW5hZ2Vyc18xIiwidG9EYXRhTWFuYWdlciIsInRvRGljdGlvbmFyeSIsIl9pc1JlbW92YWwiLCJyZW1vdmUiLCJfaXNSZXBsYWNlbWVudCIsImlzRGF0YU1hbmFnZXIiLCJkYXRhTWFuYWdlcl8xIiwiQXN5bmNNYW5hZ2VyIiwibG9hZCIsIl9pbm5lckxvYWQiLCJfaW5uZXJDcmVhdGUiLCJfaW5GbGlnaHQiLCJFcnJvciIsIl9sb2FkQW5kQ3JlYXRlIiwicGFyZW50TW9kZWwiLCJjcmVhdGVNb2RlbERhdGVUcmFuc2Zvcm0iLCJjcmVhdGVFbGVtZW50XzEiLCJjcmVhdGVJbnB1dCIsImNvbnZlcnRlZERlZiIsImNoYW5nZSIsIm9uQ2hhbmdlIiwiY3JlYXRlTGFiZWxlZElucHV0IiwibGJsRGVmIiwiaW5wdXREZWYiLCJmb3IiLCJjcmVhdGVCdXR0b24iLCJvbkNsaWNrIiwibGFiZWwiLCJwcm9jZXNzQ2VsbENvbnRlbnRzIiwiY2VsbCIsImNyZWF0ZVRhYmxlIiwidGFibGVJRCIsInRhYmxlQ2xhc3MiLCJlbGVtZW50cyIsInJvd051bSIsImNvbE51bSIsInRibCIsInJvdyIsInJJZHgiLCJpbnNlcnRSb3ciLCJpbnNlcnRDZWxsIiwiYWRkUm93IiwidGFibGUiLCJtYXRjaGVyXzEiLCJmaWxlQ29udGVudHMiLCJsaW5lcyIsImdldExpbmVzSW5GaWxlIiwicHJvcHMiLCJsaW5lIiwibGFzdExldmVsIiwibGFzdENhdGVnb3J5IiwibGV2ZWxPcmRlciIsImNhdGVnb3J5T3JkZXIiLCJwYXJzZUxpbmUiLCJsZXZlbEhlYWRlciIsIm1hdGNoTGV2ZWwiLCJpc0gyIiwicGFyc2VMZXZlbCIsImNhdGVnb3J5SGVhZGVyIiwibWF0Y2hDYXRlZ29yeSIsInBhcnNlQ2F0ZWdvcnkiLCJjb21wZXRlbmN5IiwibWF0Y2hDb21wZXRlbmN5IiwicGFyc2VDb21wZXRlbmN5IiwiY2F0ZWdvcnkiLCJMRVZFTF9SRUdFWCIsIkNBVEVHT1JZX1JFR0VYIiwiQ09NUEVURU5DWV9SRUdFWCIsIl9tYXRjaCIsInJlZ2V4IiwibWF0Y2giLCJzdHJpcHBlZExpbmUiLCJsaXN0XzEiLCJmaWx0ZXJzXzEiLCJtYXRyaXhfMSIsIndpZHRoIiwiaGVpZ2h0IiwibWFyZ2luIiwicGFkZGluZyIsInJlbmRlckZpbHRlckJhciIsInJlbmRlckxpc3QiLCJyZW5kZXJNYXRyaXgiLCJncm91cF8xIiwiY2xzU2VsZWN0b3IiLCJzZWxlY3REaXNwbGF5IiwibWFwU2VsZWN0IiwicmVuZGVyR3JvdXAiLCJmbGV4RGlyZWN0aW9uIiwiYWxpZ25JdGVtcyIsImdyaWRUZW1wbGF0ZUNvbHVtbnMiLCJmb250U2l6ZSIsIm92ZXJmbG93WSIsImNvbXBldGVuY3lfMSIsIm1hcmdpbkJvdHRvbSIsIm5lc3RlZCIsImZvbnRXZWlnaHQiLCJjdXJzb3IiLCJtYXJnaW5MZWZ0IiwidHJhbnNmb3JtT3JpZ2luIiwiaXNHcm91cE9mR3JvdXBzIiwicmVuZGVyQ29tcGV0ZW5jeSIsInNlbGVjdEhpZGRlbkxldmVscyIsImlzQ29sbGFwc2VkIiwic3RvcFByb3BhZ2F0aW9uIiwib25EZWxldGUiLCJib3JkZXJUb3AiLCJtYXJnaW5Ub3AiLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXJSYWRpdXMiLCJib3hTaGFkb3ciLCJ6SW5kZXgiLCJsZXZlbEdyb3VwIiwib3RoZXJMZXZlbHMiLCJ2aWV3c18xIiwiY29sb3IiLCJyZW5kZXJWaWV3cyIsInJlbmRlckZpbHRlcnMiLCJzZWxlY3RGaWx0ZXJzIiwiZiIsImNoaWxkU2VsZWN0b3IiLCJsb2ciLCJqdXN0aWZ5Q29udGVudCIsInRleHREZWNvcmF0aW9uIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxvQkFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLHFCQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixvQkFBb0JRLEVBQUlGLEVBR3hCTixvQkFBb0JTLEVBQUlWLEVBR3hCQyxvQkFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLG9CQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosb0JBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlB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LG1CQUN6QixDQUNJRCxJQUFLLFNBQ0w3TCxPQUFRLENBQ0osVUFBVyxDQUNQbUMsUUFBUyxPQUNUKzdCLGNBQWUsU0FDZmtDLGVBQWdCLGNBRXBCLFNBQVUsQ0FDTjNDLFFBQVMsaUJBQ1RrQixPQUFRLFVBQ1JILGFBQWMsU0FDZGxCLE1BQU8sT0FDUGlDLGFBQWMsT0FFbEIsc0JBQXVCLENBQ25CRCxnQkFBaUIsT0FDakJPLE1BQU8sUUFFWCxnQkFBaUIsQ0FDYjE5QixRQUFTLFFBQ1RrK0IsZUFBZ0IsZUFDaEI3USxRQUFTLFFBR2pCNWpCLFNBQVVzMEIsUSw2QkM1RDFCNW9DLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxJQUN0RG5CLEVBQVFrbkMsa0JBQWUsRUFDdkIsTUFBTTNYLEVBQW9CLEVBQVEsR0FDNUJtWCxFQUFZLEVBQVEsS0FDMUIxbUMsRUFBUWtuQyxhQUFlLEtBQ25CLE1BQU1FLEVBQWNWLEVBQVVXLGdCQUFnQnRzQixPQUFRdFAsR0FBeUIsV0FBWkEsRUFBd0IsU0FBVyxVQUN0RyxPQUFPOGpCLEVBQWtCeGlCLGNBQWMsQ0FDbkNvSSxJQUFLaXlCLEVBQ0w5OUIsT0FBUSxDQUNKLFVBQVcsQ0FDUHNGLFdBQVksYUFDWis0QixTQUFVLE1BQ1ZsOEIsUUFBUyxPQUNUKzdCLGNBQWUsU0FDZlosTUFBTyxPQUNQYSxXQUFZLFNBQ1ppQyxlQUFnQixTQUNoQjdDLE9BQVEsU0FHaEJ6eEIsUUFBUyIsImZpbGUiOiJjb21wTWF0cml4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDU1KTtcbiIsIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gX19leHBvcnQobSkge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcbn1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL190eXBlZ3VhcmRzXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL2Nsb25pbmdcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vY29tYmluZVwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9mb3JtYXR0aW5nXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL21hbmlwdWxhdGVcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vY29udmVydGVyXCIpKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gX19leHBvcnQobSkge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcbn1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL190eXBlR3VhcmRzXCIpKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gX19leHBvcnQobSkge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcbn1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL190eXBlR3VhcmRzXCIpKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY29tcGFyYWJsZV8xID0gcmVxdWlyZShcIkB0b29sa2lwL2NvbXBhcmFibGVcIik7XG5jb25zdCBvYmplY3RfaGVscGVyc18xID0gcmVxdWlyZShcIkB0b29sa2lwL29iamVjdC1oZWxwZXJzXCIpO1xuY29uc3QgaGlzdG9yeV8xID0gcmVxdWlyZShcIkB0b29sa2lwL2hpc3RvcnlcIik7XG5jb25zdCBfc2hhcmVkXzEgPSByZXF1aXJlKFwiLi4vX3NoYXJlZFwiKTtcbmNvbnN0IGNvcmVfMSA9IHJlcXVpcmUoXCIuLi9fdHlwZWd1YXJkcy9jb3JlXCIpO1xuY29uc3Qgc2hhcmVkX3R5cGVzXzEgPSByZXF1aXJlKFwiQHRvb2xraXAvc2hhcmVkLXR5cGVzXCIpO1xuY2xhc3MgX01vZGVsIHtcbiAgICBjb25zdHJ1Y3RvcihkYXRhLCB0cmFuc2Zvcm1zKSB7XG4gICAgICAgIHRoaXMuX2lubmVyTW9kZWwgPSB0aGlzLl9nZXREZWZhdWx0VmFsdWVzKCk7XG4gICAgICAgIHRoaXMuX19oaXN0b3J5ID0gbmV3IGhpc3RvcnlfMS5IaXN0b3J5Q2hhaW4oKTtcbiAgICAgICAgdGhpcy5fZXZlbnQgPSBuZXcgX3NoYXJlZF8xLk1vZGVsRXZlbnQoJ21vZGVsY2hhbmdlJyk7XG4gICAgICAgIGlmICh0cmFuc2Zvcm1zKSB7XG4gICAgICAgICAgICB0aGlzLl90cmFuc2Zvcm1zID0gdHJhbnNmb3JtcztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3RyYW5zZm9ybXMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXNoYXJlZF90eXBlc18xLmlzTnVsbE9yVW5kZWZpbmVkKGRhdGEpKSB7XG4gICAgICAgICAgICB0aGlzLmltcG9ydChkYXRhKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRUeXBlKCkge1xuICAgICAgICByZXR1cm4gJ3ByaW1pdGl2ZSc7XG4gICAgfVxuICAgIGFkZEV2ZW50TGlzdGVuZXIoY2JGdW5jKSB7XG4gICAgICAgIHRoaXMuX2V2ZW50LmFkZEV2ZW50TGlzdGVuZXIoY2JGdW5jKTtcbiAgICB9XG4gICAgc3RhdGljIGFkZEV2ZW50TGlzdGVuZXIoY2JGdW5jKSB7XG4gICAgICAgIHRoaXMuX2V2ZW50LmFkZEV2ZW50TGlzdGVuZXIoY2JGdW5jKTtcbiAgICB9XG4gICAgX2Rpc3BhdGNoRXZlbnQocGF5bG9hZCkge1xuICAgICAgICB0aGlzLl9ldmVudC5kaXNwYXRjaCh0aGlzLCBwYXlsb2FkKTtcbiAgICAgICAgX01vZGVsLl9ldmVudC5kaXNwYXRjaCh0aGlzLCBwYXlsb2FkKTtcbiAgICB9XG4gICAgX2NvcHlFdmVudChtb2RlbFRvQ29weUZyb20sIG1vZGVsVG9Db3B5VG8pIHtcbiAgICAgICAgbW9kZWxUb0NvcHlUby5fZXZlbnQgPSBtb2RlbFRvQ29weUZyb20uX2V2ZW50O1xuICAgIH1cbiAgICBfbm90aWZ5TGlzdGVuZXJzKHBheWxvYWQpIHtcbiAgICAgICAgY29uc3QgeyBvbGRWYWx1ZSwgdmFsdWU6IG5ld1ZhbHVlLCBldmVudENoYWluIH0gPSBwYXlsb2FkO1xuICAgICAgICBpZiAoY29tcGFyYWJsZV8xLmVxdWFscyhvbGRWYWx1ZSwgbmV3VmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFwYXlsb2FkLmV2ZW50VHlwZSkge1xuICAgICAgICAgICAgcGF5bG9hZC5ldmVudFR5cGUgPSB0aGlzLl9jYWxjdWxhdGVDaGFuZ2VUeXBlKG9sZFZhbHVlLCBuZXdWYWx1ZSwgZXZlbnRDaGFpbik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZGlzcGF0Y2hFdmVudChwYXlsb2FkKTtcbiAgICB9XG4gICAgX2NhbGN1bGF0ZUNoYW5nZVR5cGUob2xkVmFsLCBuZXdWYWwsIGV2ZW50Q2hhaW4pIHtcbiAgICAgICAgaWYgKGV2ZW50Q2hhaW4pIHtcbiAgICAgICAgICAgIHJldHVybiBldmVudENoYWluLmV2ZW50VHlwZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmV3VmFsICYmICFvbGRWYWwpIHtcbiAgICAgICAgICAgIHJldHVybiAnYWRkJztcbiAgICAgICAgfVxuICAgICAgICBpZiAob2xkVmFsICYmICFuZXdWYWwpIHtcbiAgICAgICAgICAgIHJldHVybiAncmVtb3ZlJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ21vZGlmeSc7XG4gICAgfVxuICAgIF9nZXRBcHBsaWNhYmxlVHJhbnNmb3JtcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zZm9ybXNbJ18nXTtcbiAgICB9XG4gICAgX3VwZGF0ZUhpc3RvcnkoKSB7XG4gICAgICAgIHRoaXMuX19oaXN0b3J5LnB1c2godGhpcy5nZXREYXRhKCkpO1xuICAgIH1cbiAgICB1bmRvKCkge1xuICAgICAgICB0aGlzLl9faGlzdG9yeS5uYXZpZ2F0ZUJhY2soKGxhc3RTdGF0ZSkgPT4ge1xuICAgICAgICAgICAgaWYgKCFsYXN0U3RhdGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmltcG9ydChsYXN0U3RhdGUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmVkbygpIHtcbiAgICAgICAgdGhpcy5fX2hpc3RvcnkubmF2aWdhdGVGb3J3YXJkKChuZXh0U3RhdGUpID0+IHtcbiAgICAgICAgICAgIGlmICghbmV4dFN0YXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5pbXBvcnQobmV4dFN0YXRlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldERhdGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbm5lckdldERhdGEoKTtcbiAgICB9XG4gICAgX2lubmVyR2V0RGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Nsb25lRGF0YSh0aGlzLl9pbm5lck1vZGVsKTtcbiAgICB9XG4gICAgc2V0RGF0YShuZXdEYXRhKSB7XG4gICAgICAgIHRoaXMuX2lubmVyU2V0RGF0YSh7IHZhbHVlOiBuZXdEYXRhIH0pO1xuICAgIH1cbiAgICBfaW5uZXJTZXREYXRhKHBheWxvYWQpIHtcbiAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSB0aGlzLmdldERhdGEoKTtcbiAgICAgICAgY29uc3QgeyB2YWx1ZTogbmV3RGF0YSB9ID0gcGF5bG9hZDtcbiAgICAgICAgY29uc3QgY2xvbmVkRGF0YSA9IHRoaXMuX2Nsb25lRGF0YShuZXdEYXRhKTtcbiAgICAgICAgdGhpcy5faW5uZXJNb2RlbCA9IGNsb25lZERhdGE7XG4gICAgICAgIHRoaXMuX3NlbmRVcGRhdGUoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBwYXlsb2FkKSwgeyBvbGRWYWx1ZSwgdmFsdWU6IHRoaXMuZ2V0RGF0YSgpIH0pKTtcbiAgICB9XG4gICAgX3NlbmRVcGRhdGUocGF5bG9hZCkge1xuICAgICAgICB0aGlzLl91cGRhdGVIaXN0b3J5KCk7XG4gICAgICAgIHRoaXMuX25vdGlmeUxpc3RlbmVycyhwYXlsb2FkKTtcbiAgICB9XG4gICAgaW1wb3J0KGRhdGEpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCB0cmFuc2Zvcm0gPSAoX2EgPSB0aGlzLl9nZXRBcHBsaWNhYmxlVHJhbnNmb3JtcygpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaW5jb21pbmc7XG4gICAgICAgIGxldCBpbXBvcnRlZERhdGE7XG4gICAgICAgIGlmICh0cmFuc2Zvcm0pIHtcbiAgICAgICAgICAgIGltcG9ydGVkRGF0YSA9IHRyYW5zZm9ybShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGltcG9ydGVkRGF0YSA9IHRoaXMuX2lubmVySW1wb3J0KGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0RGF0YShpbXBvcnRlZERhdGEpO1xuICAgIH1cbiAgICBfaW5uZXJJbXBvcnQoZGF0YSkge1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgZXhwb3J0KCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IChfYSA9IHRoaXMuX2dldEFwcGxpY2FibGVUcmFuc2Zvcm1zKCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5vdXRnb2luZztcbiAgICAgICAgaWYgKHRyYW5zZm9ybSkge1xuICAgICAgICAgICAgcmV0dXJuIHRyYW5zZm9ybSh0aGlzLmdldERhdGEoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faW5uZXJFeHBvcnQoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfaW5uZXJFeHBvcnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldERhdGEoKTtcbiAgICB9XG4gICAgZXF1YWxzKG90aGVyTW9kZWwpIHtcbiAgICAgICAgaWYgKCFjb3JlXzEuaXNNb2RlbChvdGhlck1vZGVsKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb21wYXJhYmxlXzEuZXF1YWxzKG90aGVyTW9kZWwuZ2V0RGF0YSgpLCB0aGlzLmdldERhdGEoKSk7XG4gICAgfVxuICAgIGNsb25lKHR4KSB7XG4gICAgICAgIGNvbnN0IHRyYW5zZm9ybXMgPSB0eCB8fCB0aGlzLl90cmFuc2Zvcm1zO1xuICAgICAgICBjb25zdCBDdG9yID0gdGhpcy5jb25zdHJ1Y3RvcjtcbiAgICAgICAgY29uc3QgbmV3TW9kZWwgPSBuZXcgQ3Rvcih0aGlzLmdldERhdGEoKSwgdHJhbnNmb3Jtcyk7XG4gICAgICAgIG5ld01vZGVsLl9ldmVudCA9IHRoaXMuX2V2ZW50O1xuICAgICAgICByZXR1cm4gbmV3TW9kZWw7XG4gICAgfVxuICAgIF9jbG9uZURhdGEoZGF0YSkge1xuICAgICAgICByZXR1cm4gb2JqZWN0X2hlbHBlcnNfMS5jbG9uZShkYXRhKTtcbiAgICB9XG4gICAgX3dyYXBJbk1vZGVsKGRhdGFUb1dyYXAsIGtleSkge1xuICAgICAgICBjb25zdCBuZXdNb2RlbCA9IF9Nb2RlbC5jcmVhdGVNb2RlbChkYXRhVG9XcmFwKTtcbiAgICAgICAgaWYgKCFjb3JlXzEuaXNNb2RlbChkYXRhVG9XcmFwKSkge1xuICAgICAgICAgICAgdGhpcy5hZGRNb2RlbExpc3RlbmVyKG5ld01vZGVsLCBrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXdNb2RlbDtcbiAgICB9XG4gICAgYWRkTW9kZWxMaXN0ZW5lcihtb2RlbFRvTGlzdGVuVG8sIGtleSkge1xuICAgICAgICBsZXQgb2xkVmFsdWUgPSBtb2RlbFRvTGlzdGVuVG8uZ2V0RGF0YSgpO1xuICAgICAgICBtb2RlbFRvTGlzdGVuVG8uYWRkRXZlbnRMaXN0ZW5lcigocGF5bG9hZCkgPT4ge1xuICAgICAgICAgICAgaWYgKHNoYXJlZF90eXBlc18xLmlzTnVsbE9yVW5kZWZpbmVkKGtleSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB7IHRhcmdldCwgZXZlbnRUeXBlIH0gPSBwYXlsb2FkO1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBjb3JlXzEuaXNNb2RlbCh0YXJnZXQpID8gdGFyZ2V0LmdldERhdGEoKSA6IHRhcmdldDtcbiAgICAgICAgICAgIHRoaXMuX3NlbmRVcGRhdGUoe1xuICAgICAgICAgICAgICAgIGV2ZW50VHlwZSxcbiAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgb2xkVmFsdWUsXG4gICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgZXZlbnRDaGFpbjogcGF5bG9hZCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgb2xkVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5fTW9kZWwgPSBfTW9kZWw7XG5fTW9kZWwuX2V2ZW50ID0gbmV3IF9zaGFyZWRfMS5Nb2RlbEV2ZW50KCdtb2RlbGNoYW5nZScpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnQocmVxdWlyZShcIi4vX3R5cGVndWFyZHNcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vY2xvbmluZ1wiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9jb21iaW5lXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL2Zvcm1hdHRpbmdcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vbWFuaXB1bGF0ZVwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9jb252ZXJ0ZXJcIikpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBzaGFyZWRfdHlwZXNfMSA9IHJlcXVpcmUoXCJAdG9vbGtpcC9zaGFyZWQtdHlwZXNcIik7XG5mdW5jdGlvbiBtYXAodG9NYXAsIGNhbGxiYWNrLCBzaG91bGRRdWl0KSB7XG4gICAgbGV0IG91dCA9IFtdO1xuICAgIGlmICghdG9NYXApIHtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAgaWYgKHNoYXJlZF90eXBlc18xLmlzQXJyYXkodG9NYXApKSB7XG4gICAgICAgIGxldCBkb25lO1xuICAgICAgICB0b01hcC5tYXAoKHZhbHVlLCBrZXksIGFycikgPT4ge1xuICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gY2FsbGJhY2sgPyBjYWxsYmFjayh2YWx1ZSwga2V5LCBhcnIpIDogdmFsdWU7XG4gICAgICAgICAgICBvdXQucHVzaChyZXN1bHQpO1xuICAgICAgICAgICAgaWYgKCFzaG91bGRRdWl0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNob3VsZFF1aXQoKSkge1xuICAgICAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGxldCBjbnQgPSAwO1xuICAgICAgICBsZXQga2V5O1xuICAgICAgICBmb3IgKGtleSBpbiB0b01hcCkge1xuICAgICAgICAgICAgaWYgKHRvTWFwLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gY2FsbGJhY2sgPyBjYWxsYmFjayh0b01hcFtrZXldLCBrZXksIHRvTWFwKSA6IHRvTWFwW2tleV07XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBvdXQucHVzaChyZXN1bHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjbnQgKz0gMTtcbiAgICAgICAgICAgICAgICBpZiAoIXNob3VsZFF1aXQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzaG91bGRRdWl0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG59XG5leHBvcnRzLm1hcCA9IG1hcDtcbmZ1bmN0aW9uIGZpbHRlcih0b0ZpbHRlciwgc2hvdWxkSW5jbHVkZSkge1xuICAgIGNvbnN0IG91dCA9IFtdO1xuICAgIG1hcCh0b0ZpbHRlciwgKGVsZW0sIGtleSwgc3JjKSA9PiB7XG4gICAgICAgIGlmIChzaG91bGRJbmNsdWRlKGVsZW0sIGtleSwgc3JjKSkge1xuICAgICAgICAgICAgb3V0LnB1c2goZWxlbSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gb3V0O1xufVxuZXhwb3J0cy5maWx0ZXIgPSBmaWx0ZXI7XG5mdW5jdGlvbiBnZXROZXh0S2V5KG9iamVjdCwgbGFzdEtleSkge1xuICAgIGxldCBwcm9wTmFtZTtcbiAgICBsZXQgbmV4dEtleSA9ICghbGFzdEtleSk7XG4gICAgZm9yIChwcm9wTmFtZSBpbiBvYmplY3QpIHtcbiAgICAgICAgaWYgKG9iamVjdC5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgICAgIGlmIChuZXh0S2V5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3BOYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocHJvcE5hbWUgPT09IGxhc3RLZXkpIHtcbiAgICAgICAgICAgICAgICBuZXh0S2V5ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gXCJcIjtcbn1cbmV4cG9ydHMuZ2V0TmV4dEtleSA9IGdldE5leHRLZXk7XG5mdW5jdGlvbiBnZXRLZXlzKG9iamVjdCkge1xuICAgIGxldCBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KSB8fCBbXTtcbiAgICBmb3IgKGxldCBpID0ga2V5cy5sZW5ndGggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICBsZXQga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgaWYgKCFvYmplY3QuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAga2V5cy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGtleXM7XG59XG5leHBvcnRzLmdldEtleXMgPSBnZXRLZXlzO1xuZnVuY3Rpb24ga2V5Q291bnQob2JqZWN0KSB7XG4gICAgcmV0dXJuIGdldEtleXMob2JqZWN0KS5sZW5ndGg7XG59XG5leHBvcnRzLmtleUNvdW50ID0ga2V5Q291bnQ7XG5mdW5jdGlvbiBzZXREaWN0VmFsdWUob2JqZWN0LCB2YWwsIGtleXMpIHtcbiAgICBpZiAoIW9iamVjdCkge1xuICAgICAgICBvYmplY3QgPSB7fTtcbiAgICB9XG4gICAgbGV0IGN1ck9iaiA9IG9iamVjdDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgbGV0IGsgPSBrZXlzW2ldO1xuICAgICAgICBsZXQgaW5pdFZhbCA9IHt9O1xuICAgICAgICBpZiAoaSA9PT0gKGtleXMubGVuZ3RoIC0gMSkpIHtcbiAgICAgICAgICAgIGluaXRWYWwgPSB2YWw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFjdXJPYmpba10pIHtcbiAgICAgICAgICAgIGN1ck9ialtrXSA9IGluaXRWYWw7XG4gICAgICAgIH1cbiAgICAgICAgY3VyT2JqID0gY3VyT2JqW2tdO1xuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0O1xufVxuZXhwb3J0cy5zZXREaWN0VmFsdWUgPSBzZXREaWN0VmFsdWU7XG5mdW5jdGlvbiBnZXRQcm90b3R5cGUob2JqKSB7XG4gICAgaWYgKG9iai5wcm90b3R5cGUpIHtcbiAgICAgICAgcmV0dXJuIG9iai5wcm90b3R5cGU7XG4gICAgfVxuICAgIGlmIChvYmouX19wcm90b19fKSB7XG4gICAgICAgIHJldHVybiBvYmouX19wcm90b19fO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmV4cG9ydHMuZ2V0UHJvdG90eXBlID0gZ2V0UHJvdG90eXBlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnQocmVxdWlyZShcIi4vX2NvbnN0YW50c1wiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9fdHlwZUd1YXJkc1wiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9jcmVhdGVFbGVtZW50XCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL2NyZWF0ZUlucHV0c1wiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9jcmVhdGVUYWJsZXNcIikpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBfbW9kZWxfMSA9IHJlcXVpcmUoXCIuLi9hYnN0cmFjdENsYXNzZXMvX21vZGVsXCIpO1xuZXhwb3J0cy5pc01vZGVsID0gKHRlc3QpID0+IHtcbiAgICBpZiAodGVzdCBpbnN0YW5jZW9mIF9tb2RlbF8xLl9Nb2RlbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3Qgc2hhcmVkX3R5cGVzXzEgPSByZXF1aXJlKFwiQHRvb2xraXAvc2hhcmVkLXR5cGVzXCIpO1xuZnVuY3Rpb24gbWFwKHRvTWFwLCBjYWxsYmFjaywgc2hvdWxkUXVpdCkge1xuICAgIGxldCBvdXQgPSBbXTtcbiAgICBpZiAoIXRvTWFwKSB7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIGlmIChzaGFyZWRfdHlwZXNfMS5pc0FycmF5KHRvTWFwKSkge1xuICAgICAgICBsZXQgZG9uZTtcbiAgICAgICAgdG9NYXAubWFwKCh2YWx1ZSwga2V5LCBhcnIpID0+IHtcbiAgICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IGNhbGxiYWNrID8gY2FsbGJhY2sodmFsdWUsIGtleSwgYXJyKSA6IHZhbHVlO1xuICAgICAgICAgICAgb3V0LnB1c2gocmVzdWx0KTtcbiAgICAgICAgICAgIGlmICghc2hvdWxkUXVpdCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzaG91bGRRdWl0KCkpIHtcbiAgICAgICAgICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBsZXQgY250ID0gMDtcbiAgICAgICAgbGV0IGtleTtcbiAgICAgICAgZm9yIChrZXkgaW4gdG9NYXApIHtcbiAgICAgICAgICAgIGlmICh0b01hcC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IGNhbGxiYWNrID8gY2FsbGJhY2sodG9NYXBba2V5XSwga2V5LCB0b01hcCkgOiB0b01hcFtrZXldO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0LnB1c2gocmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY250ICs9IDE7XG4gICAgICAgICAgICAgICAgaWYgKCFzaG91bGRRdWl0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc2hvdWxkUXVpdCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0O1xufVxuZXhwb3J0cy5tYXAgPSBtYXA7XG5mdW5jdGlvbiBmaWx0ZXIodG9GaWx0ZXIsIHNob3VsZEluY2x1ZGUpIHtcbiAgICBjb25zdCBvdXQgPSBbXTtcbiAgICBtYXAodG9GaWx0ZXIsIChlbGVtLCBrZXksIHNyYykgPT4ge1xuICAgICAgICBpZiAoc2hvdWxkSW5jbHVkZShlbGVtLCBrZXksIHNyYykpIHtcbiAgICAgICAgICAgIG91dC5wdXNoKGVsZW0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG91dDtcbn1cbmV4cG9ydHMuZmlsdGVyID0gZmlsdGVyO1xuZnVuY3Rpb24gZ2V0TmV4dEtleShvYmplY3QsIGxhc3RLZXkpIHtcbiAgICBsZXQgcHJvcE5hbWU7XG4gICAgbGV0IG5leHRLZXkgPSAoIWxhc3RLZXkpO1xuICAgIGZvciAocHJvcE5hbWUgaW4gb2JqZWN0KSB7XG4gICAgICAgIGlmIChvYmplY3QuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgICAgICBpZiAobmV4dEtleSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwcm9wTmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHByb3BOYW1lID09PSBsYXN0S2V5KSB7XG4gICAgICAgICAgICAgICAgbmV4dEtleSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFwiXCI7XG59XG5leHBvcnRzLmdldE5leHRLZXkgPSBnZXROZXh0S2V5O1xuZnVuY3Rpb24gZ2V0S2V5cyhvYmplY3QpIHtcbiAgICBsZXQga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCkgfHwgW107XG4gICAgZm9yIChsZXQgaSA9IGtleXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgbGV0IGtleSA9IGtleXNbaV07XG4gICAgICAgIGlmICghb2JqZWN0Lmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgIGtleXMuc3BsaWNlKGksIDEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBrZXlzO1xufVxuZXhwb3J0cy5nZXRLZXlzID0gZ2V0S2V5cztcbmZ1bmN0aW9uIGtleUNvdW50KG9iamVjdCkge1xuICAgIHJldHVybiBnZXRLZXlzKG9iamVjdCkubGVuZ3RoO1xufVxuZXhwb3J0cy5rZXlDb3VudCA9IGtleUNvdW50O1xuZnVuY3Rpb24gc2V0RGljdFZhbHVlKG9iamVjdCwgdmFsLCBrZXlzKSB7XG4gICAgaWYgKCFvYmplY3QpIHtcbiAgICAgICAgb2JqZWN0ID0ge307XG4gICAgfVxuICAgIGxldCBjdXJPYmogPSBvYmplY3Q7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGxldCBrID0ga2V5c1tpXTtcbiAgICAgICAgbGV0IGluaXRWYWwgPSB7fTtcbiAgICAgICAgaWYgKGkgPT09IChrZXlzLmxlbmd0aCAtIDEpKSB7XG4gICAgICAgICAgICBpbml0VmFsID0gdmFsO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY3VyT2JqW2tdKSB7XG4gICAgICAgICAgICBjdXJPYmpba10gPSBpbml0VmFsO1xuICAgICAgICB9XG4gICAgICAgIGN1ck9iaiA9IGN1ck9ialtrXTtcbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdDtcbn1cbmV4cG9ydHMuc2V0RGljdFZhbHVlID0gc2V0RGljdFZhbHVlO1xuZnVuY3Rpb24gZ2V0UHJvdG90eXBlKG9iaikge1xuICAgIGlmIChvYmoucHJvdG90eXBlKSB7XG4gICAgICAgIHJldHVybiBvYmoucHJvdG90eXBlO1xuICAgIH1cbiAgICBpZiAob2JqLl9fcHJvdG9fXykge1xuICAgICAgICByZXR1cm4gb2JqLl9fcHJvdG9fXztcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5leHBvcnRzLmdldFByb3RvdHlwZSA9IGdldFByb3RvdHlwZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gX19leHBvcnQobSkge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcbn1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL19jb25zdGFudHNcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vY29tYmluZXJcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vY3NzXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL2ZsYXR0ZW5lclwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9wbGFjZWhvbGRlcnNcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vcnVsZXNcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vc3RyaW5naWZpZXJcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vc3R5bGVFbGVtZW50XCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL3RyYW5zaXRpb25cIikpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnQocmVxdWlyZShcIi4vbW9kZWxQcmltaXRpdmVcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vbW9kZWxEYXRlXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL21vZGVsQW55XCIpKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3Qgc3R5bGVfaGVscGVyc18xID0gcmVxdWlyZShcIkB0b29sa2lwL3N0eWxlLWhlbHBlcnNcIik7XG5jb25zdCBvYmplY3RfaGVscGVyc18xID0gcmVxdWlyZShcIkB0b29sa2lwL29iamVjdC1oZWxwZXJzXCIpO1xuY29uc3QgaHRtbF9oZWxwZXJzXzEgPSByZXF1aXJlKFwiQHRvb2xraXAvaHRtbC1oZWxwZXJzXCIpO1xuY29uc3QgYXN5bmNfMSA9IHJlcXVpcmUoXCJAdG9vbGtpcC9hc3luY1wiKTtcbmNvbnN0IGNvbXBhcmFibGVfMSA9IHJlcXVpcmUoXCJAdG9vbGtpcC9jb21wYXJhYmxlXCIpO1xuY2xhc3MgX0xpYnJhcnkge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLl9yYXdTdHlsZXMgPSB7fTtcbiAgICAgICAgdGhpcy5fZWxlbXMgPSB7fTtcbiAgICAgICAgdGhpcy5fbGFzdElkID0gMDtcbiAgICB9XG4gICAgZ2V0TmV4dElkKCkge1xuICAgICAgICB0aGlzLl9sYXN0SWQgKz0gMTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xhc3RJZC50b1N0cmluZygpO1xuICAgIH1cbiAgICBoYXNTdHlsZXModW5pcXVlS2V5KSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX3Jhd1N0eWxlc1t1bmlxdWVLZXldO1xuICAgIH1cbiAgICBhZGQodW5pcXVlS2V5LCBzdHlsZXMsIGZvcmNlKSB7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nU3R5bGVzID0gdGhpcy5fZ2V0T3JDcmVhdGVFeGlzdGluZ1N0eWxlcyh1bmlxdWVLZXkpO1xuICAgICAgICBjb25zdCBtZXJnZWRTdHlsZXMgPSB0aGlzLl9tZXJnZShbZXhpc3RpbmdTdHlsZXMsIHN0eWxlc10pO1xuICAgICAgICBpZiAoIXRoaXMuX3Nob3VsZEFkZChleGlzdGluZ1N0eWxlcywgbWVyZ2VkU3R5bGVzLCBmb3JjZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9yYXdTdHlsZXNbdW5pcXVlS2V5XSA9IG1lcmdlZFN0eWxlcztcbiAgICAgICAgdGhpcy5fdXBkYXRlRWxlbXMobWVyZ2VkU3R5bGVzLCB1bmlxdWVLZXkpO1xuICAgIH1cbiAgICBfc2hvdWxkQWRkKGV4aXN0aW5nU3R5bGVzLCBtZXJnZWRTdHlsZXMsIGZvcmNlKSB7XG4gICAgICAgIGlmIChmb3JjZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9iamVjdF9oZWxwZXJzXzEuaXNFbXB0eU9iamVjdChleGlzdGluZ1N0eWxlcykpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY29tcGFyYWJsZV8xLmVxdWFscyhleGlzdGluZ1N0eWxlcywgbWVyZ2VkU3R5bGVzKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZW1vdmUodW5pcXVlS2V5KSB7XG4gICAgICAgIGlmICghdGhpcy5fcmF3U3R5bGVzW3VuaXF1ZUtleV0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBodG1sX2hlbHBlcnNfMS5yZW1vdmVFbGVtZW50KHRoaXMuX2VsZW1zW3VuaXF1ZUtleV0pO1xuICAgICAgICBkZWxldGUgdGhpcy5fcmF3U3R5bGVzW3VuaXF1ZUtleV07XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9lbGVtc1t1bmlxdWVLZXldO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgX21lcmdlKHN0eWxlcykge1xuICAgICAgICBpZiAoc3R5bGVzLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHlsZV9oZWxwZXJzXzEuY29tYmluZVN0eWxlcyguLi5zdHlsZXMpO1xuICAgIH1cbiAgICBfc3RyaW5naWZ5KHN0eWxlcykge1xuICAgICAgICByZXR1cm4gc3R5bGVfaGVscGVyc18xLnN0cmluZ2lmeVN0eWxlcyhzdHlsZXMpO1xuICAgIH1cbiAgICBfdXBkYXRlRWxlbXMoc3R5bGVzLCB1bmlxdWVLZXkpIHtcbiAgICAgICAgbGV0IHN0cmluZ2lmaWVkU3R5bGVzID0gdGhpcy5fc3RyaW5naWZ5KHN0eWxlcyk7XG4gICAgICAgIGZvciAobGV0IGNJZHggPSAwOyBjSWR4IDwgc3RyaW5naWZpZWRTdHlsZXMubGVuZ3RoOyBjSWR4ICs9IDEpIHtcbiAgICAgICAgICAgIGxldCBlbGVtID0gdGhpcy5fZ2V0T3JDcmVhdGVFbGVtKHVuaXF1ZUtleSk7XG4gICAgICAgICAgICBlbGVtLmlubmVySFRNTCA9IHN0cmluZ2lmaWVkU3R5bGVzW2NJZHhdO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9nZXRPckNyZWF0ZUVsZW0odW5pcXVlS2V5KSB7XG4gICAgICAgIGlmICh0aGlzLl9lbGVtc1t1bmlxdWVLZXldKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZWxlbXNbdW5pcXVlS2V5XTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZWxlbSA9IHN0eWxlX2hlbHBlcnNfMS5jcmVhdGVTdHlsZUVsZW1lbnQoYCR7dW5pcXVlS2V5fS0ke3RoaXMuX2lkU3VmZml4fWApO1xuICAgICAgICB0aGlzLl9lbGVtc1t1bmlxdWVLZXldID0gZWxlbTtcbiAgICAgICAgYXN5bmNfMS5uZXh0UmVuZGVyKCkudGhlbigoKSA9PiBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGVsZW0pKTtcbiAgICAgICAgcmV0dXJuIGVsZW07XG4gICAgfVxuICAgIF9nZXRPckNyZWF0ZUV4aXN0aW5nU3R5bGVzKHVuaXF1ZUtleSkge1xuICAgICAgICBpZiAoIXRoaXMuX3Jhd1N0eWxlc1t1bmlxdWVLZXldKSB7XG4gICAgICAgICAgICB0aGlzLl9yYXdTdHlsZXNbdW5pcXVlS2V5XSA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9yYXdTdHlsZXNbdW5pcXVlS2V5XTtcbiAgICB9XG4gICAgZ2V0RWxlbUZvcktleSh1bmlxdWVLZXkpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9lbGVtc1t1bmlxdWVLZXldKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fZWxlbXNbdW5pcXVlS2V5XTtcbiAgICB9XG4gICAgZ2V0KHVuaXF1ZUtleSkge1xuICAgICAgICBpZiAoIXRoaXMuX3Jhd1N0eWxlc1t1bmlxdWVLZXldKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fcmF3U3R5bGVzW3VuaXF1ZUtleV07XG4gICAgfVxufVxuZXhwb3J0cy5fTGlicmFyeSA9IF9MaWJyYXJ5O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnQocmVxdWlyZShcIi4vX3NoYXJlZFwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9fdHlwZWd1YXJkc1wiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9hYnN0cmFjdENsYXNzZXNcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vcHJpbWl0aXZlTW9kZWxzXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL29iamVjdE1vZGVsc1wiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9hcnJheU1vZGVsc1wiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9oZWxwZXJzXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL3RyYW5zZm9ybXNcIikpO1xuY29uc3QgbW9kZWxGYWN0b3J5XzEgPSByZXF1aXJlKFwiLi9oZWxwZXJzL21vZGVsRmFjdG9yeVwiKTtcbm1vZGVsRmFjdG9yeV8xLnNldHVwTW9kZWxXcmFwcGluZygpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnQocmVxdWlyZShcIi4vX21vZGVsXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL19rZXllZE1vZGVsXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL19rZXllZE1vZGVsc1wiKSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaGlkZU9yVW5oaWRlTGV2ZWwgPSBleHBvcnRzLnVwZGF0ZVN0YXRlID0gZXhwb3J0cy5TVEFURSA9IHZvaWQgMDtcbmNvbnN0IG9iamVjdF9oZWxwZXJzXzEgPSByZXF1aXJlKFwiQHRvb2xraXAvb2JqZWN0LWhlbHBlcnNcIik7XG5jb25zdCBtb2RlbF8xID0gcmVxdWlyZShcIkB0b29sa2lwL21vZGVsXCIpO1xuY2xhc3MgX1N0YXRlIGV4dGVuZHMgbW9kZWxfMS5NT2JqZWN0IHtcbn1cbmV4cG9ydHMuU1RBVEUgPSBuZXcgX1N0YXRlKHtcbiAgICBjYXRlZ29yaWVzOiBbXSxcbiAgICBsZXZlbHM6IFtdLFxuICAgIGNvbXBldGVuY2llczogW10sXG4gICAgaGlkZGVuTGV2ZWxzOiBbXSxcbiAgICBkaXNwbGF5OiAnbGlzdCcsXG59LCB7XG4gICAgY2F0ZWdvcmllczogbW9kZWxfMS5jcmVhdGVNb2RlbFRyYW5zZm9ybShtb2RlbF8xLk1TZXQpLFxuICAgIGxldmVsczogbW9kZWxfMS5jcmVhdGVNb2RlbFRyYW5zZm9ybShtb2RlbF8xLk1TZXQpLFxuICAgIGNvbXBldGVuY2llczogbW9kZWxfMS5jcmVhdGVNb2RlbFRyYW5zZm9ybShtb2RlbF8xLk1NYW5hZ2VyKSxcbiAgICBoaWRkZW5MZXZlbHM6IG1vZGVsXzEuY3JlYXRlTW9kZWxUcmFuc2Zvcm0obW9kZWxfMS5NU2V0KSxcbn0pO1xuZXhwb3J0cy51cGRhdGVTdGF0ZSA9IChzdGF0ZSkgPT4ge1xuICAgIGNvbnN0IGN1clN0YXRlID0gZXhwb3J0cy5TVEFURS5nZXREYXRhKCk7XG4gICAgY3VyU3RhdGUuZGlzcGxheSA9IHN0YXRlLmRpc3BsYXkgfHwgY3VyU3RhdGUuZGlzcGxheTtcbiAgICAvLyBldmVyeXRoaW5nIGVsc2UgaXMgYW4gYXJyYXksIHNvIGxvb3AgdGhyb3VnaCBpdFxuICAgIG9iamVjdF9oZWxwZXJzXzEubWFwKHN0YXRlLCAodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICBmb3IgKGxldCB2IG9mIHZhbHVlKSB7XG4gICAgICAgICAgICBjb25zdCBhcnIgPSBjdXJTdGF0ZVtrZXldO1xuICAgICAgICAgICAgaWYgKGFyci5pbmRleE9mKHYpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXJyLnB1c2godik7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBleHBvcnRzLlNUQVRFLnNldERhdGEoY3VyU3RhdGUpO1xufTtcbmV4cG9ydHMuaGlkZU9yVW5oaWRlTGV2ZWwgPSAobGV2ZWwpID0+IHtcbiAgICBjb25zdCBjdXJIaWRkZW5MZXZlbHMgPSBleHBvcnRzLlNUQVRFLmdldCgnaGlkZGVuTGV2ZWxzJyk7XG4gICAgY29uc3QgaWR4ID0gY3VySGlkZGVuTGV2ZWxzLmluZGV4T2YobGV2ZWwpO1xuICAgIGlmIChpZHggPT09IC0xKSB7XG4gICAgICAgIGN1ckhpZGRlbkxldmVscy5wdXNoKGxldmVsKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGN1ckhpZGRlbkxldmVscy5zcGxpY2UoaWR4LCAxKTtcbiAgICB9XG4gICAgZXhwb3J0cy5TVEFURS5zZXQoJ2hpZGRlbkxldmVscycsIGN1ckhpZGRlbkxldmVscyk7XG59O1xud2luZG93LlNUQVRFID0gZXhwb3J0cy5TVEFURTtcbiIsIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gX19leHBvcnQobSkge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcbn1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL2FycmF5c1wiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9kYXRlc1wiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9udW1iZXJzXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL3N0cmluZ3NcIikpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBfY29yZUNyZWF0ZUVsZW1lbnRfMSA9IHJlcXVpcmUoXCIuL19jb3JlQ3JlYXRlRWxlbWVudFwiKTtcbmNvbnN0IF9jb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuL19jb25zdGFudHNcIik7XG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50KG9iaiwga2V5ZWRFbGVtcykge1xuICAgIGlmICghb2JqKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIF9jb3JlQ3JlYXRlRWxlbWVudF8xLl9jb3JlQ3JlYXRlRWxlbWVudChvYmosIGtleWVkRWxlbXMpO1xufVxuZXhwb3J0cy5jcmVhdGVFbGVtZW50ID0gY3JlYXRlRWxlbWVudDtcbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnRzKG9ianMsIGtleWVkRWxlbXMpIHtcbiAgICBpZiAoIW9ianMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gX2NvcmVDcmVhdGVFbGVtZW50XzEuX2NvcmVDcmVhdGVFbGVtZW50cyhvYmpzLCBrZXllZEVsZW1zKTtcbn1cbmV4cG9ydHMuY3JlYXRlRWxlbWVudHMgPSBjcmVhdGVFbGVtZW50cztcbmZ1bmN0aW9uIGNyZWF0ZUN1c3RvbUVsZW1lbnQob2JqLCBrZXllZEVsZW1zLCByZWN1cnNlVmlhKSB7XG4gICAgaWYgKCFvYmopIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gX2NvcmVDcmVhdGVFbGVtZW50XzEuX2NvcmVDcmVhdGVFbGVtZW50KG9iaiwga2V5ZWRFbGVtcywgcmVjdXJzZVZpYSk7XG59XG5leHBvcnRzLmNyZWF0ZUN1c3RvbUVsZW1lbnQgPSBjcmVhdGVDdXN0b21FbGVtZW50O1xuZnVuY3Rpb24gY3JlYXRlU1ZHRWxlbWVudChkZWYsIGtleWVkRWxlbXMpIHtcbiAgICBpZiAoIWRlZikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRlZi50eXBlID0gXCJzdmdcIjtcbiAgICBkZWYubmFtZXNwYWNlID0gX2NvbnN0YW50c18xLlNWR19OQU1FU1BBQ0U7XG4gICAgcmV0dXJuIF9jb3JlQ3JlYXRlRWxlbWVudF8xLl9jb3JlQ3JlYXRlRWxlbWVudChkZWYsIGtleWVkRWxlbXMpO1xufVxuZXhwb3J0cy5jcmVhdGVTVkdFbGVtZW50ID0gY3JlYXRlU1ZHRWxlbWVudDtcbmZ1bmN0aW9uIGNyZWF0ZVNWR0VsZW1lbnRzKGRlZnMsIGtleWVkRWxlbXMpIHtcbiAgICBpZiAoIWRlZnMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBvdXQgPSBbXTtcbiAgICBmb3IgKGxldCBkIG9mIGRlZnMpIHtcbiAgICAgICAgb3V0LnB1c2goY3JlYXRlU1ZHRWxlbWVudChkLCBrZXllZEVsZW1zKSk7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG59XG5leHBvcnRzLmNyZWF0ZVNWR0VsZW1lbnRzID0gY3JlYXRlU1ZHRWxlbWVudHM7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IG9iamVjdF9oZWxwZXJzXzEgPSByZXF1aXJlKFwiQHRvb2xraXAvb2JqZWN0LWhlbHBlcnNcIik7XG5jb25zdCBwbGFjZWhvbGRlcnNfMSA9IHJlcXVpcmUoXCIuL3BsYWNlaG9sZGVyc1wiKTtcbmNvbnN0IE1BWF9MRU5HVEggPSAxMDAwMDtcbmNsYXNzIF9TdHlsZVN0cmluZ2lmaWVyIHtcbiAgICBzdHJpbmdpZnkoc3R5bGVzKSB7XG4gICAgICAgIGlmICghc3R5bGVzKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0cmluZ2lmeShzdHlsZXMpO1xuICAgIH1cbiAgICBfc3RyaW5naWZ5KHN0eWxlcykge1xuICAgICAgICBsZXQgb3V0ID0gW107XG4gICAgICAgIGxldCBjdXJTdHIgPSBcIlwiO1xuICAgICAgICBvYmplY3RfaGVscGVyc18xLm1hcChzdHlsZXMsIChjc3NEZWNsYXJhdGlvbiwgc2VsZWN0b3IpID0+IHtcbiAgICAgICAgICAgIGxldCBjbHNTdHIgPSB0aGlzLmdlbmVyYXRlQ29udGVudEZvclN0eWxlKHNlbGVjdG9yLCBjc3NEZWNsYXJhdGlvbik7XG4gICAgICAgICAgICBpZiAoIWNsc1N0cikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgoY3VyU3RyLmxlbmd0aCArIGNsc1N0ci5sZW5ndGgpID49IE1BWF9MRU5HVEgpIHtcbiAgICAgICAgICAgICAgICBvdXQucHVzaChjdXJTdHIpO1xuICAgICAgICAgICAgICAgIGN1clN0ciA9IGNsc1N0cjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGN1clN0ciArPSBjbHNTdHI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoY3VyU3RyKSB7XG4gICAgICAgICAgICBvdXQucHVzaChjdXJTdHIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIGdlbmVyYXRlQ29udGVudEZvclN0eWxlKHNlbGVjdG9yLCBhdHRyKSB7XG4gICAgICAgIGlmIChhdHRyIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZW5lcmF0ZUNvbnRlbnRGb3JGb250RGVmaW5pdGlvbihzZWxlY3RvciwgYXR0cik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2VuZXJhdGVDb250ZW50Rm9yQ3NzQ2xhc3Moc2VsZWN0b3IsIGF0dHIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9nZW5lcmF0ZUNvbnRlbnRGb3JDc3NDbGFzcyhzZWxlY3RvciwgYXR0cikge1xuICAgICAgICBsZXQgc3R5bGVTdHJpbmcgPSB0aGlzLl9idWlsZENzc0NsYXNzQ29udGVudFN0cmluZyhzZWxlY3RvciwgYXR0cik7XG4gICAgICAgIGlmIChzdHlsZVN0cmluZykge1xuICAgICAgICAgICAgc3R5bGVTdHJpbmcgPSB0aGlzLl9mb3JtYXRDbGFzcyhzZWxlY3Rvciwgc3R5bGVTdHJpbmcpO1xuICAgICAgICAgICAgaWYgKHNlbGVjdG9yLmluZGV4T2YoXCJ7XCIpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHN0eWxlU3RyaW5nICs9IFwiXFxufVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHlsZVN0cmluZztcbiAgICB9XG4gICAgX2dlbmVyYXRlQ29udGVudEZvckZvbnREZWZpbml0aW9uKGZvbnROYW1lLCBzcmNGaWxlcykge1xuICAgICAgICBsZXQgc3JjID0gW107XG4gICAgICAgIGZvciAobGV0IHNyY0ZpbGUgb2Ygc3JjRmlsZXMpIHtcbiAgICAgICAgICAgIHNyYy5wdXNoKHRoaXMuX2Zvcm1hdEZvbnRmYWNlKHNyY0ZpbGUudXJsLCBzcmNGaWxlLmZvcm1hdCkpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBhdHRyID0ge1xuICAgICAgICAgICAgZm9udEZhbWlseTogZm9udE5hbWUsXG4gICAgICAgICAgICBzcmM6IHNyYy5qb2luKFwiLFwiKVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2VuZXJhdGVDb250ZW50Rm9yQ3NzQ2xhc3MoXCJAZm9udC1mYWNlXCIsIGF0dHIpO1xuICAgIH1cbiAgICBfYnVpbGRDc3NDbGFzc0NvbnRlbnRTdHJpbmcoc2VsZWN0b3IsIGF0dHIpIHtcbiAgICAgICAgbGV0IGlzR2VuZXJhdGluZ0FuaW1hdGlvbiA9IChzZWxlY3Rvci5pbmRleE9mKFwiQGtleWZyYW1lc1wiKSAhPT0gLTEpO1xuICAgICAgICBsZXQgc3R5bGVTdHJpbmcgPSBbXTtcbiAgICAgICAgb2JqZWN0X2hlbHBlcnNfMS5tYXAoYXR0ciwgKHByb3BlcnR5VmFsdWUsIHByb3BlcnR5TmFtZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGlzR2VuZXJhdGluZ0FuaW1hdGlvbikge1xuICAgICAgICAgICAgICAgIHN0eWxlU3RyaW5nLnB1c2godGhpcy5fYnVpbGRBbmltYXRpb25WYWx1ZVN0cmluZyhwcm9wZXJ0eU5hbWUsIHByb3BlcnR5VmFsdWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0eWxlU3RyaW5nLnB1c2godGhpcy5fZm9ybWF0UHJvcGVydHkocHJvcGVydHlOYW1lLCBwcm9wZXJ0eVZhbHVlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc3R5bGVTdHJpbmcuam9pbihcIlwiKTtcbiAgICB9XG4gICAgX2J1aWxkQW5pbWF0aW9uVmFsdWVTdHJpbmcocHJvcGVydHlOYW1lLCBwcm9wZXJ0eVZhbHVlKSB7XG4gICAgICAgIGxldCBzdHlsZVN0cmluZyA9IFwiXCI7XG4gICAgICAgIG9iamVjdF9oZWxwZXJzXzEubWFwKHByb3BlcnR5VmFsdWUsIChwVmFsdWUsIHBOYW1lKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXBWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0eWxlU3RyaW5nICs9IHRoaXMuX2Zvcm1hdFByb3BlcnR5KHBOYW1lLCBwVmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFzdHlsZVN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2Zvcm1hdENsYXNzKHByb3BlcnR5TmFtZSwgc3R5bGVTdHJpbmcpO1xuICAgIH1cbiAgICBnZXRQcm9wZXJ0eU5hbWUoanNQcm9wTmFtZSkge1xuICAgICAgICBsZXQgcHJvcCA9IGpzUHJvcE5hbWU7XG4gICAgICAgIGlmIChwcm9wLnRvTG93ZXJDYXNlKCkgPT09IHByb3ApIHtcbiAgICAgICAgICAgIHJldHVybiBwcm9wO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlZ2V4ID0gLyhbQS1aXSkvZztcbiAgICAgICAgbGV0IHNlZ21lbnRzID0gcHJvcC5zcGxpdChyZWdleCk7XG4gICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IHNlZ21lbnRzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgIHNlZ21lbnRzW2lkeF0gPSB0aGlzLl9nZXRVcGRhdGVkU2VnbWVudChzZWdtZW50c1tpZHhdLCBpZHggPT09IDApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZWdtZW50cy5qb2luKFwiXCIpO1xuICAgIH1cbiAgICBfZ2V0VXBkYXRlZFNlZ21lbnQoc2VnbWVudCwgaXNGaXJzdCkge1xuICAgICAgICBpZiAoaXNGaXJzdCAmJiB0aGlzLl9pc0Nzc1ByZWZpeChzZWdtZW50KSkge1xuICAgICAgICAgICAgc2VnbWVudCA9IFwiLVwiICsgc2VnbWVudDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VnbWVudC50b0xvd2VyQ2FzZSgpICE9PSBzZWdtZW50KSB7XG4gICAgICAgICAgICBzZWdtZW50ID0gXCItXCIgKyBzZWdtZW50LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlZ21lbnQ7XG4gICAgfVxuICAgIF9pc0Nzc1ByZWZpeCh0ZXN0KSB7XG4gICAgICAgIHN3aXRjaCAodGVzdCkge1xuICAgICAgICAgICAgY2FzZSBcIndlYmtpdFwiOlxuICAgICAgICAgICAgY2FzZSBcIm1velwiOlxuICAgICAgICAgICAgY2FzZSBcIm1zXCI6XG4gICAgICAgICAgICBjYXNlIFwib1wiOlxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgX2Zvcm1hdENsYXNzKHNlbGVjdG9yLCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gYCR7c2VsZWN0b3J9IHtcXG4ke3ZhbHVlfX1cXG5gO1xuICAgIH1cbiAgICBfZm9ybWF0UHJvcGVydHkoa2V5LCB2YWx1ZSkge1xuICAgICAgICBsZXQgcGxhY2Vob2xkZXIgPSBwbGFjZWhvbGRlcnNfMS5maW5kQ29udGFpbmVkUGxhY2Vob2xkZXIodmFsdWUpO1xuICAgICAgICBpZiAocGxhY2Vob2xkZXIpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZShgPCR7cGxhY2Vob2xkZXIubmFtZX06JHtwbGFjZWhvbGRlci5kZWZhdWx0VmFsdWV9PmAsIHBsYWNlaG9sZGVyLmRlZmF1bHRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGBcXHQke3RoaXMuZ2V0UHJvcGVydHlOYW1lKGtleSl9IDogJHt2YWx1ZX07XFxuYDtcbiAgICB9XG4gICAgX2Zvcm1hdEZvbnRmYWNlKHVybCwgZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiBgdXJsKCR7dXJsfSkgZm9ybWF0KCR7Zm9ybWF0fSlgO1xuICAgIH1cbn1cbmNvbnN0IFN0eWxlU3RyaW5naWZpZXIgPSBuZXcgX1N0eWxlU3RyaW5naWZpZXIoKTtcbmZ1bmN0aW9uIHN0cmluZ2lmeVN0eWxlcyhzdHlsZXMpIHtcbiAgICByZXR1cm4gU3R5bGVTdHJpbmdpZmllci5zdHJpbmdpZnkoc3R5bGVzKTtcbn1cbmV4cG9ydHMuc3RyaW5naWZ5U3R5bGVzID0gc3RyaW5naWZ5U3R5bGVzO1xuZnVuY3Rpb24gc3RyaW5naWZ5U3R5bGUoc2VsZWN0b3IsIGRlZmluaXRpb24pIHtcbiAgICByZXR1cm4gU3R5bGVTdHJpbmdpZmllci5nZW5lcmF0ZUNvbnRlbnRGb3JTdHlsZShzZWxlY3RvciwgZGVmaW5pdGlvbik7XG59XG5leHBvcnRzLnN0cmluZ2lmeVN0eWxlID0gc3RyaW5naWZ5U3R5bGU7XG5mdW5jdGlvbiBnZXRDc3NQcm9wZXJ0eU5hbWUoanNQcm9wTmFtZSkge1xuICAgIHJldHVybiBTdHlsZVN0cmluZ2lmaWVyLmdldFByb3BlcnR5TmFtZShqc1Byb3BOYW1lKTtcbn1cbmV4cG9ydHMuZ2V0Q3NzUHJvcGVydHlOYW1lID0gZ2V0Q3NzUHJvcGVydHlOYW1lO1xuZ2V0Q3NzUHJvcGVydHlOYW1lKFwid2Via2l0QWxpZ25Db250ZW50XCIpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnQocmVxdWlyZShcIi4vY29tcGFyaXNvbnNcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vX3R5cGVndWFyZHNcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vX2ludGVyZmFjZXNcIikpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnQocmVxdWlyZShcIi4vaWRlbnRpZmlhYmxlTW9kZWxcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vbW9kZWxPYmplY3RcIikpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBwcmltaXRpdmVfaGVscGVyc18xID0gcmVxdWlyZShcIkB0b29sa2lwL3ByaW1pdGl2ZS1oZWxwZXJzXCIpO1xuZXhwb3J0cy5TaG9ydERhdGVUcmFuc2Zvcm0gPSB7XG4gICAgaW5jb21pbmc6IChkYXRhKSA9PiBuZXcgRGF0ZShkYXRhLnRvU3RyaW5nKCkpLFxuICAgIG91dGdvaW5nOiAoZGF0YSkgPT4gcHJpbWl0aXZlX2hlbHBlcnNfMS5zaG9ydERhdGUoZGF0YSlcbn07XG5leHBvcnRzLlNob3J0RGF0ZVRpbWVUcmFuc2Zvcm0gPSB7XG4gICAgaW5jb21pbmc6IChkYXRhKSA9PiBuZXcgRGF0ZShkYXRhLnRvU3RyaW5nKCkpLFxuICAgIG91dGdvaW5nOiAoZGF0YSkgPT4gcHJpbWl0aXZlX2hlbHBlcnNfMS5zaG9ydERhdGVUaW1lKGRhdGEpXG59O1xuZXhwb3J0cy5EZWZhdWx0RGF0ZVRyYW5zZm9ybSA9IHtcbiAgICBpbmNvbWluZzogKGRhdGEpID0+IG5ldyBEYXRlKGRhdGEudG9TdHJpbmcoKSksXG4gICAgb3V0Z29pbmc6IChkYXRhKSA9PiBkYXRhLnRvU3RyaW5nKClcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XG59XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9hcnJheU1vZGVsXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL21TZXRcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vbW9kZWxNYW5hZ2VyXCIpKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3Qgb2JqZWN0X2hlbHBlcnNfMSA9IHJlcXVpcmUoXCJAdG9vbGtpcC9vYmplY3QtaGVscGVyc1wiKTtcbmNsYXNzIERhdGFNYW5hZ2VyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5fZGF0YSA9IHt9O1xuICAgICAgICB0aGlzLl9wb3B1bGF0ZVdpdGhEZWZhdWx0RGF0YSgpO1xuICAgIH1cbiAgICBfcG9wdWxhdGVXaXRoRGVmYXVsdERhdGEoKSB7IH1cbiAgICBfY3JlYXRlQW5kQWRkRGVmYXVsdChkYXRhKSB7XG4gICAgICAgIHRoaXMuYWRkKGRhdGEpO1xuICAgIH1cbiAgICBhZGQoZGF0dW0pIHtcbiAgICAgICAgaWYgKHRoaXMuY29udGFpbnMoZGF0dW0uaWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZGF0YVtkYXR1bS5pZF0gPSBkYXR1bTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJlbW92ZShpZCkge1xuICAgICAgICBpZiAoIXRoaXMuY29udGFpbnMoaWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgb3V0ID0gdGhpcy5nZXQoaWQpO1xuICAgICAgICBkZWxldGUgdGhpcy5fZGF0YVtpZF07XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIGNvbnRhaW5zKGlkKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RhdGFbaWRdO1xuICAgIH1cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdGhpcy5fZGF0YSA9IHt9O1xuICAgIH1cbiAgICBnZXQoaWQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbnRhaW5zKGlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGFbaWRdO1xuICAgIH1cbiAgICBtYXAobWFwRnVuYykge1xuICAgICAgICBvYmplY3RfaGVscGVyc18xLm1hcCh0aGlzLl9kYXRhLCBtYXBGdW5jKTtcbiAgICB9XG4gICAgdG9BcnJheSgpIHtcbiAgICAgICAgbGV0IG91dCA9IFtdO1xuICAgICAgICB0aGlzLm1hcCgoZWxlbSkgPT4ge1xuICAgICAgICAgICAgb3V0LnB1c2goZWxlbSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICB0b0RpY3Rpb25hcnkoKSB7XG4gICAgICAgIGxldCBvdXQgPSB7fTtcbiAgICAgICAgdGhpcy5tYXAoKGVsZW0sIGlkKSA9PiB7XG4gICAgICAgICAgICBvdXRbaWRdID0gZWxlbTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIGNsb25lKCkge1xuICAgICAgICBjb25zdCBvdXQgPSBuZXcgRGF0YU1hbmFnZXIoKTtcbiAgICAgICAgY29uc3QgZGF0YUFzQXJyYXkgPSB0aGlzLnRvQXJyYXkoKTtcbiAgICAgICAgZm9yIChsZXQgZGF0dW0gb2YgZGF0YUFzQXJyYXkpIHtcbiAgICAgICAgICAgIG91dC5hZGQoZGF0dW0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxufVxuZXhwb3J0cy5EYXRhTWFuYWdlciA9IERhdGFNYW5hZ2VyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBzaGFyZWRfdHlwZXNfMSA9IHJlcXVpcmUoXCJAdG9vbGtpcC9zaGFyZWQtdHlwZXNcIik7XG5jb25zdCBtYW5pcHVsYXRlXzEgPSByZXF1aXJlKFwiLi9tYW5pcHVsYXRlXCIpO1xuZnVuY3Rpb24gaXNDbG9uZWFibGUodGVzdCkge1xuICAgIGlmIChzaGFyZWRfdHlwZXNfMS5pc0Z1bmN0aW9uKHRlc3QuY2xvbmUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnRzLmlzQ2xvbmVhYmxlID0gaXNDbG9uZWFibGU7XG5mdW5jdGlvbiBpc01hcHBhYmxlKHRlc3QpIHtcbiAgICBpZiAoc2hhcmVkX3R5cGVzXzEuaXNBcnJheSh0ZXN0KSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHNoYXJlZF90eXBlc18xLmlzT2JqZWN0KHRlc3QpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnRzLmlzTWFwcGFibGUgPSBpc01hcHBhYmxlO1xuZnVuY3Rpb24gaXNFbXB0eU9iamVjdChvYmplY3QpIHtcbiAgICBpZiAoIXNoYXJlZF90eXBlc18xLmlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gKCFtYW5pcHVsYXRlXzEuZ2V0TmV4dEtleShvYmplY3QpKTtcbn1cbmV4cG9ydHMuaXNFbXB0eU9iamVjdCA9IGlzRW1wdHlPYmplY3Q7XG5mdW5jdGlvbiBpc0VtcHR5QXJyYXkob2JqZWN0KSB7XG4gICAgaWYgKCFzaGFyZWRfdHlwZXNfMS5pc0FycmF5KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAob2JqZWN0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmV4cG9ydHMuaXNFbXB0eUFycmF5ID0gaXNFbXB0eUFycmF5O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBtYW5pcHVsYXRlXzEgPSByZXF1aXJlKFwiLi9tYW5pcHVsYXRlXCIpO1xuY29uc3Qgc2hhcmVkX3R5cGVzXzEgPSByZXF1aXJlKFwiQHRvb2xraXAvc2hhcmVkLXR5cGVzXCIpO1xuZnVuY3Rpb24gY29tYmluZU9iamVjdHMob2JqQSwgb2JqQiwgZGVlcCkge1xuICAgIGxldCByZXQ7XG4gICAgbGV0IHRtcDtcbiAgICBsZXQgbG9vcFRocnU7XG4gICAgcmV0ID0gb2JqQSB8fCB7fTtcbiAgICBpZiAob2JqQikge1xuICAgICAgICBfbG9vcFRocnUob2JqQiwgcmV0LCBkZWVwKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn1cbmV4cG9ydHMuY29tYmluZU9iamVjdHMgPSBjb21iaW5lT2JqZWN0cztcbmZ1bmN0aW9uIF9sb29wVGhydShvYmpUb0NvbWJpbmUsIG91dHB1dE9iaiwgZGVlcCkge1xuICAgIGlmICghb2JqVG9Db21iaW5lKSB7XG4gICAgICAgIHJldHVybiBvdXRwdXRPYmo7XG4gICAgfVxuICAgIGlmIChvYmpUb0NvbWJpbmUuX19wcm90b19fKSB7XG4gICAgICAgIG91dHB1dE9iai5fX3Byb3RvX18gPSBPYmplY3QuY3JlYXRlKG9ialRvQ29tYmluZS5fX3Byb3RvX18pO1xuICAgIH1cbiAgICBtYW5pcHVsYXRlXzEubWFwKG9ialRvQ29tYmluZSwgKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgaWYgKHNoYXJlZF90eXBlc18xLmlzTnVsbE9yVW5kZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZWVwICYmICh0eXBlb2YgKHZhbHVlKSA9PT0gXCJvYmplY3RcIikpIHtcbiAgICAgICAgICAgIGxldCB0bXAgPSBvdXRwdXRPYmpba2V5XTtcbiAgICAgICAgICAgIGlmICghdG1wKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0T2JqW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0bXAgPSBjb21iaW5lT2JqZWN0cyh0bXAsIHZhbHVlLCBkZWVwKTtcbiAgICAgICAgICAgIG91dHB1dE9ialtrZXldID0gdG1wO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb3V0cHV0T2JqW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZnVuY3Rpb24gcmVjb25jaWxlT3B0aW9ucyhvcHRpb25zLCBkZWZhdWx0cykge1xuICAgIGxldCBrZXk7XG4gICAgbGV0IG9wdDtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICA7XG4gICAgZm9yIChrZXkgaW4gZGVmYXVsdHMpIHtcbiAgICAgICAgaWYgKGRlZmF1bHRzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgIG9wdCA9IG9wdGlvbnNba2V5XTtcbiAgICAgICAgICAgIGlmICgob3B0ID09PSB1bmRlZmluZWQpIHx8IChvcHQgPT09IG51bGwpKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9uc1trZXldID0gZGVmYXVsdHNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3B0aW9ucztcbn1cbmV4cG9ydHMucmVjb25jaWxlT3B0aW9ucyA9IHJlY29uY2lsZU9wdGlvbnM7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmZ1bmN0aW9uIHBhZFRvRGlnaXRzKHRvUGFkLCBudW1iZXJPZkRpZ2l0cykge1xuICAgIGxldCBvdXRBcnIgPSB0b1BhZC50b1N0cmluZygpLnNwbGl0KFwiXCIpO1xuICAgIHdoaWxlIChvdXRBcnIubGVuZ3RoIDwgbnVtYmVyT2ZEaWdpdHMpIHtcbiAgICAgICAgb3V0QXJyLnNwbGljZSgwLCAwLCBcIjBcIik7XG4gICAgfVxuICAgIHJldHVybiBvdXRBcnIuam9pbihcIlwiKTtcbn1cbmV4cG9ydHMucGFkVG9EaWdpdHMgPSBwYWRUb0RpZ2l0cztcbmZ1bmN0aW9uIGZ1bGxIZXhTdHJpbmcodmFsLCBsZW5ndGgpIHtcbiAgICA7XG4gICAgbGV0IG91dEhleFN0cmluZztcbiAgICBsZXQgaTtcbiAgICBsZW5ndGggPSBsZW5ndGggfHwgMDtcbiAgICBvdXRIZXhTdHJpbmcgPSB2YWwudG9TdHJpbmcoMTYpO1xuICAgIGlmIChvdXRIZXhTdHJpbmcubGVuZ3RoIDwgbGVuZ3RoKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAobGVuZ3RoIC0gb3V0SGV4U3RyaW5nLmxlbmd0aCk7IGkgKz0gMSkge1xuICAgICAgICAgICAgb3V0SGV4U3RyaW5nID0gXCIwXCIgKyBvdXRIZXhTdHJpbmc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG91dEhleFN0cmluZztcbn1cbmV4cG9ydHMuZnVsbEhleFN0cmluZyA9IGZ1bGxIZXhTdHJpbmc7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHNoYXJlZF90eXBlc18xID0gcmVxdWlyZShcIkB0b29sa2lwL3NoYXJlZC10eXBlc1wiKTtcbmZ1bmN0aW9uIHBpZWNlKHN0ciwgZGVsaW0sIHBjID0gMSkge1xuICAgIGxldCBzcGxpdF9hcnI7XG4gICAgc3BsaXRfYXJyID0gc3RyLnNwbGl0KGRlbGltKTtcbiAgICByZXR1cm4gc3BsaXRfYXJyW3BjXSB8fCBcIlwiO1xufVxuZXhwb3J0cy5waWVjZSA9IHBpZWNlO1xuO1xuZnVuY3Rpb24gYWRkUGllY2Uoc3RyLCBuZXh0UGllY2UsIGRlbGltKSB7XG4gICAgaWYgKHN0ci5sZW5ndGggPiAwKSB7XG4gICAgICAgIHN0ciArPSBkZWxpbTtcbiAgICB9XG4gICAgcmV0dXJuIHN0ciArIG5leHRQaWVjZTtcbn1cbmV4cG9ydHMuYWRkUGllY2UgPSBhZGRQaWVjZTtcbmZ1bmN0aW9uIHRpdGxlQ2FzZShzdHIsIGRlbGltID0gXCIgXCIpIHtcbiAgICBsZXQgd29yZHM7XG4gICAgbGV0IHc7XG4gICAgbGV0IG91dDtcbiAgICBvdXQgPSBcIlwiO1xuICAgIHdvcmRzID0gc3RyLnNwbGl0KGRlbGltKTtcbiAgICBmb3IgKHcgPSAwOyB3IDwgd29yZHMubGVuZ3RoOyB3ICs9IDEpIHtcbiAgICAgICAgaWYgKHcgIT09IDApIHtcbiAgICAgICAgICAgIG91dCArPSBkZWxpbTtcbiAgICAgICAgfVxuICAgICAgICBvdXQgKz0gY2hhckF0KHdvcmRzW3ddLCAwKS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICBvdXQgKz0gcmVzdCh3b3Jkc1t3XSwgMSkudG9Mb3dlckNhc2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbn1cbmV4cG9ydHMudGl0bGVDYXNlID0gdGl0bGVDYXNlO1xuO1xuZnVuY3Rpb24gc2VudGVuY2VDYXNlKHN0cikge1xuICAgIGxldCBvdXQ7XG4gICAgb3V0ID0gY2hhckF0KHN0ciwgMCkudG9VcHBlckNhc2UoKTtcbiAgICBvdXQgKz0gcmVzdChzdHIsIDEpLnRvTG93ZXJDYXNlKCk7XG4gICAgcmV0dXJuIG91dDtcbn1cbmV4cG9ydHMuc2VudGVuY2VDYXNlID0gc2VudGVuY2VDYXNlO1xuO1xuZnVuY3Rpb24gY2hhckF0KHN0ciwgaWR4KSB7XG4gICAgcmV0dXJuIHN0ci5zdWJzdHIoaWR4LCAxKTtcbn1cbmV4cG9ydHMuY2hhckF0ID0gY2hhckF0O1xuO1xuZnVuY3Rpb24gcmVzdChzdHIsIGlkeCkge1xuICAgIHJldHVybiBzdHIuc3Vic3RyaW5nKGlkeCwgc3RyLmxlbmd0aCk7XG59XG5leHBvcnRzLnJlc3QgPSByZXN0O1xuO1xuZnVuY3Rpb24gdHJpbShzdHIpIHtcbiAgICBsZXQgcmV0O1xuICAgIHJldCA9IHN0ci5yZXBsYWNlKC9eXFxzKi9nLCBcIlwiKTtcbiAgICByZXQgPSByZXQucmVwbGFjZSgvXFxzKj8kL2csIFwiXCIpO1xuICAgIHJldHVybiByZXQ7XG59XG5leHBvcnRzLnRyaW0gPSB0cmltO1xuO1xuZnVuY3Rpb24gc3RyaXBTcGFjZXMoc3RyKSB7XG4gICAgbGV0IHJldDtcbiAgICByZXQgPSBzdHIucmVwbGFjZSgvXFxzL2csIFwiXCIpO1xuICAgIHJldCA9IHJldC5yZXBsYWNlKC9cXCZuYnNwXFw7L2csIFwiXCIpO1xuICAgIHJldHVybiByZXQ7XG59XG5leHBvcnRzLnN0cmlwU3BhY2VzID0gc3RyaXBTcGFjZXM7XG5mdW5jdGlvbiBmb3JtYXQoc3RyLCAuLi5yZXBsYWNlbWVudHMpIHtcbiAgICBsZXQgc3RyaW5nQXJyID0gc3RyLnNwbGl0KFwiXCIpO1xuICAgIGlmICghcmVwbGFjZW1lbnRzKSB7XG4gICAgICAgIHJlcGxhY2VtZW50cyA9IFtdO1xuICAgIH1cbiAgICBsZXQgbnVtYmVyID0gXCJcIjtcbiAgICBsZXQgbG9va2luZ0Zvck51bWJlciA9IGZhbHNlO1xuICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IHN0cmluZ0Fyci5sZW5ndGg7IGlkeCArPSAxKSB7XG4gICAgICAgIGxldCBjaGFyID0gc3RyaW5nQXJyW2lkeF07XG4gICAgICAgIGlmIChjaGFyID09PSBcIlxcXFxcIikge1xuICAgICAgICAgICAgc3RyaW5nQXJyW2lkeF0gPSBcIlwiO1xuICAgICAgICAgICAgaWR4ICs9IDE7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjaGFyID09PSBcIntcIikge1xuICAgICAgICAgICAgbG9va2luZ0Zvck51bWJlciA9IHRydWU7XG4gICAgICAgICAgICBzdHJpbmdBcnJbaWR4XSA9IFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY2hhciA9PT0gXCJ9XCIgJiYgbG9va2luZ0Zvck51bWJlcikge1xuICAgICAgICAgICAgc3RyaW5nQXJyW2lkeF0gPSAoIXNoYXJlZF90eXBlc18xLmlzTnVsbE9yVW5kZWZpbmVkKHJlcGxhY2VtZW50c1srbnVtYmVyXSkgPyByZXBsYWNlbWVudHNbK251bWJlcl0udG9TdHJpbmcoKSA6IFwie1wiICsgbnVtYmVyICsgXCJ9XCIpO1xuICAgICAgICAgICAgbG9va2luZ0Zvck51bWJlciA9IGZhbHNlO1xuICAgICAgICAgICAgbnVtYmVyID0gXCJcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc051bWVyaWMoY2hhcikgJiYgbG9va2luZ0Zvck51bWJlcikge1xuICAgICAgICAgICAgbnVtYmVyICs9IGNoYXI7XG4gICAgICAgICAgICBzdHJpbmdBcnJbaWR4XSA9IFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobG9va2luZ0Zvck51bWJlcikge1xuICAgICAgICAgICAgbG9va2luZ0Zvck51bWJlciA9IGZhbHNlO1xuICAgICAgICAgICAgbnVtYmVyID0gXCJcIjtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3RyaW5nQXJyLmpvaW4oXCJcIik7XG59XG5leHBvcnRzLmZvcm1hdCA9IGZvcm1hdDtcbmZ1bmN0aW9uIGlzTnVtZXJpYyhzdHIpIHtcbiAgICByZXR1cm4gL15bMC05XSskLy50ZXN0KHN0cik7XG59XG5leHBvcnRzLmlzTnVtZXJpYyA9IGlzTnVtZXJpYztcbmZ1bmN0aW9uIGFkZExlYWRpbmdaZXJvZXMoY291bnQsIHVucGFkZGVkKSB7XG4gICAgO1xuICAgIGxldCBvdXQ7XG4gICAgaWYgKHR5cGVvZiB1bnBhZGRlZCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBvdXQgPSB1bnBhZGRlZDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG91dCA9IHVucGFkZGVkLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGxldCB6O1xuICAgIGZvciAoeiA9IG91dC5sZW5ndGg7IHogPCBjb3VudDsgeiArPSAxKSB7XG4gICAgICAgIG91dCA9IFwiMFwiICsgb3V0O1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xufVxuZXhwb3J0cy5hZGRMZWFkaW5nWmVyb2VzID0gYWRkTGVhZGluZ1plcm9lcztcbjtcbmZ1bmN0aW9uIHN0cmlwSFRNTChzdHIpIHtcbiAgICBsZXQgb3V0O1xuICAgIG91dCA9IHN0ci5yZXBsYWNlKC9cXDwuKj9cXD4vZywgXCJcIik7XG4gICAgcmV0dXJuIG91dDtcbn1cbmV4cG9ydHMuc3RyaXBIVE1MID0gc3RyaXBIVE1MO1xuZnVuY3Rpb24gam9pbihqb2luQ2hhciwgLi4udG9Kb2luKSB7XG4gICAgcmV0dXJuIHRvSm9pbi5qb2luKGpvaW5DaGFyKTtcbn1cbmV4cG9ydHMuam9pbiA9IGpvaW47XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU1ZHX05BTUVTUEFDRSA9IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3Qgc2hhcmVkX3R5cGVzXzEgPSByZXF1aXJlKFwiQHRvb2xraXAvc2hhcmVkLXR5cGVzXCIpO1xuZnVuY3Rpb24gaXNJRWxlbURlZmluaXRpb24odGVzdCkge1xuICAgIGxldCBvdXQ7XG4gICAgbGV0IGNvbXAgPSB7XG4gICAgICAgIGF0dHI6IG51bGwsXG4gICAgICAgIGNoaWxkcmVuOiBudWxsLFxuICAgICAgICBjbHM6IFwiXCIsXG4gICAgICAgIGNvbnRlbnQ6IFwiXCIsXG4gICAgICAgIGlkOiBcIlwiLFxuICAgICAgICBwYXJlbnQ6IG51bGwsXG4gICAgICAgIHR5cGU6IFwiXCJcbiAgICB9O1xuICAgIGlmIChzaGFyZWRfdHlwZXNfMS5pc0ludGVyZmFjZSh0ZXN0LCBjb21wKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0cy5pc0lFbGVtRGVmaW5pdGlvbiA9IGlzSUVsZW1EZWZpbml0aW9uO1xuZnVuY3Rpb24gaXNDbGFzc0RlZmluaXRpb24odGVzdCkge1xuICAgIGlmIChzaGFyZWRfdHlwZXNfMS5pc1N0cmluZyh0ZXN0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChzaGFyZWRfdHlwZXNfMS5pc0FycmF5KHRlc3QpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5leHBvcnRzLmlzQ2xhc3NEZWZpbml0aW9uID0gaXNDbGFzc0RlZmluaXRpb247XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IG9iamVjdF9oZWxwZXJzXzEgPSByZXF1aXJlKFwiQHRvb2xraXAvb2JqZWN0LWhlbHBlcnNcIik7XG5jbGFzcyBfU3R5bGVDb21iaW5lciB7XG4gICAgY29tYmluZSguLi5zdHlsZXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbWJpbmVTdHlsZXMoLi4uc3R5bGVzKTtcbiAgICB9XG4gICAgX2NvbWJpbmVTdHlsZXMoLi4uc3R5bGVzKSB7XG4gICAgICAgIGxldCBvdXRTdHlsZXMgPSB7fTtcbiAgICAgICAgZm9yIChsZXQgc3R5bGUgb2Ygc3R5bGVzKSB7XG4gICAgICAgICAgICBpZiAoIXN0eWxlKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvYmplY3RfaGVscGVyc18xLm1hcChzdHlsZSwgKGN1ckNscywgc2VsZWN0b3IpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY3VyQ2xzIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0U3R5bGVzW3NlbGVjdG9yXSA9IHRoaXMuX2NvbWJpbmVGb250U3R5bGUob3V0U3R5bGVzW3NlbGVjdG9yXSB8fCBbXSwgY3VyQ2xzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG91dFN0eWxlc1tzZWxlY3Rvcl0gPSB0aGlzLl9jb21iaW5lU3RhbmRhcmRTdHlsZShvdXRTdHlsZXNbc2VsZWN0b3JdIHx8IHt9LCBjdXJDbHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIDtcbiAgICAgICAgcmV0dXJuIG91dFN0eWxlcztcbiAgICB9XG4gICAgX2NvbWJpbmVTdGFuZGFyZFN0eWxlKGV4aXN0aW5nU3R5bGVzLCBjdXJDbHMpIHtcbiAgICAgICAgbGV0IG1lcmdlZERlZiA9IHRoaXMuX2NvbWJpbmVTdHlsZShleGlzdGluZ1N0eWxlcywgY3VyQ2xzKTtcbiAgICAgICAgaWYgKCFtZXJnZWREZWYpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVyZ2VkRGVmO1xuICAgIH1cbiAgICBfY29tYmluZUZvbnRTdHlsZShleGlzdGluZ0ZvbnRzLCBjdXJGb250cykge1xuICAgICAgICByZXR1cm4gZXhpc3RpbmdGb250cy5jb25jYXQoY3VyRm9udHMpO1xuICAgIH1cbiAgICBfY29tYmluZVN0eWxlKHN0YXJ0aW5nU3R5bGVzLCBjdXJDbHMpIHtcbiAgICAgICAgbGV0IG1lcmdlZERlZiA9IHRoaXMuX21lcmdlQ2xhc3NEZWZpbml0aW9uKHN0YXJ0aW5nU3R5bGVzLCBjdXJDbHMpO1xuICAgICAgICBpZiAob2JqZWN0X2hlbHBlcnNfMS5pc0VtcHR5T2JqZWN0KG1lcmdlZERlZikpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXJnZWREZWY7XG4gICAgfVxuICAgIF9tZXJnZUNsYXNzRGVmaW5pdGlvbiguLi5kZWZpbml0aW9ucykge1xuICAgICAgICBsZXQgbWVyZ2VkRGVmID0ge307XG4gICAgICAgIGZvciAobGV0IGRlZiBvZiBkZWZpbml0aW9ucykge1xuICAgICAgICAgICAgb2JqZWN0X2hlbHBlcnNfMS5tYXAoZGVmLCAodmFsLCBwcm9wZXJ0eSkgPT4ge1xuICAgICAgICAgICAgICAgIG1lcmdlZERlZltwcm9wZXJ0eV0gPSB2YWw7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVyZ2VkRGVmO1xuICAgIH1cbn1cbmNvbnN0IFN0eWxlQ29tYmluZXIgPSBuZXcgX1N0eWxlQ29tYmluZXIoKTtcbmZ1bmN0aW9uIGNvbWJpbmVTdHlsZXMoLi4uc3R5bGVzKSB7XG4gICAgcmV0dXJuIFN0eWxlQ29tYmluZXIuY29tYmluZSguLi5zdHlsZXMpO1xufVxuZXhwb3J0cy5jb21iaW5lU3R5bGVzID0gY29tYmluZVN0eWxlcztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgcHJpbWl0aXZlX2hlbHBlcnNfMSA9IHJlcXVpcmUoXCJAdG9vbGtpcC9wcmltaXRpdmUtaGVscGVyc1wiKTtcbmNvbnN0IHNoYXJlZF90eXBlc18xID0gcmVxdWlyZShcIkB0b29sa2lwL3NoYXJlZC10eXBlc1wiKTtcbmNvbnN0IGdldENsYXNzYWJsZUVsZW1lbnQgPSAoZWxlbSkgPT4ge1xuICAgIGlmIChzaGFyZWRfdHlwZXNfMS5pc0RyYXdhYmxlKGVsZW0pKSB7XG4gICAgICAgIHJldHVybiBlbGVtLmJhc2U7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gZWxlbTtcbiAgICB9XG59O1xuZnVuY3Rpb24gZ2V0Q2xhc3MoZWxlbSkge1xuICAgIGNvbnN0IGUgPSBnZXRDbGFzc2FibGVFbGVtZW50KGVsZW0pO1xuICAgIHJldHVybiBlLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJztcbn1cbmV4cG9ydHMuZ2V0Q2xhc3MgPSBnZXRDbGFzcztcbmZ1bmN0aW9uIGdldENsYXNzZXMoZWxlbSkge1xuICAgIGNvbnN0IGNscyA9IGdldENsYXNzKGVsZW0pO1xuICAgIGlmICghY2xzKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgcmV0dXJuIGNscy5zcGxpdCgnICcpO1xufVxuZXhwb3J0cy5nZXRDbGFzc2VzID0gZ2V0Q2xhc3NlcztcbmZ1bmN0aW9uIGFkZENsYXNzKGVsZW0sIGNsc05hbWUpIHtcbiAgICBpZiAoIWVsZW0gfHwgIWNsc05hbWUpXG4gICAgICAgIHJldHVybjtcbiAgICBjb25zdCBlID0gZ2V0Q2xhc3NhYmxlRWxlbWVudChlbGVtKTtcbiAgICBjb25zdCBjbHMgPSBlLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpO1xuICAgIGlmICghY2xzKSB7XG4gICAgICAgIGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgcHJpbWl0aXZlX2hlbHBlcnNfMS50cmltKGNsc05hbWUpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBwYWRkZWRDbHMgPSBcIiBcIiArIGNscyArIFwiIFwiO1xuICAgIGlmIChwYWRkZWRDbHMuaW5kZXhPZignICcgKyBjbHNOYW1lICsgJyAnKSA9PT0gLTEpIHtcbiAgICAgICAgZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBwcmltaXRpdmVfaGVscGVyc18xLnRyaW0oY2xzICsgJyAnICsgY2xzTmFtZSkpO1xuICAgIH1cbiAgICByZXR1cm4gZWxlbTtcbn1cbmV4cG9ydHMuYWRkQ2xhc3MgPSBhZGRDbGFzcztcbjtcbmZ1bmN0aW9uIGFkZENsYXNzZXMoZWxlbSwgLi4uY2xzTmFtZXMpIHtcbiAgICBpZiAoIWVsZW0gfHxcbiAgICAgICAgIWNsc05hbWVzIHx8XG4gICAgICAgIGNsc05hbWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGUgPSBnZXRDbGFzc2FibGVFbGVtZW50KGVsZW0pO1xuICAgIGNvbnN0IGNsYXNzZXMgPSBnZXRDbGFzc2VzKGVsZW0pO1xuICAgIGZvciAobGV0IGNsc05hbWUgb2YgY2xzTmFtZXMpIHtcbiAgICAgICAgaWYgKCFjbHNOYW1lKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJpbWl0aXZlX2hlbHBlcnNfMS5pbmRleE9mKGNsYXNzZXMsIGNsc05hbWUpICE9PSAtMSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY2xhc3Nlcy5wdXNoKGNsc05hbWUpO1xuICAgIH1cbiAgICBlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjbGFzc2VzLmpvaW4oJyAnKSk7XG4gICAgcmV0dXJuIGVsZW07XG59XG5leHBvcnRzLmFkZENsYXNzZXMgPSBhZGRDbGFzc2VzO1xuZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoZWxlbSwgY2xzTmFtZSkge1xuICAgIGlmICghZWxlbSB8fCAhY2xzTmFtZSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGxldCBlO1xuICAgIGlmIChzaGFyZWRfdHlwZXNfMS5pc0RyYXdhYmxlKGVsZW0pKSB7XG4gICAgICAgIGUgPSBlbGVtLmJhc2U7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBlID0gZWxlbTtcbiAgICB9XG4gICAgbGV0IGNscyA9IFwiIFwiICsgZS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSArIFwiIFwiO1xuICAgIGNvbnN0IGxlbiA9IGNscy5sZW5ndGg7XG4gICAgY2xzID0gY2xzLnJlcGxhY2UoXCIgXCIgKyBjbHNOYW1lICsgXCIgXCIsIFwiIFwiKTtcbiAgICBpZiAoY2xzLmxlbmd0aCAhPT0gbGVuKSB7XG4gICAgICAgIGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgcHJpbWl0aXZlX2hlbHBlcnNfMS50cmltKGNscykpO1xuICAgIH1cbiAgICByZXR1cm4gZWxlbTtcbn1cbmV4cG9ydHMucmVtb3ZlQ2xhc3MgPSByZW1vdmVDbGFzcztcbjtcbmZ1bmN0aW9uIGFkZE9yUmVtb3ZlQ2xhc3MoZWxlbSwgY2xzTmFtZSwgc2hvdWxkQWRkKSB7XG4gICAgaWYgKHNob3VsZEFkZCkge1xuICAgICAgICBhZGRDbGFzcyhlbGVtLCBjbHNOYW1lKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlbW92ZUNsYXNzKGVsZW0sIGNsc05hbWUpO1xuICAgIH1cbiAgICByZXR1cm4gZWxlbTtcbn1cbmV4cG9ydHMuYWRkT3JSZW1vdmVDbGFzcyA9IGFkZE9yUmVtb3ZlQ2xhc3M7XG5mdW5jdGlvbiBoYXNDbGFzcyhlbGVtLCBjbHMpIHtcbiAgICBsZXQgZTtcbiAgICBsZXQgY3VyX2NscztcbiAgICBpZiAoIWVsZW0pXG4gICAgICAgIHJldHVybjtcbiAgICBpZiAoc2hhcmVkX3R5cGVzXzEuaXNEcmF3YWJsZShlbGVtKSkge1xuICAgICAgICBlID0gZWxlbS5iYXNlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZSA9IGVsZW07XG4gICAgfVxuICAgIGN1cl9jbHMgPSBcIiBcIiArIGUuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgKyBcIiBcIjtcbiAgICBpZiAoY3VyX2Nscy5pbmRleE9mKFwiIFwiICsgY2xzICsgXCIgXCIpID09PSAtMSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZXhwb3J0cy5oYXNDbGFzcyA9IGhhc0NsYXNzO1xuO1xuZnVuY3Rpb24gY2xlYXJDbGFzcyhlbGVtKSB7XG4gICAgaWYgKCFlbGVtKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IGU7XG4gICAgaWYgKHNoYXJlZF90eXBlc18xLmlzRHJhd2FibGUoZWxlbSkpIHtcbiAgICAgICAgZSA9IGVsZW0uYmFzZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGUgPSBlbGVtO1xuICAgIH1cbiAgICBlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiXCIpO1xuICAgIHJldHVybiBlbGVtO1xufVxuZXhwb3J0cy5jbGVhckNsYXNzID0gY2xlYXJDbGFzcztcbmZ1bmN0aW9uIHRvZ2dsZUNsYXNzKGVsZW0sIGNsc05hbWUpIHtcbiAgICByZXR1cm4gYWRkT3JSZW1vdmVDbGFzcyhlbGVtLCBjbHNOYW1lLCAhaGFzQ2xhc3MoZWxlbSwgY2xzTmFtZSkpO1xufVxuZXhwb3J0cy50b2dnbGVDbGFzcyA9IHRvZ2dsZUNsYXNzO1xuZnVuY3Rpb24gc2V0UHJvcGVydHkoY2xzLCBpdGVtLCB2YWwsIGZvcmNlKSB7XG4gICAgbGV0IGk7XG4gICAgbGV0IGNzcztcbiAgICBsZXQgc0lkeDtcbiAgICBsZXQgcnVsZXM7XG4gICAgbGV0IHJ1bGU7XG4gICAgZm9yIChzSWR4ID0gMDsgc0lkeCA8IGRvY3VtZW50LnN0eWxlU2hlZXRzLmxlbmd0aDsgc0lkeCArPSAxKSB7XG4gICAgICAgIGNzcyA9IGRvY3VtZW50LmFsbCA/ICdydWxlcycgOiAnY3NzUnVsZXMnO1xuICAgICAgICBydWxlcyA9IGRvY3VtZW50LnN0eWxlU2hlZXRzW3NJZHhdW2Nzc107XG4gICAgICAgIGlmIChydWxlcykge1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHJ1bGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgcnVsZSA9IHJ1bGVzW2ldO1xuICAgICAgICAgICAgICAgIGlmIChydWxlLnNlbGVjdG9yVGV4dCA9PT0gY2xzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgocnVsZS5zdHlsZVtpdGVtXSkgfHwgKGZvcmNlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcnVsZS5zdHlsZVtpdGVtXSA9IHZhbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydHMuc2V0UHJvcGVydHkgPSBzZXRQcm9wZXJ0eTtcbjtcbmZ1bmN0aW9uIGdldFByb3BlcnR5KGNscywgaXRlbSkge1xuICAgIGxldCBpO1xuICAgIGxldCBjc3M7XG4gICAgbGV0IHNJZHg7XG4gICAgbGV0IHJ1bGVzO1xuICAgIGxldCBydWxlO1xuICAgIGZvciAoc0lkeCA9IDA7IHNJZHggPCBkb2N1bWVudC5zdHlsZVNoZWV0cy5sZW5ndGg7IHNJZHggKz0gMSkge1xuICAgICAgICBjc3MgPSBkb2N1bWVudC5hbGwgPyAncnVsZXMnIDogJ2Nzc1J1bGVzJztcbiAgICAgICAgcnVsZXMgPSBkb2N1bWVudC5zdHlsZVNoZWV0c1tzSWR4XVtjc3NdO1xuICAgICAgICBpZiAocnVsZXMpIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBydWxlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIHJ1bGUgPSBydWxlc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAocnVsZS5zZWxlY3RvclRleHQgPT09IGNscykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHJ1bGUuc3R5bGVbaXRlbV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gXCJcIjtcbn1cbmV4cG9ydHMuZ2V0UHJvcGVydHkgPSBnZXRQcm9wZXJ0eTtcbjtcbmZ1bmN0aW9uIF9vbGRfQ3JlYXRlQ2xhc3Moc2VsZWN0b3IsIGF0dHIsIG5vQXBwZW5kKSB7XG4gICAgbGV0IGNscztcbiAgICBsZXQgYTtcbiAgICBsZXQgc3R5bGVzO1xuICAgIHN0eWxlcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic3R5bGVcIik7XG4gICAgaWYgKG5vQXBwZW5kIHx8IHN0eWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNscyA9IHN0eWxlc1swXTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNscyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgICAgICAgY2xzLmlubmVySFRNTCA9IFwiXCI7XG4gICAgfVxuICAgIGNscy5pbm5lckhUTUwgKz0gXCJcXG5cIiArIHNlbGVjdG9yICsgXCIge1xcblwiO1xuICAgIGZvciAoYSBpbiBhdHRyKSB7XG4gICAgICAgIGlmIChhdHRyLmhhc093blByb3BlcnR5KGEpKSB7XG4gICAgICAgICAgICBpZiAoYXR0clthXS5rZXkpIHtcbiAgICAgICAgICAgICAgICBjbHMuaW5uZXJIVE1MICs9IFwiXFx0XCIgKyBhdHRyW2FdLmtleSArIFwiOiBcIiArIGF0dHJbYV0udmFsICsgXCI7XFxuXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjbHMuaW5uZXJIVE1MICs9IFwiXFx0XCIgKyBhICsgXCIgOiBcIiArIGF0dHJbYV0gKyBcIjtcXG5cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjbHMuaW5uZXJIVE1MICs9IFwiXFxufVwiO1xuICAgIGlmICghbm9BcHBlbmQpIHtcbiAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChjbHMpO1xuICAgIH1cbiAgICByZXR1cm4gY2xzO1xufVxuZnVuY3Rpb24gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtLCBhdHRyKSB7XG4gICAgbGV0IHN0eWxlO1xuICAgIGxldCBlO1xuICAgIGlmIChzaGFyZWRfdHlwZXNfMS5pc0RyYXdhYmxlKGVsZW0pKSB7XG4gICAgICAgIGUgPSBlbGVtLmJhc2U7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBlID0gZWxlbTtcbiAgICB9XG4gICAgaWYgKHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKSB7XG4gICAgICAgIHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZSk7XG4gICAgICAgIGlmIChhdHRyKSB7XG4gICAgICAgICAgICByZXR1cm4gc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShhdHRyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBzdHlsZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChlLmN1cnJlbnRTdHlsZSkge1xuICAgICAgICBzdHlsZSA9IGUuY3VycmVudFN0eWxlO1xuICAgICAgICBpZiAoYXR0cikge1xuICAgICAgICAgICAgcmV0dXJuIHN0eWxlW2F0dHJdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHN0eWxlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZXhwb3J0cy5nZXRDb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3Qgb2JqZWN0X2hlbHBlcnNfMSA9IHJlcXVpcmUoXCJAdG9vbGtpcC9vYmplY3QtaGVscGVyc1wiKTtcbmNsYXNzIF9TdHlsZVBsYWNlaG9sZGVycyB7XG4gICAgc3BsaXRPdXRQbGFjZWhvbGRlcnMoZmxhdHRlbmVkU3R5bGVzKSB7XG4gICAgICAgIGxldCBvdXQgPSB7IHN0YW5kYXJkOiB7fSwgd2l0aFBsYWNlaG9sZGVyczoge30gfTtcbiAgICAgICAgb2JqZWN0X2hlbHBlcnNfMS5tYXAoZmxhdHRlbmVkU3R5bGVzLCAoZGVmLCBzZWxlY3RvcikgPT4ge1xuICAgICAgICAgICAgb2JqZWN0X2hlbHBlcnNfMS5tYXAoZGVmLCAocFZhbCwgcE5hbWUpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fY29udGFpbnNQbGFjZWhvbGRlcihwVmFsKSkge1xuICAgICAgICAgICAgICAgICAgICBvYmplY3RfaGVscGVyc18xLnNldERpY3RWYWx1ZShvdXQud2l0aFBsYWNlaG9sZGVycywgcFZhbCwgW3NlbGVjdG9yLCBwTmFtZV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0X2hlbHBlcnNfMS5zZXREaWN0VmFsdWUob3V0LnN0YW5kYXJkLCBwVmFsLCBbc2VsZWN0b3IsIHBOYW1lXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICBmaW5kQ29udGFpbmVkUGxhY2Vob2xkZXIodmFsdWUpIHtcbiAgICAgICAgbGV0IHBsYWNlaG9sZGVyUmVnZXggPSAvPCguKz8pPi87XG4gICAgICAgIGxldCByZXN1bHQgPSBwbGFjZWhvbGRlclJlZ2V4LmV4ZWModmFsdWUpO1xuICAgICAgICBpZiAoIXJlc3VsdCB8fCAhcmVzdWx0WzFdKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgc3BsaXRQbGFjZWhvbGRlciA9IHJlc3VsdFsxXS5zcGxpdChcIjpcIik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuYW1lOiBzcGxpdFBsYWNlaG9sZGVyWzBdLFxuICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiBzcGxpdFBsYWNlaG9sZGVyWzFdXG4gICAgICAgIH07XG4gICAgfVxuICAgIF9jb250YWluc1BsYWNlaG9sZGVyKHZhbHVlKSB7XG4gICAgICAgIGxldCBwbGFjZWhvbGRlciA9IHRoaXMuZmluZENvbnRhaW5lZFBsYWNlaG9sZGVyKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuICEhcGxhY2Vob2xkZXI7XG4gICAgfVxuICAgIGluZGV4U3R5bGVEaWN0QnlQbGFjZWhvbGRlcihzdHlsZURpY3QpIHtcbiAgICAgICAgbGV0IGlkeCA9IHt9O1xuICAgICAgICBvYmplY3RfaGVscGVyc18xLm1hcChzdHlsZURpY3QsIChzdHlsZXMsIHVuaXF1ZUtleSkgPT4ge1xuICAgICAgICAgICAgb2JqZWN0X2hlbHBlcnNfMS5tYXAoc3R5bGVzLCAoZGVmLCBzZWxlY3RvcikgPT4ge1xuICAgICAgICAgICAgICAgIG9iamVjdF9oZWxwZXJzXzEubWFwKGRlZiwgKHBWYWwsIHBOYW1lKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBwbGFjZWhvbGRlciA9IHRoaXMuZmluZENvbnRhaW5lZFBsYWNlaG9sZGVyKHBWYWwpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXBsYWNlaG9sZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0X2hlbHBlcnNfMS5zZXREaWN0VmFsdWUoaWR4LCB0cnVlLCBbcGxhY2Vob2xkZXIubmFtZSwgdW5pcXVlS2V5LCBzZWxlY3RvciwgcE5hbWVdKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGlkeDtcbiAgICB9XG4gICAgbWFwSW5kZXhUb1N0eWxlKGluZGV4LCBzdHlsZXMpIHtcbiAgICAgICAgbGV0IG91dCA9IHt9O1xuICAgICAgICBvYmplY3RfaGVscGVyc18xLm1hcChpbmRleCwgKGQsIHNlbGVjdG9yKSA9PiB7XG4gICAgICAgICAgICBvYmplY3RfaGVscGVyc18xLm1hcChkLCAodW51c2VkLCBwTmFtZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghc3R5bGVzW3NlbGVjdG9yXSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9iamVjdF9oZWxwZXJzXzEuc2V0RGljdFZhbHVlKG91dCwgc3R5bGVzW3NlbGVjdG9yXVtwTmFtZV0sIFtzZWxlY3RvciwgcE5hbWVdKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAgcmVwbGFjZVBsYWNlaG9sZGVycyhzdHlsZXMsIHBsYWNlaG9sZGVyLCByZXBsYWNlV2l0aCkge1xuICAgICAgICBsZXQgbWF0Y2hSZWdleCA9IG5ldyBSZWdFeHAoXCI8XCIgKyBwbGFjZWhvbGRlciArIFwiLio/PlwiLCBcImdcIik7XG4gICAgICAgIGxldCBvdXQgPSBvYmplY3RfaGVscGVyc18xLmNsb25lT2JqZWN0KHN0eWxlcyk7XG4gICAgICAgIG9iamVjdF9oZWxwZXJzXzEubWFwKG91dCwgKGRlZiwgc2VsZWN0b3IpID0+IHtcbiAgICAgICAgICAgIG9iamVjdF9oZWxwZXJzXzEubWFwKGRlZiwgKHBWYWwsIHBOYW1lKSA9PiB7XG4gICAgICAgICAgICAgICAgb3V0W3NlbGVjdG9yXVtwTmFtZV0gPSBwVmFsLnJlcGxhY2UobWF0Y2hSZWdleCwgcmVwbGFjZVdpdGgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbn1cbmV4cG9ydHMuU3R5bGVQbGFjZWhvbGRlcnMgPSBuZXcgX1N0eWxlUGxhY2Vob2xkZXJzKCk7XG5mdW5jdGlvbiBmaW5kQ29udGFpbmVkUGxhY2Vob2xkZXIodmFsdWUpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5TdHlsZVBsYWNlaG9sZGVycy5maW5kQ29udGFpbmVkUGxhY2Vob2xkZXIodmFsdWUpO1xufVxuZXhwb3J0cy5maW5kQ29udGFpbmVkUGxhY2Vob2xkZXIgPSBmaW5kQ29udGFpbmVkUGxhY2Vob2xkZXI7XG5mdW5jdGlvbiBzcGxpdFN0eWxlcyhmbGF0dGVuZWRTdHlsZXMpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5TdHlsZVBsYWNlaG9sZGVycy5zcGxpdE91dFBsYWNlaG9sZGVycyhmbGF0dGVuZWRTdHlsZXMpO1xufVxuZXhwb3J0cy5zcGxpdFN0eWxlcyA9IHNwbGl0U3R5bGVzO1xuZnVuY3Rpb24gaW5kZXhCeVBsYWNlaG9sZGVyKHN0eWxlRGljdCkge1xuICAgIHJldHVybiBleHBvcnRzLlN0eWxlUGxhY2Vob2xkZXJzLmluZGV4U3R5bGVEaWN0QnlQbGFjZWhvbGRlcihzdHlsZURpY3QpO1xufVxuZXhwb3J0cy5pbmRleEJ5UGxhY2Vob2xkZXIgPSBpbmRleEJ5UGxhY2Vob2xkZXI7XG5mdW5jdGlvbiByZXBsYWNlUGxhY2Vob2xkZXJzKHN0eWxlcywgcGxhY2Vob2xkZXIsIHJlcGxhY2VXaXRoKSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuU3R5bGVQbGFjZWhvbGRlcnMucmVwbGFjZVBsYWNlaG9sZGVycyhzdHlsZXMsIHBsYWNlaG9sZGVyLCByZXBsYWNlV2l0aCk7XG59XG5leHBvcnRzLnJlcGxhY2VQbGFjZWhvbGRlcnMgPSByZXBsYWNlUGxhY2Vob2xkZXJzO1xuZnVuY3Rpb24gbWFwSW5kZXhUb1N0eWxlKGluZGV4LCBzdHlsZXMpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5TdHlsZVBsYWNlaG9sZGVycy5tYXBJbmRleFRvU3R5bGUoaW5kZXgsIHN0eWxlcyk7XG59XG5leHBvcnRzLm1hcEluZGV4VG9TdHlsZSA9IG1hcEluZGV4VG9TdHlsZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3Qgc3RyaW5naWZpZXJfMSA9IHJlcXVpcmUoXCIuL3N0cmluZ2lmaWVyXCIpO1xuY2xhc3MgX1N0eWxlRWxlbWVudEdlbmVyYXRvciB7XG4gICAgY3JlYXRlRWxlbWVudChpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY3JlYXRlRWxlbWVudChpZCk7XG4gICAgfVxuICAgIF9jcmVhdGVFbGVtZW50KGlkKSB7XG4gICAgICAgIGxldCBlbGVtO1xuICAgICAgICBpZiAoaWQpIHtcbiAgICAgICAgICAgIGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XG4gICAgICAgICAgICBpZiAoZWxlbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbGVtO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gICAgICAgIGlmIChpZCkge1xuICAgICAgICAgICAgZWxlbS5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBpZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVsZW07XG4gICAgfVxuICAgIGNyZWF0ZUVsZW1lbnRGb3JTdHlsZXMoc3R5bGVzLCBpZCwgYWRkVG9Eb2N1bWVudCkge1xuICAgICAgICBpZiAoIXN0eWxlcykge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbGVtZW50Rm9yU3R5bGVzKHN0eWxlcywgaWQsIGFkZFRvRG9jdW1lbnQpO1xuICAgIH1cbiAgICBfY3JlYXRlRWxlbWVudEZvclN0eWxlcyhzdHlsZXMsIGlkLCBhZGRUb0RvY3VtZW50KSB7XG4gICAgICAgIGxldCBzdHJpbmdpZmllZCA9IHN0cmluZ2lmaWVyXzEuc3RyaW5naWZ5U3R5bGVzKHN0eWxlcyk7XG4gICAgICAgIGxldCBvdXQgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgcyBvZiBzdHJpbmdpZmllZCkge1xuICAgICAgICAgICAgbGV0IGVsZW0gPSB0aGlzLl9jcmVhdGVFbGVtZW50KGlkKTtcbiAgICAgICAgICAgIGVsZW0uaW5uZXJIVE1MID0gcztcbiAgICAgICAgICAgIGlmIChhZGRUb0RvY3VtZW50KSB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChlbGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG91dC5wdXNoKGVsZW0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxufVxuY29uc3QgU3R5bGVFbGVtZW50R2VuZXJhdG9yID0gbmV3IF9TdHlsZUVsZW1lbnRHZW5lcmF0b3IoKTtcbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudChpZCkge1xuICAgIHJldHVybiBTdHlsZUVsZW1lbnRHZW5lcmF0b3IuY3JlYXRlRWxlbWVudChpZCk7XG59XG5leHBvcnRzLmNyZWF0ZVN0eWxlRWxlbWVudCA9IGNyZWF0ZVN0eWxlRWxlbWVudDtcbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnRGb3JTdHlsZXMoc3R5bGVzLCBpZCwgYWRkVG9Eb2N1bWVudCkge1xuICAgIHJldHVybiBTdHlsZUVsZW1lbnRHZW5lcmF0b3IuY3JlYXRlRWxlbWVudEZvclN0eWxlcyhzdHlsZXMsIGlkLCBhZGRUb0RvY3VtZW50KTtcbn1cbmV4cG9ydHMuY3JlYXRlRWxlbWVudEZvclN0eWxlcyA9IGNyZWF0ZUVsZW1lbnRGb3JTdHlsZXM7XG4iLCJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XG59XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9wcm9taXNlVHlwZXNcIikpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnQocmVxdWlyZShcIi4vX3R5cGVndWFyZHNcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vZWxlbWVudFBvc2l0aW9uaW5nXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL2dlbmVyYWxIZWxwZXJzXCIpKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3Qgc2hhcmVkX3R5cGVzXzEgPSByZXF1aXJlKFwiQHRvb2xraXAvc2hhcmVkLXR5cGVzXCIpO1xuZnVuY3Rpb24gaXNIVE1MRWxlbWVudCh0ZXN0KSB7XG4gICAgcmV0dXJuICh0ZXN0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpO1xufVxuZXhwb3J0cy5pc0hUTUxFbGVtZW50ID0gaXNIVE1MRWxlbWVudDtcbmZ1bmN0aW9uIGhhc09mZnNldHModGVzdCkge1xuICAgIGlmIChzaGFyZWRfdHlwZXNfMS5pc051bGxPclVuZGVmaW5lZCh0ZXN0Lm9mZnNldEhlaWdodCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmV4cG9ydHMuaGFzT2Zmc2V0cyA9IGhhc09mZnNldHM7XG5mdW5jdGlvbiBpc1NlbGVjdGFibGUodGVzdCkge1xuICAgIHJldHVybiAhIXRlc3Quc2VsZWN0O1xufVxuZXhwb3J0cy5pc1NlbGVjdGFibGUgPSBpc1NlbGVjdGFibGU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHNoYXJlZF90eXBlc18xID0gcmVxdWlyZShcIkB0b29sa2lwL3NoYXJlZC10eXBlc1wiKTtcbmZ1bmN0aW9uIGlzRXF1YXRhYmxlKG9iaikge1xuICAgIGlmIChzaGFyZWRfdHlwZXNfMS5pc051bGxPclVuZGVmaW5lZChvYmopKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKG9iai5lcXVhbHMpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydHMuaXNFcXVhdGFibGUgPSBpc0VxdWF0YWJsZTtcbmZ1bmN0aW9uIGlzQ29tcGFyYWJsZShvYmopIHtcbiAgICBpZiAoc2hhcmVkX3R5cGVzXzEuaXNOdWxsT3JVbmRlZmluZWQob2JqKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGxldCBjb21wID0gb2JqO1xuICAgIGlmIChjb21wLmxlc3NUaGFuICYmIGNvbXAuZ3JlYXRlclRoYW4gJiYgY29tcC5lcXVhbHMpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydHMuaXNDb21wYXJhYmxlID0gaXNDb21wYXJhYmxlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBfbGlicmFyeV8xID0gcmVxdWlyZShcIi4vX2xpYnJhcnlcIik7XG5jbGFzcyBfU3R5bGVMaWJyYXJ5IGV4dGVuZHMgX2xpYnJhcnlfMS5fTGlicmFyeSB7XG4gICAgZ2V0IF9pZFN1ZmZpeCgpIHsgcmV0dXJuIFwic3R5bGVzXCI7IH1cbn1cbmV4cG9ydHMuU3R5bGVMaWJyYXJ5ID0gbmV3IF9TdHlsZUxpYnJhcnkoKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gX19leHBvcnQobSkge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcbn1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL19ldmVudFwiKSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHNoYXJlZF90eXBlc18xID0gcmVxdWlyZShcIkB0b29sa2lwL3NoYXJlZC10eXBlc1wiKTtcbmZ1bmN0aW9uIGlzRXF1YXRhYmxlKG9iaikge1xuICAgIGlmIChzaGFyZWRfdHlwZXNfMS5pc051bGxPclVuZGVmaW5lZChvYmopKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKG9iai5lcXVhbHMpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydHMuaXNFcXVhdGFibGUgPSBpc0VxdWF0YWJsZTtcbmZ1bmN0aW9uIGlzQ29tcGFyYWJsZShvYmopIHtcbiAgICBpZiAoc2hhcmVkX3R5cGVzXzEuaXNOdWxsT3JVbmRlZmluZWQob2JqKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGxldCBjb21wID0gb2JqO1xuICAgIGlmIChjb21wLmxlc3NUaGFuICYmIGNvbXAuZ3JlYXRlclRoYW4gJiYgY29tcC5lcXVhbHMpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydHMuaXNDb21wYXJhYmxlID0gaXNDb21wYXJhYmxlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBzaGFyZWRfdHlwZXNfMSA9IHJlcXVpcmUoXCJAdG9vbGtpcC9zaGFyZWQtdHlwZXNcIik7XG5jb25zdCBtYW5pcHVsYXRlXzEgPSByZXF1aXJlKFwiLi9tYW5pcHVsYXRlXCIpO1xuZnVuY3Rpb24gaXNDbG9uZWFibGUodGVzdCkge1xuICAgIGlmIChzaGFyZWRfdHlwZXNfMS5pc0Z1bmN0aW9uKHRlc3QuY2xvbmUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnRzLmlzQ2xvbmVhYmxlID0gaXNDbG9uZWFibGU7XG5mdW5jdGlvbiBpc01hcHBhYmxlKHRlc3QpIHtcbiAgICBpZiAoc2hhcmVkX3R5cGVzXzEuaXNBcnJheSh0ZXN0KSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHNoYXJlZF90eXBlc18xLmlzT2JqZWN0KHRlc3QpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnRzLmlzTWFwcGFibGUgPSBpc01hcHBhYmxlO1xuZnVuY3Rpb24gaXNFbXB0eU9iamVjdChvYmplY3QpIHtcbiAgICBpZiAoIXNoYXJlZF90eXBlc18xLmlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gKCFtYW5pcHVsYXRlXzEuZ2V0TmV4dEtleShvYmplY3QpKTtcbn1cbmV4cG9ydHMuaXNFbXB0eU9iamVjdCA9IGlzRW1wdHlPYmplY3Q7XG5mdW5jdGlvbiBpc0VtcHR5QXJyYXkob2JqZWN0KSB7XG4gICAgaWYgKCFzaGFyZWRfdHlwZXNfMS5pc0FycmF5KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAob2JqZWN0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmV4cG9ydHMuaXNFbXB0eUFycmF5ID0gaXNFbXB0eUFycmF5O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBtYW5pcHVsYXRlXzEgPSByZXF1aXJlKFwiLi9tYW5pcHVsYXRlXCIpO1xuY29uc3Qgc2hhcmVkX3R5cGVzXzEgPSByZXF1aXJlKFwiQHRvb2xraXAvc2hhcmVkLXR5cGVzXCIpO1xuZnVuY3Rpb24gY29tYmluZU9iamVjdHMob2JqQSwgb2JqQiwgZGVlcCkge1xuICAgIGxldCByZXQ7XG4gICAgbGV0IHRtcDtcbiAgICBsZXQgbG9vcFRocnU7XG4gICAgcmV0ID0gb2JqQSB8fCB7fTtcbiAgICBpZiAob2JqQikge1xuICAgICAgICBfbG9vcFRocnUob2JqQiwgcmV0LCBkZWVwKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn1cbmV4cG9ydHMuY29tYmluZU9iamVjdHMgPSBjb21iaW5lT2JqZWN0cztcbmZ1bmN0aW9uIF9sb29wVGhydShvYmpUb0NvbWJpbmUsIG91dHB1dE9iaiwgZGVlcCkge1xuICAgIGlmICghb2JqVG9Db21iaW5lKSB7XG4gICAgICAgIHJldHVybiBvdXRwdXRPYmo7XG4gICAgfVxuICAgIGlmIChvYmpUb0NvbWJpbmUuX19wcm90b19fKSB7XG4gICAgICAgIG91dHB1dE9iai5fX3Byb3RvX18gPSBPYmplY3QuY3JlYXRlKG9ialRvQ29tYmluZS5fX3Byb3RvX18pO1xuICAgIH1cbiAgICBtYW5pcHVsYXRlXzEubWFwKG9ialRvQ29tYmluZSwgKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgaWYgKHNoYXJlZF90eXBlc18xLmlzTnVsbE9yVW5kZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZWVwICYmICh0eXBlb2YgKHZhbHVlKSA9PT0gXCJvYmplY3RcIikpIHtcbiAgICAgICAgICAgIGxldCB0bXAgPSBvdXRwdXRPYmpba2V5XTtcbiAgICAgICAgICAgIGlmICghdG1wKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0T2JqW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0bXAgPSBjb21iaW5lT2JqZWN0cyh0bXAsIHZhbHVlLCBkZWVwKTtcbiAgICAgICAgICAgIG91dHB1dE9ialtrZXldID0gdG1wO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb3V0cHV0T2JqW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZnVuY3Rpb24gcmVjb25jaWxlT3B0aW9ucyhvcHRpb25zLCBkZWZhdWx0cykge1xuICAgIGxldCBrZXk7XG4gICAgbGV0IG9wdDtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICA7XG4gICAgZm9yIChrZXkgaW4gZGVmYXVsdHMpIHtcbiAgICAgICAgaWYgKGRlZmF1bHRzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgIG9wdCA9IG9wdGlvbnNba2V5XTtcbiAgICAgICAgICAgIGlmICgob3B0ID09PSB1bmRlZmluZWQpIHx8IChvcHQgPT09IG51bGwpKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9uc1trZXldID0gZGVmYXVsdHNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3B0aW9ucztcbn1cbmV4cG9ydHMucmVjb25jaWxlT3B0aW9ucyA9IHJlY29uY2lsZU9wdGlvbnM7XG4iLCJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XG59XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9hcnJheXNcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vZGF0ZXNcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vbnVtYmVyc1wiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9zdHJpbmdzXCIpKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZnVuY3Rpb24gcGFkVG9EaWdpdHModG9QYWQsIG51bWJlck9mRGlnaXRzKSB7XG4gICAgbGV0IG91dEFyciA9IHRvUGFkLnRvU3RyaW5nKCkuc3BsaXQoXCJcIik7XG4gICAgd2hpbGUgKG91dEFyci5sZW5ndGggPCBudW1iZXJPZkRpZ2l0cykge1xuICAgICAgICBvdXRBcnIuc3BsaWNlKDAsIDAsIFwiMFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIG91dEFyci5qb2luKFwiXCIpO1xufVxuZXhwb3J0cy5wYWRUb0RpZ2l0cyA9IHBhZFRvRGlnaXRzO1xuZnVuY3Rpb24gZnVsbEhleFN0cmluZyh2YWwsIGxlbmd0aCkge1xuICAgIDtcbiAgICBsZXQgb3V0SGV4U3RyaW5nO1xuICAgIGxldCBpO1xuICAgIGxlbmd0aCA9IGxlbmd0aCB8fCAwO1xuICAgIG91dEhleFN0cmluZyA9IHZhbC50b1N0cmluZygxNik7XG4gICAgaWYgKG91dEhleFN0cmluZy5sZW5ndGggPCBsZW5ndGgpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IChsZW5ndGggLSBvdXRIZXhTdHJpbmcubGVuZ3RoKTsgaSArPSAxKSB7XG4gICAgICAgICAgICBvdXRIZXhTdHJpbmcgPSBcIjBcIiArIG91dEhleFN0cmluZztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0SGV4U3RyaW5nO1xufVxuZXhwb3J0cy5mdWxsSGV4U3RyaW5nID0gZnVsbEhleFN0cmluZztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3Qgc2hhcmVkX3R5cGVzXzEgPSByZXF1aXJlKFwiQHRvb2xraXAvc2hhcmVkLXR5cGVzXCIpO1xuZnVuY3Rpb24gcGllY2Uoc3RyLCBkZWxpbSwgcGMgPSAxKSB7XG4gICAgbGV0IHNwbGl0X2FycjtcbiAgICBzcGxpdF9hcnIgPSBzdHIuc3BsaXQoZGVsaW0pO1xuICAgIHJldHVybiBzcGxpdF9hcnJbcGNdIHx8IFwiXCI7XG59XG5leHBvcnRzLnBpZWNlID0gcGllY2U7XG47XG5mdW5jdGlvbiBhZGRQaWVjZShzdHIsIG5leHRQaWVjZSwgZGVsaW0pIHtcbiAgICBpZiAoc3RyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgc3RyICs9IGRlbGltO1xuICAgIH1cbiAgICByZXR1cm4gc3RyICsgbmV4dFBpZWNlO1xufVxuZXhwb3J0cy5hZGRQaWVjZSA9IGFkZFBpZWNlO1xuZnVuY3Rpb24gdGl0bGVDYXNlKHN0ciwgZGVsaW0gPSBcIiBcIikge1xuICAgIGxldCB3b3JkcztcbiAgICBsZXQgdztcbiAgICBsZXQgb3V0O1xuICAgIG91dCA9IFwiXCI7XG4gICAgd29yZHMgPSBzdHIuc3BsaXQoZGVsaW0pO1xuICAgIGZvciAodyA9IDA7IHcgPCB3b3Jkcy5sZW5ndGg7IHcgKz0gMSkge1xuICAgICAgICBpZiAodyAhPT0gMCkge1xuICAgICAgICAgICAgb3V0ICs9IGRlbGltO1xuICAgICAgICB9XG4gICAgICAgIG91dCArPSBjaGFyQXQod29yZHNbd10sIDApLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIG91dCArPSByZXN0KHdvcmRzW3ddLCAxKS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xufVxuZXhwb3J0cy50aXRsZUNhc2UgPSB0aXRsZUNhc2U7XG47XG5mdW5jdGlvbiBzZW50ZW5jZUNhc2Uoc3RyKSB7XG4gICAgbGV0IG91dDtcbiAgICBvdXQgPSBjaGFyQXQoc3RyLCAwKS50b1VwcGVyQ2FzZSgpO1xuICAgIG91dCArPSByZXN0KHN0ciwgMSkudG9Mb3dlckNhc2UoKTtcbiAgICByZXR1cm4gb3V0O1xufVxuZXhwb3J0cy5zZW50ZW5jZUNhc2UgPSBzZW50ZW5jZUNhc2U7XG47XG5mdW5jdGlvbiBjaGFyQXQoc3RyLCBpZHgpIHtcbiAgICByZXR1cm4gc3RyLnN1YnN0cihpZHgsIDEpO1xufVxuZXhwb3J0cy5jaGFyQXQgPSBjaGFyQXQ7XG47XG5mdW5jdGlvbiByZXN0KHN0ciwgaWR4KSB7XG4gICAgcmV0dXJuIHN0ci5zdWJzdHJpbmcoaWR4LCBzdHIubGVuZ3RoKTtcbn1cbmV4cG9ydHMucmVzdCA9IHJlc3Q7XG47XG5mdW5jdGlvbiB0cmltKHN0cikge1xuICAgIGxldCByZXQ7XG4gICAgcmV0ID0gc3RyLnJlcGxhY2UoL15cXHMqL2csIFwiXCIpO1xuICAgIHJldCA9IHJldC5yZXBsYWNlKC9cXHMqPyQvZywgXCJcIik7XG4gICAgcmV0dXJuIHJldDtcbn1cbmV4cG9ydHMudHJpbSA9IHRyaW07XG47XG5mdW5jdGlvbiBzdHJpcFNwYWNlcyhzdHIpIHtcbiAgICBsZXQgcmV0O1xuICAgIHJldCA9IHN0ci5yZXBsYWNlKC9cXHMvZywgXCJcIik7XG4gICAgcmV0ID0gcmV0LnJlcGxhY2UoL1xcJm5ic3BcXDsvZywgXCJcIik7XG4gICAgcmV0dXJuIHJldDtcbn1cbmV4cG9ydHMuc3RyaXBTcGFjZXMgPSBzdHJpcFNwYWNlcztcbmZ1bmN0aW9uIGZvcm1hdChzdHIsIC4uLnJlcGxhY2VtZW50cykge1xuICAgIGxldCBzdHJpbmdBcnIgPSBzdHIuc3BsaXQoXCJcIik7XG4gICAgaWYgKCFyZXBsYWNlbWVudHMpIHtcbiAgICAgICAgcmVwbGFjZW1lbnRzID0gW107XG4gICAgfVxuICAgIGxldCBudW1iZXIgPSBcIlwiO1xuICAgIGxldCBsb29raW5nRm9yTnVtYmVyID0gZmFsc2U7XG4gICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgc3RyaW5nQXJyLmxlbmd0aDsgaWR4ICs9IDEpIHtcbiAgICAgICAgbGV0IGNoYXIgPSBzdHJpbmdBcnJbaWR4XTtcbiAgICAgICAgaWYgKGNoYXIgPT09IFwiXFxcXFwiKSB7XG4gICAgICAgICAgICBzdHJpbmdBcnJbaWR4XSA9IFwiXCI7XG4gICAgICAgICAgICBpZHggKz0gMTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNoYXIgPT09IFwie1wiKSB7XG4gICAgICAgICAgICBsb29raW5nRm9yTnVtYmVyID0gdHJ1ZTtcbiAgICAgICAgICAgIHN0cmluZ0FycltpZHhdID0gXCJcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjaGFyID09PSBcIn1cIiAmJiBsb29raW5nRm9yTnVtYmVyKSB7XG4gICAgICAgICAgICBzdHJpbmdBcnJbaWR4XSA9ICghc2hhcmVkX3R5cGVzXzEuaXNOdWxsT3JVbmRlZmluZWQocmVwbGFjZW1lbnRzWytudW1iZXJdKSA/IHJlcGxhY2VtZW50c1srbnVtYmVyXS50b1N0cmluZygpIDogXCJ7XCIgKyBudW1iZXIgKyBcIn1cIik7XG4gICAgICAgICAgICBsb29raW5nRm9yTnVtYmVyID0gZmFsc2U7XG4gICAgICAgICAgICBudW1iZXIgPSBcIlwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzTnVtZXJpYyhjaGFyKSAmJiBsb29raW5nRm9yTnVtYmVyKSB7XG4gICAgICAgICAgICBudW1iZXIgKz0gY2hhcjtcbiAgICAgICAgICAgIHN0cmluZ0FycltpZHhdID0gXCJcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChsb29raW5nRm9yTnVtYmVyKSB7XG4gICAgICAgICAgICBsb29raW5nRm9yTnVtYmVyID0gZmFsc2U7XG4gICAgICAgICAgICBudW1iZXIgPSBcIlwiO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdHJpbmdBcnIuam9pbihcIlwiKTtcbn1cbmV4cG9ydHMuZm9ybWF0ID0gZm9ybWF0O1xuZnVuY3Rpb24gaXNOdW1lcmljKHN0cikge1xuICAgIHJldHVybiAvXlswLTldKyQvLnRlc3Qoc3RyKTtcbn1cbmV4cG9ydHMuaXNOdW1lcmljID0gaXNOdW1lcmljO1xuZnVuY3Rpb24gYWRkTGVhZGluZ1plcm9lcyhjb3VudCwgdW5wYWRkZWQpIHtcbiAgICA7XG4gICAgbGV0IG91dDtcbiAgICBpZiAodHlwZW9mIHVucGFkZGVkID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIG91dCA9IHVucGFkZGVkO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgb3V0ID0gdW5wYWRkZWQudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgbGV0IHo7XG4gICAgZm9yICh6ID0gb3V0Lmxlbmd0aDsgeiA8IGNvdW50OyB6ICs9IDEpIHtcbiAgICAgICAgb3V0ID0gXCIwXCIgKyBvdXQ7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG59XG5leHBvcnRzLmFkZExlYWRpbmdaZXJvZXMgPSBhZGRMZWFkaW5nWmVyb2VzO1xuO1xuZnVuY3Rpb24gc3RyaXBIVE1MKHN0cikge1xuICAgIGxldCBvdXQ7XG4gICAgb3V0ID0gc3RyLnJlcGxhY2UoL1xcPC4qP1xcPi9nLCBcIlwiKTtcbiAgICByZXR1cm4gb3V0O1xufVxuZXhwb3J0cy5zdHJpcEhUTUwgPSBzdHJpcEhUTUw7XG5mdW5jdGlvbiBqb2luKGpvaW5DaGFyLCAuLi50b0pvaW4pIHtcbiAgICByZXR1cm4gdG9Kb2luLmpvaW4oam9pbkNoYXIpO1xufVxuZXhwb3J0cy5qb2luID0gam9pbjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgaGlzdG9yeU5vZGVfMSA9IHJlcXVpcmUoXCIuL2hpc3RvcnlOb2RlXCIpO1xuY29uc3Qgb2JqZWN0X2hlbHBlcnNfMSA9IHJlcXVpcmUoXCJAdG9vbGtpcC9vYmplY3QtaGVscGVyc1wiKTtcbmNsYXNzIEhpc3RvcnlDaGFpbiB7XG4gICAgZ2V0IGN1cnJlbnRTdGF0ZSgpIHsgcmV0dXJuIHRoaXMuX2N1ck5vZGUuZGF0YTsgfVxuICAgIHB1c2goZGF0YSkge1xuICAgICAgICBpZiAodGhpcy5fcHJldmVudEFkZGl0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxldCBub2RlID0gbmV3IGhpc3RvcnlOb2RlXzEuSGlzdG9yeU5vZGUoZGF0YSk7XG4gICAgICAgIGlmICghdGhpcy5fc3RhcnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXJ0ID0gbm9kZTtcbiAgICAgICAgICAgIHRoaXMuX2VuZCA9IG5vZGU7XG4gICAgICAgICAgICB0aGlzLl9jdXJOb2RlID0gbm9kZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fY3VyTm9kZSAhPT0gdGhpcy5fZW5kKSB7XG4gICAgICAgICAgICB0aGlzLl9jbGVhclRvQ3VySWR4KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZW5kLm5leHQgPSBub2RlO1xuICAgICAgICBub2RlLnByZXZpb3VzID0gdGhpcy5fZW5kO1xuICAgICAgICB0aGlzLl9lbmQgPSBub2RlO1xuICAgICAgICB0aGlzLl9jdXJOb2RlID0gdGhpcy5fZW5kO1xuICAgIH1cbiAgICBfY2xlYXJUb0N1cklkeCgpIHtcbiAgICAgICAgdGhpcy5fZW5kID0gdGhpcy5fY3VyTm9kZTtcbiAgICAgICAgdGhpcy5fY3VyTm9kZS5uZXh0ID0gbnVsbDtcbiAgICB9XG4gICAgbmF2aWdhdGVCYWNrKGNiKSB7XG4gICAgICAgIGlmICghdGhpcy5fY3VyTm9kZS5wcmV2aW91cykge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3V0ID0gdGhpcy5fY3VyTm9kZS5wcmV2aW91cy5kYXRhO1xuICAgICAgICB0aGlzLl9jdXJOb2RlID0gdGhpcy5fY3VyTm9kZS5wcmV2aW91cztcbiAgICAgICAgaWYgKGNiKSB7XG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVOYXZpZ2F0ZUNhbGxiYWNrKG91dCwgY2IpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIG5hdmlnYXRlRm9yd2FyZChjYikge1xuICAgICAgICBpZiAoIXRoaXMuX2N1ck5vZGUubmV4dCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3V0ID0gdGhpcy5fY3VyTm9kZS5uZXh0LmRhdGE7XG4gICAgICAgIHRoaXMuX2N1ck5vZGUgPSB0aGlzLl9jdXJOb2RlLm5leHQ7XG4gICAgICAgIGlmIChjYikge1xuICAgICAgICAgICAgdGhpcy5faGFuZGxlTmF2aWdhdGVDYWxsYmFjayhvdXQsIGNiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICBfaGFuZGxlTmF2aWdhdGVDYWxsYmFjayhzdGF0ZSwgY2IpIHtcbiAgICAgICAgdGhpcy5fcHJldmVudEFkZGl0aW9ucyA9IHRydWU7XG4gICAgICAgIGNiKHN0YXRlKTtcbiAgICAgICAgdGhpcy5fcHJldmVudEFkZGl0aW9ucyA9IGZhbHNlO1xuICAgIH1cbiAgICB1cGRhdGVDdXJyZW50U3RhdGUobmV3U3RhdGUpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9jdXJOb2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGN1clN0YXRlID0gdGhpcy5fY3VyTm9kZS5kYXRhO1xuICAgICAgICBsZXQgY29tYmluZWRTdGF0ZSA9IG9iamVjdF9oZWxwZXJzXzEuY29tYmluZU9iamVjdHMoY3VyU3RhdGUsIG5ld1N0YXRlLCB0cnVlKTtcbiAgICAgICAgdGhpcy5fY3VyTm9kZS5kYXRhID0gY29tYmluZWRTdGF0ZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuZXhwb3J0cy5IaXN0b3J5Q2hhaW4gPSBIaXN0b3J5Q2hhaW47XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNsYXNzIEhpc3RvcnlOb2RlIHtcbiAgICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgfVxufVxuZXhwb3J0cy5IaXN0b3J5Tm9kZSA9IEhpc3RvcnlOb2RlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBpZGVudGlmaWFibGVfMSA9IHJlcXVpcmUoXCJAdG9vbGtpcC9pZGVudGlmaWFibGVcIik7XG5jb25zdCBtb2RlbE9iamVjdF8xID0gcmVxdWlyZShcIi4vbW9kZWxPYmplY3RcIik7XG5jbGFzcyBNSWRlbnRpZmlhYmxlIGV4dGVuZHMgbW9kZWxPYmplY3RfMS5NT2JqZWN0IHtcbiAgICBnZXQgaWQoKSB7IHJldHVybiB0aGlzLmdldCgnaWQnKTsgfVxuICAgIHNldCBpZChkYXRhKSB7IHRoaXMuc2V0KCdpZCcsIGRhdGEpOyB9XG4gICAgc3RhdGljIGdldCBfdW5pcXVlS2V5KCkgeyByZXR1cm4gdGhpcy5uYW1lOyB9XG4gICAgc3RhdGljIF9nZW5lcmF0ZU5ld0lkKHN1ZmZpeCkge1xuICAgICAgICBjb25zdCB1bmlxdWVLZXkgPSBzdWZmaXggfHwgdGhpcy5fdW5pcXVlS2V5O1xuICAgICAgICByZXR1cm4gaWRlbnRpZmlhYmxlXzEuZ2VuZXJhdGVVbmlxdWVJZCh1bmlxdWVLZXksIHN1ZmZpeCk7XG4gICAgfVxuICAgIHN0YXRpYyBfdXBkYXRlTGFzdElkKGxhc3RJZCwgc3VmZml4KSB7XG4gICAgICAgIGNvbnN0IHVuaXF1ZUtleSA9IHN1ZmZpeCB8fCB0aGlzLl91bmlxdWVLZXk7XG4gICAgICAgIGlkZW50aWZpYWJsZV8xLnJlZ2lzdGVyVW5pcXVlSWQobGFzdElkLCB1bmlxdWVLZXkpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihkYXRhVG9Db3B5LCB0cmFuc2Zvcm1zLCBzdWZmaXgpIHtcbiAgICAgICAgc3VwZXIoZGF0YVRvQ29weSk7XG4gICAgICAgIGlmIChkYXRhVG9Db3B5ID09PSBudWxsIHx8IGRhdGFUb0NvcHkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRhdGFUb0NvcHkuaWQpIHtcbiAgICAgICAgICAgIHRoaXMuY29uc3RydWN0b3IuX3VwZGF0ZUxhc3RJZChkYXRhVG9Db3B5LmlkLCBzdWZmaXgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgbmV3SWQgPSB0aGlzLmNvbnN0cnVjdG9yLl9nZW5lcmF0ZU5ld0lkKHN1ZmZpeCk7XG4gICAgICAgICAgICB0aGlzLnNldCgnaWQnLCBuZXdJZCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLk1JZGVudGlmaWFibGUgPSBNSWRlbnRpZmlhYmxlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnQocmVxdWlyZShcIi4vX3R5cGVHdWFyZHNcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vdW5pcXVlSWRcIikpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBhYnN0cmFjdENsYXNzZXNfMSA9IHJlcXVpcmUoXCIuLi9hYnN0cmFjdENsYXNzZXNcIik7XG5jb25zdCBvYmplY3RfaGVscGVyc18xID0gcmVxdWlyZShcIkB0b29sa2lwL29iamVjdC1oZWxwZXJzXCIpO1xuY2xhc3MgTU9iamVjdCBleHRlbmRzIGFic3RyYWN0Q2xhc3Nlc18xLl9LZXllZE1vZGVsIHtcbiAgICBjb25zdHJ1Y3RvcihkYXRhLCB0cmFuc2Zvcm1zKSB7XG4gICAgICAgIHN1cGVyKGRhdGEsIHRyYW5zZm9ybXMpO1xuICAgIH1cbiAgICBfZ2V0RGVmYXVsdFZhbHVlcygpIHsgcmV0dXJuIHt9OyB9XG4gICAgX21hcChkYXRhLCBtYXBGdW5jKSB7XG4gICAgICAgIG9iamVjdF9oZWxwZXJzXzEubWFwKGRhdGEsIG1hcEZ1bmMpO1xuICAgIH1cbiAgICBfZ2V0VmFsdWUobW9kZWwsIGtleSkgeyByZXR1cm4gbW9kZWxba2V5XTsgfVxuICAgIGdldChrZXkpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmdldChrZXkpO1xuICAgIH1cbiAgICBfc2V0VmFsdWUobW9kZWwsIGtleSwgdmFsdWUpIHtcbiAgICAgICAgbW9kZWxba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgICBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gc3VwZXIuc2V0KGtleSwgdmFsdWUpO1xuICAgIH1cbn1cbmV4cG9ydHMuTU9iamVjdCA9IE1PYmplY3Q7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IF9tb2RlbF8xID0gcmVxdWlyZShcIi4vX21vZGVsXCIpO1xuY29uc3QgY29yZV8xID0gcmVxdWlyZShcIi4uL190eXBlZ3VhcmRzL2NvcmVcIik7XG5jb25zdCBzaGFyZWRfdHlwZXNfMSA9IHJlcXVpcmUoXCJAdG9vbGtpcC9zaGFyZWQtdHlwZXNcIik7XG5jbGFzcyBfS2V5ZWRNb2RlbCBleHRlbmRzIF9tb2RlbF8xLl9Nb2RlbCB7XG4gICAgY29uc3RydWN0b3IoZGF0YSwgdHJhbnNmb3Jtcykge1xuICAgICAgICBzdXBlcihkYXRhLCB0cmFuc2Zvcm1zKTtcbiAgICB9XG4gICAgZ2V0VHlwZSgpIHsgcmV0dXJuICdrZXllZCc7IH1cbiAgICBhZGRLZXllZExpc3RlbmVyKGtleSwgY2JGdW5jKSB7XG4gICAgICAgIHRoaXMuX2V2ZW50LmFkZEV2ZW50TGlzdGVuZXIoKHBheWxvYWQpID0+IHtcbiAgICAgICAgICAgIGlmIChwYXlsb2FkLmtleSAhPT0ga2V5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2JGdW5jKHBheWxvYWQpO1xuICAgICAgICB9LCB0aGlzKTtcbiAgICB9XG4gICAgX2dldEFwcGxpY2FibGVUcmFuc2Zvcm1zKGtleSkge1xuICAgICAgICBpZiAoIWtleSkge1xuICAgICAgICAgICAgcmV0dXJuIHN1cGVyLl9nZXRBcHBsaWNhYmxlVHJhbnNmb3JtcygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl90cmFuc2Zvcm1zW2tleV07XG4gICAgfVxuICAgIGdldChrZXkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lubmVyR2V0KGtleSk7XG4gICAgfVxuICAgIF9pbm5lckdldChrZXkpIHtcbiAgICAgICAgY29uc3QgbW9kZWwgPSB0aGlzLl9nZXRWYWx1ZSh0aGlzLl9pbm5lck1vZGVsLCBrZXkpO1xuICAgICAgICByZXR1cm4gY29yZV8xLmlzTW9kZWwobW9kZWwpID8gbW9kZWwuZ2V0RGF0YSgpIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgICBfaW5uZXJHZXREYXRhKCkge1xuICAgICAgICBpZiAoc2hhcmVkX3R5cGVzXzEuaXNOdWxsT3JVbmRlZmluZWQodGhpcy5faW5uZXJNb2RlbCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pbm5lck1vZGVsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG91dCA9IHRoaXMuX2dldERlZmF1bHRWYWx1ZXMoKTtcbiAgICAgICAgdGhpcy5fbWFwKHRoaXMuX2lubmVyTW9kZWwsICh2YWwsIGtleSkgPT4ge1xuICAgICAgICAgICAgaWYgKCFjb3JlXzEuaXNNb2RlbCh2YWwpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fc2V0VmFsdWUob3V0LCBrZXksIHZhbC5nZXREYXRhKCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAgZ2V0TW9kZWwoa2V5KSB7XG4gICAgICAgIGNvbnN0IG0gPSB0aGlzLl9nZXRWYWx1ZSh0aGlzLl9pbm5lck1vZGVsLCBrZXkpO1xuICAgICAgICBpZiAoIWNvcmVfMS5pc01vZGVsKG0pKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKG0uZ2V0VHlwZSgpKSB7XG4gICAgICAgICAgICBjYXNlICdhcnJheSc6IHJldHVybiBtO1xuICAgICAgICAgICAgY2FzZSAna2V5ZWQnOiByZXR1cm4gbTtcbiAgICAgICAgICAgIGNhc2UgJ3ByaW1pdGl2ZSc6IHJldHVybiBtO1xuICAgICAgICB9XG4gICAgfVxuICAgIHVwZGF0ZShrZXksIG5ld1ZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB0aGlzLmdldChrZXkpKSwgbmV3VmFsdWUpO1xuICAgICAgICB0aGlzLl9pbm5lclNldCh7IGtleSwgdmFsdWUgfSk7XG4gICAgfVxuICAgIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2lubmVyU2V0KHsga2V5LCB2YWx1ZSB9KTtcbiAgICB9XG4gICAgX2lubmVyU2V0KHBheWxvYWQpIHtcbiAgICAgICAgY29uc3QgeyB2YWx1ZSwga2V5IH0gPSBwYXlsb2FkO1xuICAgICAgICBjb25zdCBvbGRNb2RlbCA9IHRoaXMuZ2V0TW9kZWwoa2V5KTtcbiAgICAgICAgaWYgKGNvcmVfMS5pc01vZGVsKG9sZE1vZGVsKSkge1xuICAgICAgICAgICAgb2xkTW9kZWwuc2V0RGF0YSh2YWx1ZSk7XG4gICAgICAgICAgICB0aGlzLl9zZXRWYWx1ZSh0aGlzLl9pbm5lck1vZGVsLCBrZXksIG9sZE1vZGVsKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IG9sZFZhbHVlID0gcGF5bG9hZC5vbGRWYWx1ZSB8fCB0aGlzLmdldChrZXkpO1xuICAgICAgICAgICAgY29uc3QgbmV3TW9kZWwgPSB0aGlzLl93cmFwSW5Nb2RlbCh2YWx1ZSwga2V5KTtcbiAgICAgICAgICAgIHRoaXMuX3NldFZhbHVlKHRoaXMuX2lubmVyTW9kZWwsIGtleSwgbmV3TW9kZWwpO1xuICAgICAgICAgICAgdGhpcy5fc2VuZFVwZGF0ZShPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHBheWxvYWQpLCB7IG9sZFZhbHVlLCB2YWx1ZTogbmV3TW9kZWwuZ2V0RGF0YSgpIH0pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5nZXRNb2RlbChrZXkpO1xuICAgIH1cbiAgICBfaW5uZXJTZXREYXRhKHBheWxvYWQpIHtcbiAgICAgICAgY29uc3QgeyB2YWx1ZSB9ID0gcGF5bG9hZDtcbiAgICAgICAgaWYgKGNvcmVfMS5pc01vZGVsKHZhbHVlKSkge1xuICAgICAgICAgICAgc3VwZXIuX2lubmVyU2V0RGF0YShPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHBheWxvYWQpLCB7IHZhbHVlOiB0aGlzLl93cmFwSW5Nb2RlbCh2YWx1ZSkgfSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHNoYXJlZF90eXBlc18xLmlzTnVsbE9yVW5kZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgICAgc3VwZXIuX2lubmVyU2V0RGF0YShwYXlsb2FkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IG1vZGVsVmFsdWUgPSB0aGlzLl9nZXREZWZhdWx0VmFsdWVzKCk7XG4gICAgICAgICAgICB0aGlzLl9tYXAodmFsdWUsICh2YWwsIGtleSkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCB1cGRhdGVkVmFsID0gdGhpcy5fd3JhcEluTW9kZWwodmFsLCBrZXkpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3NldFZhbHVlKG1vZGVsVmFsdWUsIGtleSwgdXBkYXRlZFZhbCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHN1cGVyLl9pbm5lclNldERhdGEoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBwYXlsb2FkKSwgeyB2YWx1ZTogbW9kZWxWYWx1ZSB9KSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2lubmVySW1wb3J0KGRhdGEpIHtcbiAgICAgICAgY29uc3Qgb3V0ID0gdGhpcy5fZ2V0RGVmYXVsdFZhbHVlcygpO1xuICAgICAgICB0aGlzLl9tYXAoZGF0YSwgKHZhbCwga2V5KSA9PiB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBsZXQgdXBkYXRlZFZhbHVlID0gdmFsO1xuICAgICAgICAgICAgY29uc3QgdHJhbnNmb3JtID0gKF9hID0gdGhpcy5fZ2V0QXBwbGljYWJsZVRyYW5zZm9ybXMoa2V5KSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmluY29taW5nO1xuICAgICAgICAgICAgaWYgKHRyYW5zZm9ybSkge1xuICAgICAgICAgICAgICAgIHVwZGF0ZWRWYWx1ZSA9IHRyYW5zZm9ybSh2YWwsIGtleSwgdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9zZXRWYWx1ZShvdXQsIGtleSwgdGhpcy5fd3JhcEluTW9kZWwodXBkYXRlZFZhbHVlLCBrZXkpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIF9pbm5lckV4cG9ydCgpIHtcbiAgICAgICAgY29uc3Qgb3V0ID0gdGhpcy5fZ2V0RGVmYXVsdFZhbHVlcygpO1xuICAgICAgICB0aGlzLl9tYXAodGhpcy5faW5uZXJNb2RlbCwgKHZhbCwga2V5KSA9PiB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBsZXQgb3V0VmFsdWUgPSBjb3JlXzEuaXNNb2RlbCh2YWwpID8gdmFsLmV4cG9ydCgpIDogdmFsO1xuICAgICAgICAgICAgY29uc3QgdHJhbnNmb3JtID0gKF9hID0gdGhpcy5fZ2V0QXBwbGljYWJsZVRyYW5zZm9ybXMoa2V5KSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm91dGdvaW5nO1xuICAgICAgICAgICAgaWYgKHRyYW5zZm9ybSkge1xuICAgICAgICAgICAgICAgIG91dFZhbHVlID0gdHJhbnNmb3JtKG91dFZhbHVlLCBrZXksIHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fc2V0VmFsdWUob3V0LCBrZXksIG91dFZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxufVxuZXhwb3J0cy5fS2V5ZWRNb2RlbCA9IF9LZXllZE1vZGVsO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBhYnN0cmFjdENsYXNzZXNfMSA9IHJlcXVpcmUoXCIuLi9hYnN0cmFjdENsYXNzZXNcIik7XG5jb25zdCBvYmplY3RfaGVscGVyc18xID0gcmVxdWlyZShcIkB0b29sa2lwL29iamVjdC1oZWxwZXJzXCIpO1xuY29uc3Qgc2hhcmVkX3R5cGVzXzEgPSByZXF1aXJlKFwiQHRvb2xraXAvc2hhcmVkLXR5cGVzXCIpO1xuY2xhc3MgTUFycmF5IGV4dGVuZHMgYWJzdHJhY3RDbGFzc2VzXzEuX0tleWVkTW9kZWxzIHtcbiAgICBfZ2V0RGVmYXVsdFZhbHVlcygpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBfbWFwKGRhdGEsIG1hcEZ1bmMpIHtcbiAgICAgICAgb2JqZWN0X2hlbHBlcnNfMS5tYXAoZGF0YSwgbWFwRnVuYyk7XG4gICAgfVxuICAgIF9nZXRWYWx1ZShvdXRwdXQsIGtleSkge1xuICAgICAgICByZXR1cm4gb3V0cHV0W2tleV07XG4gICAgfVxuICAgIF9zZXRWYWx1ZShvdXRwdXQsIGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuX3Nob3VsZFNwbGljZShvdXRwdXQsIGtleSwgdmFsdWUpKSB7XG4gICAgICAgICAgICBvdXRwdXQuc3BsaWNlKGtleSwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvdXRwdXRba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9zaG91bGRTcGxpY2Uob3V0cHV0LCBrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmIChrZXkgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGtleSA+PSBvdXRwdXQubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaGFyZWRfdHlwZXNfMS5pc1VuZGVmaW5lZCh2YWx1ZS5nZXREYXRhKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGFkZChlbGVtZW50KSB7XG4gICAgICAgIHRoaXMuX2lubmVyU2V0KHtcbiAgICAgICAgICAgIGtleTogdGhpcy5faW5uZXJNb2RlbC5sZW5ndGgsXG4gICAgICAgICAgICB2YWx1ZTogZWxlbWVudFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuZXhwb3J0cy5NQXJyYXkgPSBNQXJyYXk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IG9iamVjdF9oZWxwZXJzXzEgPSByZXF1aXJlKFwiQHRvb2xraXAvb2JqZWN0LWhlbHBlcnNcIik7XG5jb25zdCBjb21wYXJhYmxlXzEgPSByZXF1aXJlKFwiQHRvb2xraXAvY29tcGFyYWJsZVwiKTtcbmNvbnN0IHByaW1pdGl2ZU1vZGVsc18xID0gcmVxdWlyZShcIi4uL3ByaW1pdGl2ZU1vZGVsc1wiKTtcbmNsYXNzIFNlbGVjdG9yIHtcbiAgICBjb25zdHJ1Y3Rvcihtb2RlbCwgcHJvY2Vzc29yLCBmaWx0ZXJzKSB7XG4gICAgICAgIHRoaXMuX2FwcGx5RnVuY3MgPSBbXTtcbiAgICAgICAgdGhpcy5fbWFwRnVuY3MgPSBbXTtcbiAgICAgICAgdGhpcy5fcHJvY2Vzc29yID0gcHJvY2Vzc29yIHx8ICgoZGF0YSkgPT4geyByZXR1cm4gZGF0YTsgfSk7XG4gICAgICAgIHRoaXMuX2xhc3RNb2RlbCA9IHRoaXMuX3Byb2Nlc3Nvcihtb2RlbC5nZXREYXRhKCksIHt9KTtcbiAgICAgICAgdGhpcy5fc2V0dXBGaWx0ZXJzKGZpbHRlcnMgfHwge30pO1xuICAgICAgICB0aGlzLl9hZGRFdmVudExpc3RlbmVyKG1vZGVsKTtcbiAgICB9XG4gICAgZ2V0RGF0YSgpIHsgcmV0dXJuIHRoaXMuX2xhc3RNb2RlbDsgfVxuICAgIF9zZXR1cEZpbHRlcnMoeyBrZXlzID0gW10sIGV2ZW50VHlwZXMgPSBbXSB9KSB7XG4gICAgICAgIHRoaXMuX2ZpbHRlck1hcCA9IHtcbiAgICAgICAgICAgIGtleXM6IG9iamVjdF9oZWxwZXJzXzEuYXJyYXlUb01hcChrZXlzKSxcbiAgICAgICAgICAgIGV2ZW50VHlwZXM6IG9iamVjdF9oZWxwZXJzXzEuYXJyYXlUb01hcChldmVudFR5cGVzKSxcbiAgICAgICAgICAgIGN1c3RvbUZpbHRlcnM6IFtdXG4gICAgICAgIH07XG4gICAgfVxuICAgIGZpbHRlcihmaWx0ZXJGdW5jKSB7XG4gICAgICAgIHRoaXMuX2ZpbHRlck1hcC5jdXN0b21GaWx0ZXJzLnB1c2goZmlsdGVyRnVuYyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXNlbGVjdChjYWxsYmFja3MpIHtcbiAgICAgICAgY29uc3QgZXZlbnQgPSB0aGlzLl9jcmVhdGVSZXNlbGVjdEV2ZW50KCk7XG4gICAgICAgIGlmICghY2FsbGJhY2tzKSB7XG4gICAgICAgICAgICB0aGlzLl9ub3RpZnlDYWxsYmFja3MoZXZlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgeyBhcHBseSwgbWFwIH0gPSBjYWxsYmFja3M7XG4gICAgICAgICAgICBpZiAoYXBwbHkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9ub3RpZnlBcHBseVNlbGVjdG9ycyhldmVudCwgYXBwbHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hcCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX25vdGlmeU1hcFNlbGVjdG9ycyhldmVudCwgbWFwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBfY3JlYXRlUmVzZWxlY3RFdmVudCgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5hbWU6ICdtb2RlbGNoYW5nZScsXG4gICAgICAgICAgICB0YXJnZXQ6IHRoaXMsXG4gICAgICAgICAgICBvbGRWYWx1ZTogdGhpcy5fbGFzdE1vZGVsLFxuICAgICAgICAgICAgdmFsdWU6IHRoaXMuX2xhc3RNb2RlbCxcbiAgICAgICAgICAgIGV2ZW50VHlwZTogJ25vbmUnXG4gICAgICAgIH07XG4gICAgfVxuICAgIF9hZGRFdmVudExpc3RlbmVyKG1vZGVsKSB7XG4gICAgICAgIG1vZGVsLmFkZEV2ZW50TGlzdGVuZXIoKHBheWxvYWQpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9pc0ZpbHRlcmVkKHBheWxvYWQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcHJvY2Vzc2VkRGF0YSA9IHRoaXMuX3Byb2Nlc3NvcihwYXlsb2FkLnRhcmdldC5nZXREYXRhKCksIHBheWxvYWQpO1xuICAgICAgICAgICAgaWYgKGNvbXBhcmFibGVfMS5lcXVhbHMocHJvY2Vzc2VkRGF0YSwgdGhpcy5fbGFzdE1vZGVsKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG9sZFZhbHVlID0gdGhpcy5fbGFzdE1vZGVsO1xuICAgICAgICAgICAgdGhpcy5fbGFzdE1vZGVsID0gcHJvY2Vzc2VkRGF0YTtcbiAgICAgICAgICAgIHRoaXMuX25vdGlmeUNhbGxiYWNrcyhPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHBheWxvYWQpLCB7IHRhcmdldDogdGhpcywgb2xkVmFsdWUsIHZhbHVlOiBwcm9jZXNzZWREYXRhLCBldmVudENoYWluOiBwYXlsb2FkIH0pKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9pc0ZpbHRlcmVkKHBheWxvYWQpIHtcbiAgICAgICAgY29uc3QgeyBrZXksIGV2ZW50VHlwZSB9ID0gcGF5bG9hZDtcbiAgICAgICAgY29uc3QgeyBrZXlzLCBldmVudFR5cGVzLCBjdXN0b21GaWx0ZXJzIH0gPSB0aGlzLl9maWx0ZXJNYXA7XG4gICAgICAgIGlmIChrZXlzLnNpemUgPiAwICYmICFrZXlzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnRUeXBlcy5zaXplID4gMCAmJiAhZXZlbnRUeXBlcy5oYXMoZXZlbnRUeXBlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgY2Ygb2YgY3VzdG9tRmlsdGVycykge1xuICAgICAgICAgICAgaWYgKGNmKHBheWxvYWQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBfbm90aWZ5Q2FsbGJhY2tzKHBheWxvYWQpIHtcbiAgICAgICAgdGhpcy5fbm90aWZ5QXBwbHlTZWxlY3RvcnMocGF5bG9hZCwgdGhpcy5fYXBwbHlGdW5jcyk7XG4gICAgICAgIHRoaXMuX25vdGlmeU1hcFNlbGVjdG9ycyhwYXlsb2FkLCB0aGlzLl9tYXBGdW5jcyk7XG4gICAgfVxuICAgIF9ub3RpZnlBcHBseVNlbGVjdG9ycyhwYXlsb2FkLCBjYnMpIHtcbiAgICAgICAgZm9yIChsZXQgY2Igb2YgY2JzKSB7XG4gICAgICAgICAgICBjYihwYXlsb2FkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfbm90aWZ5TWFwU2VsZWN0b3JzKHBheWxvYWQsIGNicykge1xuICAgICAgICBjb25zdCB7IHZhbHVlIH0gPSBwYXlsb2FkO1xuICAgICAgICBpZiAoIW9iamVjdF9oZWxwZXJzXzEuaXNNYXBwYWJsZSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBjYiBvZiBjYnMpIHtcbiAgICAgICAgICAgIG9iamVjdF9oZWxwZXJzXzEubWFwKHZhbHVlLCAodiwgaykgPT4ge1xuICAgICAgICAgICAgICAgIGNiKHYsIGssIHBheWxvYWQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXBwbHkoY2IsIHNraXBJbml0aWFsTm90aWZ5KSB7XG4gICAgICAgIHRoaXMuX2FwcGx5RnVuY3MucHVzaChjYik7XG4gICAgICAgIGlmICghc2tpcEluaXRpYWxOb3RpZnkpIHtcbiAgICAgICAgICAgIHRoaXMucmVzZWxlY3QoeyBhcHBseTogW2NiXSB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgYWRkRXZlbnRMaXN0ZW5lcihjYiwgc2tpcEluaXRpYWxOb3RpZnkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHkoY2IsIHNraXBJbml0aWFsTm90aWZ5KTtcbiAgICB9XG4gICAgbWFwKGNiLCBza2lwSW5pdGlhbE5vdGlmeSkge1xuICAgICAgICB0aGlzLl9tYXBGdW5jcy5wdXNoKGNiKTtcbiAgICAgICAgaWYgKCFza2lwSW5pdGlhbE5vdGlmeSkge1xuICAgICAgICAgICAgdGhpcy5yZXNlbGVjdCh7IG1hcDogW2NiXSB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgbWFwU2VsZWN0KGNiLCBmaWx0ZXJzKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2VsZWN0b3IodGhpcywgKGRhdGEsIHBheWxvYWQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG91dCA9IFtdO1xuICAgICAgICAgICAgaWYgKG9iamVjdF9oZWxwZXJzXzEuaXNNYXBwYWJsZShkYXRhKSkge1xuICAgICAgICAgICAgICAgIG9iamVjdF9oZWxwZXJzXzEubWFwKGRhdGEsIChlLCBrKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIG91dC5wdXNoKGNiKGUsIGssIHBheWxvYWQpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvdXQ7XG4gICAgICAgIH0sIGZpbHRlcnMpO1xuICAgIH1cbiAgICBzZWxlY3QocHJvY2Vzc29yLCBmaWx0ZXJzKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2VsZWN0b3IodGhpcywgcHJvY2Vzc29yLCBmaWx0ZXJzKTtcbiAgICB9XG59XG5leHBvcnRzLlNlbGVjdG9yID0gU2VsZWN0b3I7XG5leHBvcnRzLnNlbGVjdCA9IChsaXN0ZW5hYmxlLCBwcm9jZXNzb3IsIGZpbHRlcnMpID0+IHtcbiAgICByZXR1cm4gbmV3IFNlbGVjdG9yKGxpc3RlbmFibGUsIHByb2Nlc3NvciwgZmlsdGVycyk7XG59O1xuZXhwb3J0cy5yYXdTZWxlY3QgPSAocmF3RGF0YSwgcHJvY2Vzc29yLCBmaWx0ZXJzKSA9PiB7XG4gICAgY29uc3QgbW9kZWwgPSBuZXcgcHJpbWl0aXZlTW9kZWxzXzEuTW9kZWwocmF3RGF0YSk7XG4gICAgcmV0dXJuIG5ldyBTZWxlY3Rvcihtb2RlbCwgcHJvY2Vzc29yLCBmaWx0ZXJzKTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IF9tb2RlbF8xID0gcmVxdWlyZShcIi4uL2Fic3RyYWN0Q2xhc3Nlcy9fbW9kZWxcIik7XG5jb25zdCBjb3JlXzEgPSByZXF1aXJlKFwiLi4vX3R5cGVndWFyZHMvY29yZVwiKTtcbmNvbnN0IHNoYXJlZF90eXBlc18xID0gcmVxdWlyZShcIkB0b29sa2lwL3NoYXJlZC10eXBlc1wiKTtcbmNvbnN0IGlkZW50aWZpYWJsZV8xID0gcmVxdWlyZShcIkB0b29sa2lwL2lkZW50aWZpYWJsZVwiKTtcbmNvbnN0IHByaW1pdGl2ZU1vZGVsc18xID0gcmVxdWlyZShcIi4uL3ByaW1pdGl2ZU1vZGVsc1wiKTtcbmNvbnN0IG9iamVjdE1vZGVsc18xID0gcmVxdWlyZShcIi4uL29iamVjdE1vZGVsc1wiKTtcbmNvbnN0IGFycmF5TW9kZWxzXzEgPSByZXF1aXJlKFwiLi4vYXJyYXlNb2RlbHNcIik7XG5leHBvcnRzLmNyZWF0ZU1vZGVsID0gKGRhdGEsIHRyYW5zZm9ybXMpID0+IHtcbiAgICBpZiAoY29yZV8xLmlzTW9kZWwoZGF0YSkpIHtcbiAgICAgICAgcmV0dXJuIGRhdGEuY2xvbmUodHJhbnNmb3Jtcyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gX2NyZWF0ZU1vZGVsRm9yRGF0YShkYXRhLCB0cmFuc2Zvcm1zKTtcbiAgICB9XG59O1xuY29uc3QgX2NyZWF0ZU1vZGVsRm9yRGF0YSA9IChkYXRhLCB0cmFuc2Zvcm1zKSA9PiB7XG4gICAgaWYgKHNoYXJlZF90eXBlc18xLmlzUHJpbWl0aXZlKGRhdGEpKSB7XG4gICAgICAgIHJldHVybiBuZXcgcHJpbWl0aXZlTW9kZWxzXzEuTVByaW1pdGl2ZShkYXRhLCB0cmFuc2Zvcm1zKTtcbiAgICB9XG4gICAgaWYgKHNoYXJlZF90eXBlc18xLmlzRGF0ZShkYXRhKSkge1xuICAgICAgICByZXR1cm4gbmV3IHByaW1pdGl2ZU1vZGVsc18xLk1EYXRlKGRhdGEsIHRyYW5zZm9ybXMpO1xuICAgIH1cbiAgICBpZiAoaWRlbnRpZmlhYmxlXzEuaXNJZGVudGlmaWFibGUoZGF0YSkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBvYmplY3RNb2RlbHNfMS5NSWRlbnRpZmlhYmxlKGRhdGEsIHRyYW5zZm9ybXMpO1xuICAgIH1cbiAgICBpZiAoc2hhcmVkX3R5cGVzXzEuaXNBcnJheShkYXRhKSkge1xuICAgICAgICByZXR1cm4gX2NyZWF0ZUFycmF5TW9kZWxGb3JEYXRhKGRhdGEsIHRyYW5zZm9ybXMpO1xuICAgIH1cbiAgICBpZiAoc2hhcmVkX3R5cGVzXzEuaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBvYmplY3RNb2RlbHNfMS5NT2JqZWN0KGRhdGEsIHRyYW5zZm9ybXMpO1xuICAgIH1cbn07XG5jb25zdCBfY3JlYXRlQXJyYXlNb2RlbEZvckRhdGEgPSAoZGF0YSwgdHJhbnNmb3JtcykgPT4ge1xuICAgIGlmIChkYXRhWzBdICYmIGlkZW50aWZpYWJsZV8xLmlzSWRlbnRpZmlhYmxlKGRhdGFbMF0pKSB7XG4gICAgICAgIHJldHVybiBuZXcgYXJyYXlNb2RlbHNfMS5NTWFuYWdlcihkYXRhLCB0cmFuc2Zvcm1zKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgYXJyYXlNb2RlbHNfMS5NQXJyYXkoZGF0YSwgdHJhbnNmb3Jtcyk7XG4gICAgfVxufTtcbmV4cG9ydHMuc2V0dXBNb2RlbFdyYXBwaW5nID0gKCkgPT4ge1xuICAgIF9tb2RlbF8xLl9Nb2RlbC5jcmVhdGVNb2RlbCA9IGV4cG9ydHMuY3JlYXRlTW9kZWw7XG59O1xuZXhwb3J0cy5zZXR1cE1vZGVsV3JhcHBpbmcoKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zZWxlY3RDb21wZXRlbmN5ID0gZXhwb3J0cy5zZWxlY3RDYXRlZ29yaWVzID0gZXhwb3J0cy5zZWxlY3RVbmhpZGRlbkxldmVscyA9IGV4cG9ydHMuc2VsZWN0TGV2ZWxzID0gZXhwb3J0cy5zZWxlY3RDb21wZXRlbmNpZXMgPSB2b2lkIDA7XG5jb25zdCBtb2RlbF8xID0gcmVxdWlyZShcIkB0b29sa2lwL21vZGVsXCIpO1xuY29uc3Qgc3RhdGVfMSA9IHJlcXVpcmUoXCIuLi9tb2RlbHMvc3RhdGVcIik7XG5jb25zdCBvYmplY3RfaGVscGVyc18xID0gcmVxdWlyZShcIkB0b29sa2lwL29iamVjdC1oZWxwZXJzXCIpO1xuZXhwb3J0cy5zZWxlY3RDb21wZXRlbmNpZXMgPSAoKSA9PiBtb2RlbF8xLnNlbGVjdChzdGF0ZV8xLlNUQVRFLCBzID0+IHMuY29tcGV0ZW5jaWVzKTtcbmV4cG9ydHMuc2VsZWN0TGV2ZWxzID0gKCkgPT4gbW9kZWxfMS5zZWxlY3Qoc3RhdGVfMS5TVEFURSwgKHMpID0+IHMubGV2ZWxzKTtcbmV4cG9ydHMuc2VsZWN0VW5oaWRkZW5MZXZlbHMgPSAoKSA9PiBtb2RlbF8xLnNlbGVjdChzdGF0ZV8xLlNUQVRFLCAocykgPT4ge1xuICAgIHJldHVybiBvYmplY3RfaGVscGVyc18xLmZpbHRlcihzLmxldmVscywgKGwpID0+IHtcbiAgICAgICAgY29uc3QgaWR4ID0gcy5oaWRkZW5MZXZlbHMuaW5kZXhPZihsKTtcbiAgICAgICAgaWYgKGlkeCAhPT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbn0pO1xuZXhwb3J0cy5zZWxlY3RDYXRlZ29yaWVzID0gKCkgPT4gbW9kZWxfMS5zZWxlY3Qoc3RhdGVfMS5TVEFURSwgKHMpID0+IHMuY2F0ZWdvcmllcyk7XG5leHBvcnRzLnNlbGVjdENvbXBldGVuY3kgPSAoY29tcGV0ZW5jeUlkKSA9PiBleHBvcnRzLnNlbGVjdENvbXBldGVuY2llcygpLnNlbGVjdCgoY29tcGV0ZW5jaWVzKSA9PiB7XG4gICAgZm9yIChsZXQgYyBvZiBjb21wZXRlbmNpZXMpIHtcbiAgICAgICAgaWYgKGMuaWQgPT09IGNvbXBldGVuY3lJZCkge1xuICAgICAgICAgICAgcmV0dXJuIGM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59KTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBsb2FkRmlsZV8xID0gcmVxdWlyZShcIi4vaGVscGVycy9sb2FkRmlsZVwiKTtcbmNvbnN0IHBhcnNlRmlsZV8xID0gcmVxdWlyZShcIi4vaGVscGVycy9wYXJzZUZpbGVcIik7XG5jb25zdCBzdGF0ZV8xID0gcmVxdWlyZShcIi4vbW9kZWxzL3N0YXRlXCIpO1xuY29uc3QgbGF5b3V0XzEgPSByZXF1aXJlKFwiLi92aWV3cy9sYXlvdXRcIik7XG5jb25zdCBfaW5pdCA9ICgpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgIC8vIHJlbmRlciBjb21wZXRlbmNpZXNcbiAgICBsYXlvdXRfMS5yZW5kZXJMYXlvdXQoKTtcbiAgICAvLyBsb2FkIGNvbXBldGVuY2llc1xuICAgIGNvbnN0IGljID0geWllbGQgbG9hZEZpbGVfMS5sb2FkRW5nQ29tcGV0ZW5jaWVzKCk7XG4gICAgLy9jb25zdCBlbSA9IGF3YWl0IGxvYWRNYW5hZ2VyQ29tcGV0ZW5jaWVzKCk7XG4gICAgY29uc3QgcGFyc2VkID0gcGFyc2VGaWxlXzEucGFyc2VGaWxlKGljKTtcbiAgICBzdGF0ZV8xLnVwZGF0ZVN0YXRlKHBhcnNlZCk7XG59KTtcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgX2luaXQpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubG9hZE1hbmFnZXJDb21wZXRlbmNpZXMgPSBleHBvcnRzLmxvYWRFbmdDb21wZXRlbmNpZXMgPSB2b2lkIDA7XG5jb25zdCBzZXJ2ZXJfMSA9IHJlcXVpcmUoXCJAdG9vbGtpcC9zZXJ2ZXJcIik7XG5leHBvcnRzLmxvYWRFbmdDb21wZXRlbmNpZXMgPSAoKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICBjb25zdCBmaWxlQ29udGVudHMgPSB5aWVsZCBzZXJ2ZXJfMS5sb2FkRmlsZSh7IGZpbGVuYW1lOiAnLi4vUkVBRE1FLm1kJyB9KTtcbiAgICByZXR1cm4gZmlsZUNvbnRlbnRzO1xufSk7XG5leHBvcnRzLmxvYWRNYW5hZ2VyQ29tcGV0ZW5jaWVzID0gKCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgY29uc3QgZmlsZUNvbnRlbnRzID0geWllbGQgc2VydmVyXzEubG9hZEZpbGUoeyBmaWxlbmFtZTogJy4uL21hbmFnZXJzLm1kJyB9KTtcbiAgICByZXR1cm4gZmlsZUNvbnRlbnRzO1xufSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XG59XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9hamF4XCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL2ZpbGVJT1wiKSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IG9iamVjdF9oZWxwZXJzXzEgPSByZXF1aXJlKFwiQHRvb2xraXAvb2JqZWN0LWhlbHBlcnNcIik7XG5mdW5jdGlvbiBhamF4KGFqYXhEZXRhaWxzKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgX2lubmVyQWpheChhamF4RGV0YWlscywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuYWpheCA9IGFqYXg7XG5mdW5jdGlvbiBfaW5uZXJBamF4KGFqYXhEZXRhaWxzLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICBsZXQgcmVxdWVzdCA9IF9nZXRYbWxSZXF1ZXN0T2JqZWN0KCk7XG4gICAgaWYgKCFyZXF1ZXN0KVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICBfYXNzaWduWG1sUmVxdWVzdENhbGxiYWNrcyhyZXF1ZXN0LCAoLi4ucGFyYW1zKSA9PiByZXNvbHZlKC4uLnBhcmFtcyksICguLi5wYXJhbXMpID0+IHJlamVjdCguLi5wYXJhbXMpKTtcbiAgICBfc2VuZFhtbFJlcXVlc3QocmVxdWVzdCwgYWpheERldGFpbHMpO1xuICAgIHJldHVybiByZXF1ZXN0O1xufVxuO1xuZnVuY3Rpb24gX2dldFhtbFJlcXVlc3RPYmplY3QoKSB7XG4gICAgbGV0IHJlcXVlc3QgPSBudWxsO1xuICAgIHRyeSB7XG4gICAgICAgIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlcXVlc3QgPSBuZXcgQWN0aXZlWE9iamVjdChcIk1zeG1sMi5YTUxIVFRQXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJlcXVlc3QgPSBuZXcgQWN0aXZlWE9iamVjdChcIk1pY3Jvc29mdC5YTUxIVFRQXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVxdWVzdDtcbn1cbmZ1bmN0aW9uIF9hc3NpZ25YbWxSZXF1ZXN0Q2FsbGJhY2tzKHJlcXVlc3QsIHN1Y2Nlc3NDYiwgZXJyb3JDYikge1xuICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gKCkgPT4ge1xuICAgICAgICBpZiAocmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9pc1ZhbGlkUmVzcG9uc2UocmVxdWVzdC5zdGF0dXMpKSB7XG4gICAgICAgICAgICBzdWNjZXNzQ2IocmVxdWVzdC5yZXNwb25zZVRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZXJyb3JDYihyZXF1ZXN0LnJlc3BvbnNlVGV4dCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiByZXF1ZXN0O1xufVxuZnVuY3Rpb24gX2FkZEhlYWRlckRhdGEocmVxdWVzdCwgaGVhZGVyUGFyYW1zKSB7XG4gICAgaWYgKCFoZWFkZXJQYXJhbXMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBvYmplY3RfaGVscGVyc18xLm1hcChoZWFkZXJQYXJhbXMsICh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbHVlKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIF9zZW5kWG1sUmVxdWVzdChyZXF1ZXN0LCB7IHR5cGUsIHJlcXVlc3RVcmwsIHBhcmFtcywgaGVhZGVyUGFyYW1zIH0pIHtcbiAgICByZXF1ZXN0Lm9wZW4odHlwZSwgcmVxdWVzdFVybCwgdHJ1ZSk7XG4gICAgX2FkZEhlYWRlckRhdGEocmVxdWVzdCwgaGVhZGVyUGFyYW1zKTtcbiAgICBsZXQgdXJsUGFyYW1zID0gbnVsbDtcbiAgICBpZiAodHlwZSA9PT0gXCJQT1NUXCIpIHtcbiAgICAgICAgdXJsUGFyYW1zID0gX3NldFJlcXVlc3RIZWFkZXIocmVxdWVzdCwgcGFyYW1zKTtcbiAgICB9XG4gICAgcmVxdWVzdC5zZW5kKHVybFBhcmFtcyk7XG4gICAgcmV0dXJuIHJlcXVlc3Q7XG59XG5mdW5jdGlvbiBfc2V0UmVxdWVzdEhlYWRlcihyZXF1ZXN0LCBwYXJhbXMpIHtcbiAgICBsZXQgcmVxSGVhZGVyVHlwZTtcbiAgICBsZXQgb3V0UGFyYW1zO1xuICAgIGlmIChwYXJhbXMgaW5zdGFuY2VvZiBGb3JtRGF0YSkge1xuICAgICAgICByZXFIZWFkZXJUeXBlID0gXCJtdWx0aXBhcnQvZm9ybS1kYXRhXCI7XG4gICAgICAgIG91dFBhcmFtcyA9IHBhcmFtcztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlcUhlYWRlclR5cGUgPSBcImFwcGxpY2F0aW9uL2pzb25cIjtcbiAgICAgICAgb3V0UGFyYW1zID0gSlNPTi5zdHJpbmdpZnkocGFyYW1zKTtcbiAgICB9XG4gICAgaWYgKHJlcUhlYWRlclR5cGUpIHtcbiAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsIHJlcUhlYWRlclR5cGUpO1xuICAgIH1cbiAgICByZXR1cm4gb3V0UGFyYW1zO1xufVxuZnVuY3Rpb24gX2J1aWxkUGFyYW1ldGVycyhwYXJhbXMpIHtcbiAgICBsZXQgcGFyYW1PdXQgPSBbXTtcbiAgICBvYmplY3RfaGVscGVyc18xLm1hcChwYXJhbXMsICh2YWwsIGtleSkgPT4ge1xuICAgICAgICBsZXQgdXJsUGFyYW0gPSBlbmNvZGVVUklDb21wb25lbnQoa2V5KSArIFwiPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbCk7XG4gICAgICAgIHBhcmFtT3V0LnB1c2godXJsUGFyYW0pO1xuICAgIH0pO1xuICAgIHJldHVybiBwYXJhbU91dC5qb2luKFwiJlwiKTtcbn1cbmZ1bmN0aW9uIF9pc1ZhbGlkUmVzcG9uc2UocmVzcG9uc2VDb2RlKSB7XG4gICAgaWYgKHJlc3BvbnNlQ29kZSA8IDIwMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChyZXNwb25zZUNvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydHMuaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0cy5pc051bGxPclVuZGVmaW5lZCA9IGlzTnVsbE9yVW5kZWZpbmVkO1xuZnVuY3Rpb24gaXNGYWxzeSh2YWx1ZSwgZmFsc3lUeXBlc1RvSWdub3JlID0gW10pIHtcbiAgICBpZiAoISF2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAobGV0IGlnbm9yZWRUeXBlIG9mIGZhbHN5VHlwZXNUb0lnbm9yZSkge1xuICAgICAgICBpZiAoaWdub3JlZFR5cGUgPT09IHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5leHBvcnRzLmlzRmFsc3kgPSBpc0ZhbHN5O1xuZnVuY3Rpb24gaXNUcnV0aHkodmFsdWUsIGZhbHN5VHlwZXNUb1RyZWF0QXNUcnV0aHkgPSBbXSkge1xuICAgIHJldHVybiAhdGhpcy5pc0ZhbHN5KHZhbHVlLCBmYWxzeVR5cGVzVG9UcmVhdEFzVHJ1dGh5KTtcbn1cbmV4cG9ydHMuaXNUcnV0aHkgPSBpc1RydXRoeTtcbmZ1bmN0aW9uIGlzSW50ZXJmYWNlKHRlc3QsIGZ1bGxfaW1wKSB7XG4gICAgbGV0IHByb3A7XG4gICAgbGV0IHJlcV9tYXRjaCA9IHRydWU7XG4gICAgbGV0IHZhbDtcbiAgICBmb3IgKHByb3AgaW4gZnVsbF9pbXApIHtcbiAgICAgICAgaWYgKGZ1bGxfaW1wLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgICAgICB2YWwgPSBmdWxsX2ltcFtwcm9wXTtcbiAgICAgICAgICAgIGlmICh2YWwgJiYgKHRlc3RbcHJvcF0gPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgICAgICByZXFfbWF0Y2ggPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXJlcV9tYXRjaCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGxldCBoYXNfZXh0cmEgPSBmYWxzZTtcbiAgICBmb3IgKHByb3AgaW4gdGVzdCkge1xuICAgICAgICBpZiAodGVzdC5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgICAgICAgaWYgKGZ1bGxfaW1wW3Byb3BdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBoYXNfZXh0cmEgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAoIWhhc19leHRyYSk7XG59XG5leHBvcnRzLmlzSW50ZXJmYWNlID0gaXNJbnRlcmZhY2U7XG5mdW5jdGlvbiBpc1N0cmluZyh0ZXN0KSB7XG4gICAgcmV0dXJuICh0eXBlb2YgdGVzdCA9PT0gXCJzdHJpbmdcIik7XG59XG5leHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XG5mdW5jdGlvbiBpc0tleW9mKHRlc3QsIHJlZmVyZW5jZSkge1xuICAgIGlmICghcmVmZXJlbmNlKSB7XG4gICAgICAgIHJldHVybiBpc1N0cmluZyh0ZXN0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlZmVyZW5jZS5oYXNPd25Qcm9wZXJ0eSh0ZXN0KTtcbn1cbmV4cG9ydHMuaXNLZXlvZiA9IGlzS2V5b2Y7XG5mdW5jdGlvbiBpc051bWJlcih0ZXN0KSB7XG4gICAgcmV0dXJuICh0eXBlb2YgdGVzdCA9PT0gXCJudW1iZXJcIik7XG59XG5leHBvcnRzLmlzTnVtYmVyID0gaXNOdW1iZXI7XG5mdW5jdGlvbiBpc0Jvb2xlYW4odGVzdCkge1xuICAgIHJldHVybiAodHlwZW9mIHRlc3QgPT09IFwiYm9vbGVhblwiKTtcbn1cbmV4cG9ydHMuaXNCb29sZWFuID0gaXNCb29sZWFuO1xuZnVuY3Rpb24gaXNQcmltaXRpdmUodGVzdCkge1xuICAgIGlmICh0ZXN0ID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBzd2l0Y2ggKHR5cGVvZiB0ZXN0KSB7XG4gICAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICBjYXNlICdudW1iZXInOlxuICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICBjYXNlICd1bmRlZmluZWQnOlxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuZXhwb3J0cy5pc1ByaW1pdGl2ZSA9IGlzUHJpbWl0aXZlO1xuZnVuY3Rpb24gaXNGdW5jdGlvbih0ZXN0KSB7XG4gICAgcmV0dXJuICh0eXBlb2YgdGVzdCA9PT0gXCJmdW5jdGlvblwiKTtcbn1cbmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5mdW5jdGlvbiBpc0FycmF5KHRlc3QpIHtcbiAgICByZXR1cm4gKHRlc3QgaW5zdGFuY2VvZiBBcnJheSk7XG59XG5leHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5O1xuZnVuY3Rpb24gaXNPYmplY3QodGVzdCkge1xuICAgIHJldHVybiAodHlwZW9mIHRlc3QgPT09IHR5cGVvZiB7fSk7XG59XG5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG5mdW5jdGlvbiBpc0RhdGUodGVzdCkge1xuICAgIGlmICghKHRlc3QgaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IHByb3RvTmFtZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0ZXN0KTtcbiAgICByZXR1cm4gcHJvdG9OYW1lID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5leHBvcnRzLmlzRGF0ZSA9IGlzRGF0ZTtcbmZ1bmN0aW9uIGlzUHJvbWlzZSh0ZXN0KSB7XG4gICAgaWYgKHRlc3QgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnRzLmlzUHJvbWlzZSA9IGlzUHJvbWlzZTtcbmZ1bmN0aW9uIGlzUHJvbWlzZUxpa2UodGVzdCkge1xuICAgIGlmICghdGVzdC50aGVuKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB0ZXN0LnRoZW4gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmV4cG9ydHMuaXNQcm9taXNlTGlrZSA9IGlzUHJvbWlzZUxpa2U7XG5mdW5jdGlvbiBpc1N0YW5kYXJkRWxlbWVudCh0ZXN0KSB7XG4gICAgaWYgKHRlc3QgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHRlc3QgaW5zdGFuY2VvZiBTVkdFbGVtZW50KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnRzLmlzU3RhbmRhcmRFbGVtZW50ID0gaXNTdGFuZGFyZEVsZW1lbnQ7XG5mdW5jdGlvbiBpc0RyYXdhYmxlKHRlc3QpIHtcbiAgICByZXR1cm4gISF0ZXN0LmRyYXc7XG59XG5leHBvcnRzLmlzRHJhd2FibGUgPSBpc0RyYXdhYmxlO1xuZnVuY3Rpb24gaXNEcmF3YWJsZUVsZW1lbnQodGVzdCkge1xuICAgIHJldHVybiAoISEodGVzdC5hcHBlbmRDaGlsZCkpO1xufVxuZXhwb3J0cy5pc0RyYXdhYmxlRWxlbWVudCA9IGlzRHJhd2FibGVFbGVtZW50O1xuZnVuY3Rpb24gaXNVcGRhdGFibGUodGVzdCkge1xuICAgIGlmICghdGVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiAhISh0ZXN0LnVwZGF0ZSk7XG59XG5leHBvcnRzLmlzVXBkYXRhYmxlID0gaXNVcGRhdGFibGU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNvbWJpbmVfMSA9IHJlcXVpcmUoXCIuL2NvbWJpbmVcIik7XG5jb25zdCBtYW5pcHVsYXRlXzEgPSByZXF1aXJlKFwiLi9tYW5pcHVsYXRlXCIpO1xuY29uc3Qgc2hhcmVkX3R5cGVzXzEgPSByZXF1aXJlKFwiQHRvb2xraXAvc2hhcmVkLXR5cGVzXCIpO1xuY29uc3QgX3R5cGVndWFyZHNfMSA9IHJlcXVpcmUoXCIuL190eXBlZ3VhcmRzXCIpO1xuZnVuY3Rpb24gY2xvbmVSZWN0KHJlY3QpIHtcbiAgICBsZXQgb3V0ID0ge1xuICAgICAgICB4OiByZWN0LngsXG4gICAgICAgIHk6IHJlY3QueSxcbiAgICAgICAgdzogcmVjdC53LFxuICAgICAgICBoOiByZWN0LmhcbiAgICB9O1xuICAgIHJldHVybiBvdXQ7XG59XG5leHBvcnRzLmNsb25lUmVjdCA9IGNsb25lUmVjdDtcbmZ1bmN0aW9uIGNsb25lUG9pbnQocG9pbnQpIHtcbiAgICBsZXQgb3V0ID0ge1xuICAgICAgICB4OiBwb2ludC54LFxuICAgICAgICB5OiBwb2ludC55XG4gICAgfTtcbiAgICByZXR1cm4gb3V0O1xufVxuZXhwb3J0cy5jbG9uZVBvaW50ID0gY2xvbmVQb2ludDtcbmZ1bmN0aW9uIGNsb25lUG9pbnRBcnJheShwb2ludHMpIHtcbiAgICBsZXQgb3V0ID0gW107XG4gICAgbGV0IHB0O1xuICAgIGZvciAocHQgb2YgcG9pbnRzKSB7XG4gICAgICAgIGxldCBjbG9uZSA9IGNsb25lUG9pbnQocHQpO1xuICAgICAgICBvdXQucHVzaChjbG9uZSk7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG59XG5leHBvcnRzLmNsb25lUG9pbnRBcnJheSA9IGNsb25lUG9pbnRBcnJheTtcbmZ1bmN0aW9uIGNsb25lT2JqZWN0KG9iaikge1xuICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpO1xufVxuZXhwb3J0cy5jbG9uZU9iamVjdCA9IGNsb25lT2JqZWN0O1xuZnVuY3Rpb24gY2xvbmUodG9DbG9uZSwgY3VzdG9tQ2xvbmVycyA9IFtdLCBrZXkpIHtcbiAgICBmb3IgKGxldCBjIG9mIGN1c3RvbUNsb25lcnMpIHtcbiAgICAgICAgaWYgKGMudHlwZUd1YXJkKHRvQ2xvbmUsIGtleSkpIHtcbiAgICAgICAgICAgIHJldHVybiBjLmNsb25lcih0b0Nsb25lLCBrZXkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChzaGFyZWRfdHlwZXNfMS5pc1ByaW1pdGl2ZSh0b0Nsb25lKSkge1xuICAgICAgICByZXR1cm4gX2Nsb25lUHJpbWl0aXZlKHRvQ2xvbmUpO1xuICAgIH1cbiAgICBlbHNlIGlmIChfdHlwZWd1YXJkc18xLmlzQ2xvbmVhYmxlKHRvQ2xvbmUpKSB7XG4gICAgICAgIHJldHVybiB0b0Nsb25lLmNsb25lKCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHNoYXJlZF90eXBlc18xLmlzRGF0ZSh0b0Nsb25lKSkge1xuICAgICAgICByZXR1cm4gX2Nsb25lRGF0ZSh0b0Nsb25lKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc2hhcmVkX3R5cGVzXzEuaXNBcnJheSh0b0Nsb25lKSkge1xuICAgICAgICByZXR1cm4gX2Nsb25lQXJyYXkodG9DbG9uZSwgY3VzdG9tQ2xvbmVycyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHNoYXJlZF90eXBlc18xLmlzT2JqZWN0KHRvQ2xvbmUpKSB7XG4gICAgICAgIHJldHVybiBfY2xvbmVPYmplY3QodG9DbG9uZSwgY3VzdG9tQ2xvbmVycyk7XG4gICAgfVxufVxuZXhwb3J0cy5jbG9uZSA9IGNsb25lO1xuY29uc3QgX2Nsb25lUHJpbWl0aXZlID0gKHByaW1pdGl2ZSkgPT4ge1xuICAgIHJldHVybiBwcmltaXRpdmU7XG59O1xuY29uc3QgX2Nsb25lRGF0ZSA9IChkYXRlKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKGRhdGUudmFsdWVPZigpKTtcbn07XG5jb25zdCBfY2xvbmVPYmplY3QgPSAob2JqLCBjdXN0b21DbG9uZXJzKSA9PiB7XG4gICAgY29uc3QgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKTtcbiAgICBjb25zdCBvdXQgPSBPYmplY3QuY3JlYXRlKHByb3RvKTtcbiAgICBtYW5pcHVsYXRlXzEubWFwKG9iaiwgKHYsIGspID0+IHtcbiAgICAgICAgb3V0W2tdID0gY2xvbmUodiwgY3VzdG9tQ2xvbmVycywgayk7XG4gICAgfSk7XG4gICAgcmV0dXJuIG91dDtcbn07XG5jb25zdCBfY2xvbmVBcnJheSA9IChhcnIsIGN1c3RvbUNsb25lcnMpID0+IHtcbiAgICBjb25zdCBvdXQgPSBbXTtcbiAgICBmb3IgKGxldCBlIG9mIGFycikge1xuICAgICAgICBvdXQucHVzaChjbG9uZShlLCBjdXN0b21DbG9uZXJzKSk7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG59O1xuZnVuY3Rpb24gc2hhbGxvd0Nsb25lT2JqZWN0KG9iamVjdCkge1xuICAgIHJldHVybiBjb21iaW5lXzEuY29tYmluZU9iamVjdHMoe30sIG9iamVjdCk7XG59XG5leHBvcnRzLnNoYWxsb3dDbG9uZU9iamVjdCA9IHNoYWxsb3dDbG9uZU9iamVjdDtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgcHJpbWl0aXZlX2hlbHBlcnNfMSA9IHJlcXVpcmUoXCJAdG9vbGtpcC9wcmltaXRpdmUtaGVscGVyc1wiKTtcbmNvbnN0IG1hbmlwdWxhdGVfMSA9IHJlcXVpcmUoXCIuL21hbmlwdWxhdGVcIik7XG5mdW5jdGlvbiBzdHJpbmdpZnkob2JqLCBhc0h0bWwsIHByZWZpeCkge1xuICAgIGxldCBvdXQgPSBbXTtcbiAgICBsZXQgbmV3TGluZUNoYXIgPSBhc0h0bWwgPyBcIjxicj5cIiA6IFwiXFxuXCI7XG4gICAgbGV0IHRhYkNoYXIgPSBhc0h0bWwgPyBcIiZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwO1wiIDogXCJcXHRcIjtcbiAgICBpZiAoIXByZWZpeCkge1xuICAgICAgICBwcmVmaXggPSBcIlwiO1xuICAgIH1cbiAgICBtYW5pcHVsYXRlXzEubWFwKG9iaiwgKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgbGV0IHZhbFN0cjtcbiAgICAgICAgc3dpdGNoICh0eXBlb2YgdmFsdWUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgICAgICAgICB2YWxTdHIgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgICAgICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICAgICAgICAgICAgdmFsU3RyID0gdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YWxTdHIgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5oYXNPd25Qcm9wZXJ0eShcInRvU3RyaW5nXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbFN0ciA9IG5ld0xpbmVDaGFyICsgdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbFN0ciA9IG5ld0xpbmVDaGFyICsgc3RyaW5naWZ5KHZhbHVlLCBhc0h0bWwsIHRhYkNoYXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBvdXQucHVzaChfZm9ybWF0KHByZWZpeCArIGtleSwgdmFsU3RyLCBhc0h0bWwpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gb3V0LmpvaW4oXCJcIik7XG59XG5leHBvcnRzLnN0cmluZ2lmeSA9IHN0cmluZ2lmeTtcbmZ1bmN0aW9uIF9mb3JtYXQoa2V5LCB2YWx1ZSwgYXNIdG1sKSB7XG4gICAgaWYgKGFzSHRtbCkge1xuICAgICAgICByZXR1cm4gX2Zvcm1hdFByb3BlcnR5QXNIVE1MKGtleSwgdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gX2Zvcm1hdFByb3BlcnR5QXNQbGFpblRleHQoa2V5LCB2YWx1ZSk7XG59XG5mdW5jdGlvbiBfZm9ybWF0UHJvcGVydHlBc0hUTUwoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiBwcmltaXRpdmVfaGVscGVyc18xLmZvcm1hdChcIjxiPnswfTwvYj46IHsxfXsyfVwiLCBrZXksIHZhbHVlLCBcIjxicj5cIik7XG59XG5mdW5jdGlvbiBfZm9ybWF0UHJvcGVydHlBc1BsYWluVGV4dChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHByaW1pdGl2ZV9oZWxwZXJzXzEuZm9ybWF0KFwiezB9OiB7MX1cXG5cIiwga2V5LCB2YWx1ZSk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmZ1bmN0aW9uIGNvbnRhaW5zKGFyciwgdmFsdWUsIGVxdWFsaXR5RnVuY3Rpb24pIHtcbiAgICByZXR1cm4gKGluZGV4T2YoYXJyLCB2YWx1ZSwgZXF1YWxpdHlGdW5jdGlvbikgIT09IC0xKTtcbn1cbmV4cG9ydHMuY29udGFpbnMgPSBjb250YWlucztcbmZ1bmN0aW9uIGluZGV4T2YoYXJyLCB2YWx1ZSwgZXF1YWxpdHlGdW5jdGlvbikge1xuICAgIGlmICghYXJyKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgYXJyLmxlbmd0aDsgaWR4ICs9IDEpIHtcbiAgICAgICAgaWYgKGVxdWFsaXR5RnVuY3Rpb24pIHtcbiAgICAgICAgICAgIGlmIChlcXVhbGl0eUZ1bmN0aW9uKGFycltpZHhdLCB2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWR4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGFycltpZHhdID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGlkeDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG59XG5leHBvcnRzLmluZGV4T2YgPSBpbmRleE9mO1xuZnVuY3Rpb24gcmVtb3ZlRWxlbUZyb21BcnIoYXJyLCBlbGVtLCBlcXVhbCkge1xuICAgIGxldCBpZHg7XG4gICAgbGV0IG91dEFycjtcbiAgICBpZiAoIWVxdWFsKSB7XG4gICAgICAgIGVxdWFsID0gZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIChhID09PSBiKTsgfTtcbiAgICB9XG4gICAgZm9yIChpZHggPSAoYXJyLmxlbmd0aCAtIDEpOyBpZHggPj0gMDsgaWR4IC09IDEpIHtcbiAgICAgICAgaWYgKGVxdWFsKGFycltpZHhdLCBlbGVtKSkge1xuICAgICAgICAgICAgb3V0QXJyID0gYXJyLnNwbGljZShpZHgsIDEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvdXRBcnI7XG59XG5leHBvcnRzLnJlbW92ZUVsZW1Gcm9tQXJyID0gcmVtb3ZlRWxlbUZyb21BcnI7XG47XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IG51bWJlcnNfMSA9IHJlcXVpcmUoXCIuL251bWJlcnNcIik7XG5jb25zdCBzdHJpbmdzXzEgPSByZXF1aXJlKFwiLi9zdHJpbmdzXCIpO1xuZnVuY3Rpb24gZGF0ZURpZmYoYSwgYiwgc2lnbmVkLCBpbmNsdWRlVGltZSwgcmV0dXJuTWlsbGkpIHtcbiAgICBsZXQgbXM7XG4gICAgbGV0IGRpZmY7XG4gICAgbGV0IGRpcjtcbiAgICBtcyA9ICgxMDAwICogNjAgKiA2MCAqIDI0KTtcbiAgICBpZiAoIWluY2x1ZGVUaW1lKSB7XG4gICAgICAgIGEgPSBjbGVhclRpbWVJbmZvKGEsIHRydWUpO1xuICAgICAgICBiID0gY2xlYXJUaW1lSW5mbyhiLCB0cnVlKTtcbiAgICB9XG4gICAgaWYgKChhID4gYikgfHwgc2lnbmVkKSB7XG4gICAgICAgIGRpZmYgPSAoYSAtIGIpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZGlmZiA9IChiIC0gYSk7XG4gICAgfVxuICAgIGlmICghcmV0dXJuTWlsbGkpIHtcbiAgICAgICAgZGlmZiA9IGRpZmYgLyBtcztcbiAgICB9XG4gICAgcmV0dXJuIGRpZmY7XG59XG5leHBvcnRzLmRhdGVEaWZmID0gZGF0ZURpZmY7XG47XG52YXIgSW5jbHVzaXZpdHlFbnVtO1xuKGZ1bmN0aW9uIChJbmNsdXNpdml0eUVudW0pIHtcbiAgICBJbmNsdXNpdml0eUVudW1bSW5jbHVzaXZpdHlFbnVtW1wiRVhDTFVTSVZFXCJdID0gLTFdID0gXCJFWENMVVNJVkVcIjtcbiAgICBJbmNsdXNpdml0eUVudW1bSW5jbHVzaXZpdHlFbnVtW1wiREVGQVVMVFwiXSA9IDBdID0gXCJERUZBVUxUXCI7XG4gICAgSW5jbHVzaXZpdHlFbnVtW0luY2x1c2l2aXR5RW51bVtcIklOQ0xVU0lWRVwiXSA9IDFdID0gXCJJTkNMVVNJVkVcIjtcbn0pKEluY2x1c2l2aXR5RW51bSA9IGV4cG9ydHMuSW5jbHVzaXZpdHlFbnVtIHx8IChleHBvcnRzLkluY2x1c2l2aXR5RW51bSA9IHt9KSk7XG5mdW5jdGlvbiBtb250aERpZmYoYSwgYiwgc2lnbmVkLCBpbmNsdXNpdml0eSkge1xuICAgIGxldCBtb250aERpZmY7XG4gICAgbGV0IHllYXJEaWZmO1xuICAgIGlmICgoYSA+IGIpIHx8IHNpZ25lZCkge1xuICAgICAgICBtb250aERpZmYgPSAoYS5nZXRNb250aCgpKSAtIChiLmdldE1vbnRoKCkpO1xuICAgICAgICB5ZWFyRGlmZiA9IChhLmdldEZ1bGxZZWFyKCkpIC0gKGIuZ2V0RnVsbFllYXIoKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBtb250aERpZmYgPSAoYi5nZXRNb250aCgpKSAtIChhLmdldE1vbnRoKCkpO1xuICAgICAgICB5ZWFyRGlmZiA9IChiLmdldEZ1bGxZZWFyKCkpIC0gKGEuZ2V0RnVsbFllYXIoKSk7XG4gICAgfVxuICAgIGxldCBkaWZmID0geWVhckRpZmYgKiAxMiArIG1vbnRoRGlmZjtcbiAgICBkaWZmICs9ICtpbmNsdXNpdml0eTtcbiAgICByZXR1cm4gZGlmZjtcbn1cbmV4cG9ydHMubW9udGhEaWZmID0gbW9udGhEaWZmO1xuZnVuY3Rpb24gZ2V0VG9kYXkoaW5jbHVkZV90aW1lKSB7XG4gICAgO1xuICAgIGxldCByZXQ7XG4gICAgcmV0ID0gbmV3IERhdGUoKTtcbiAgICBpZiAoaW5jbHVkZV90aW1lKVxuICAgICAgICByZXR1cm4gcmV0O1xuICAgIHJldCA9IGNsZWFyVGltZUluZm8ocmV0KTtcbiAgICByZXR1cm4gcmV0O1xufVxuZXhwb3J0cy5nZXRUb2RheSA9IGdldFRvZGF5O1xuO1xuZnVuY3Rpb24gY2xlYXJUaW1lSW5mbyhkYXRlLCBjbGVhclRaKSB7XG4gICAgbGV0IGRhdGVTdHIgPSBzaG9ydERhdGUoZGF0ZSk7XG4gICAgbGV0IG91dERhdGU7XG4gICAgaWYgKGNsZWFyVFopIHtcbiAgICAgICAgb3V0RGF0ZSA9IG5ldyBEYXRlKGRhdGVTdHIgKyBcIiAwMDowMFpcIik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBvdXREYXRlID0gbmV3IERhdGUoZGF0ZVN0cik7XG4gICAgfVxuICAgIHJldHVybiBvdXREYXRlO1xufVxuZXhwb3J0cy5jbGVhclRpbWVJbmZvID0gY2xlYXJUaW1lSW5mbztcbmZ1bmN0aW9uIGJ1c2luZXNzRGF0ZURpZmYoYSwgYiwgc2lnbmVkLCBpbmNsdWRlVGltZSwgcmV0dXJuTWlsbGkpIHtcbiAgICA7XG4gICAgbGV0IGRpZmY7XG4gICAgbGV0IGRheU9mV2VlaztcbiAgICBsZXQgZGlyO1xuICAgIGxldCBpZHg7XG4gICAgZGlmZiA9IGRhdGVEaWZmKGEsIGIsIHNpZ25lZCwgaW5jbHVkZVRpbWUsIHJldHVybk1pbGxpKTtcbiAgICBkYXlPZldlZWsgPSAoYiA+IGEgPyBhLmdldERheSgpIDogYi5nZXREYXkoKSkgKyAxO1xuICAgIGRheU9mV2VlayAlPSA3O1xuICAgIGlmIChkYXlPZldlZWsgPCAwKSB7XG4gICAgICAgIGRheU9mV2VlayA9IDY7XG4gICAgfVxuICAgIGxldCB3ZWVrZW5kRGF5cyA9IDA7XG4gICAgZm9yIChpZHggPSAwOyBpZHggPCBNYXRoLmFicyhkaWZmKTsgaWR4ICs9IDEpIHtcbiAgICAgICAgaWYgKGRheU9mV2VlayA9PT0gMCB8fCBkYXlPZldlZWsgPT09IDYpIHtcbiAgICAgICAgICAgIHdlZWtlbmREYXlzICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgZGF5T2ZXZWVrICs9IDE7XG4gICAgICAgIGRheU9mV2VlayAlPSA3O1xuICAgICAgICBpZiAoZGF5T2ZXZWVrIDwgMCkge1xuICAgICAgICAgICAgZGF5T2ZXZWVrID0gNjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoZGlmZiA8IDApIHtcbiAgICAgICAgZGlyID0gLTE7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBkaXIgPSAxO1xuICAgIH1cbiAgICByZXR1cm4gZGlmZiAtICh3ZWVrZW5kRGF5cyAqIGRpcik7XG59XG5leHBvcnRzLmJ1c2luZXNzRGF0ZURpZmYgPSBidXNpbmVzc0RhdGVEaWZmO1xuO1xuZnVuY3Rpb24gc2hvcnREYXRlKGR0KSB7XG4gICAgO1xuICAgIGlmICghZHQpIHtcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuICAgIGxldCB5cjtcbiAgICB5ciA9IGdldFNob3J0WWVhcihkdCk7XG4gICAgcmV0dXJuIChkdC5nZXRNb250aCgpICsgMSkgKyBcIi9cIiArIGR0LmdldERhdGUoKSArIFwiL1wiICsgeXI7XG59XG5leHBvcnRzLnNob3J0RGF0ZSA9IHNob3J0RGF0ZTtcbjtcbmZ1bmN0aW9uIGlucHV0RGF0ZUZtdChkdCkge1xuICAgIDtcbiAgICBsZXQgbTtcbiAgICBsZXQgZDtcbiAgICBsZXQgeTtcbiAgICB5ID0gZHQuZ2V0RnVsbFllYXIoKTtcbiAgICBtID0gKGR0LmdldE1vbnRoKCkgKyAxKTtcbiAgICBpZiAobSA8IDEwKVxuICAgICAgICBtID0gXCIwXCIgKyBtO1xuICAgIGQgPSArZHQuZ2V0RGF0ZSgpO1xuICAgIGlmIChkIDwgMTApXG4gICAgICAgIGQgPSBcIjBcIiArIGQ7XG4gICAgcmV0dXJuIChkdC5nZXRGdWxsWWVhcigpICsgXCItXCIgKyBtICsgXCItXCIgKyBkKTtcbn1cbmV4cG9ydHMuaW5wdXREYXRlRm10ID0gaW5wdXREYXRlRm10O1xuO1xuZnVuY3Rpb24gaW5wdXRUb0RhdGUoaUR0LCBpVGltZSkge1xuICAgIGxldCBvdXREYXRlO1xuICAgIGlmIChpRHQpIHtcbiAgICAgICAgbGV0IGR0QXJyID0gaUR0LnNwbGl0KFwiLVwiKTtcbiAgICAgICAgb3V0RGF0ZSA9IG5ldyBEYXRlKCtkdEFyclswXSwgK2R0QXJyWzFdIC0gMSwgK2R0QXJyWzJdKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaVRpbWUpIHtcbiAgICAgICAgb3V0RGF0ZSA9IGdldFRvZGF5KCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBvdXREYXRlID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIG91dERhdGU7XG4gICAgfVxuICAgIGlmIChpVGltZSkge1xuICAgICAgICBsZXQgdGltZUFyciA9IGlUaW1lLnNwbGl0KFwiOlwiKTtcbiAgICAgICAgb3V0RGF0ZS5zZXRIb3VycygrdGltZUFyclswXSk7XG4gICAgICAgIG91dERhdGUuc2V0TWludXRlcygrdGltZUFyclsxXSk7XG4gICAgfVxuICAgIHJldHVybiBvdXREYXRlO1xufVxuZXhwb3J0cy5pbnB1dFRvRGF0ZSA9IGlucHV0VG9EYXRlO1xuO1xuZnVuY3Rpb24gc2hvcnRUaW1lKGR0LCB3aXRoRXh0cmEpIHtcbiAgICA7XG4gICAgbGV0IG1pbjtcbiAgICBsZXQgbWluX3N0cjtcbiAgICBsZXQgaG91cnM7XG4gICAgbGV0IGhhbGY7XG4gICAgbWluID0gK2R0LmdldE1pbnV0ZXMoKTtcbiAgICBob3VycyA9ICtkdC5nZXRIb3VycygpO1xuICAgIGhhbGYgPSBcIlwiO1xuICAgIGlmIChtaW4gPCAxMCkge1xuICAgICAgICBtaW5fc3RyID0gXCIwXCIgKyBtaW47XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBtaW5fc3RyID0gbWluLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh3aXRoRXh0cmEpIHtcbiAgICAgICAgaGFsZiA9IFwiIEFNXCI7XG4gICAgICAgIGlmIChob3VycyA+PSAxMilcbiAgICAgICAgICAgIGhhbGYgPSBcIiBQTVwiO1xuICAgICAgICBpZiAoaG91cnMgPiAxMilcbiAgICAgICAgICAgIGhvdXJzIC09IDEyO1xuICAgICAgICBpZiAoaG91cnMgPT09IDApIHtcbiAgICAgICAgICAgIGhvdXJzID0gMTI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGhvdXJzICsgXCI6XCIgKyBtaW5fc3RyICsgaGFsZjtcbn1cbmV4cG9ydHMuc2hvcnRUaW1lID0gc2hvcnRUaW1lO1xuO1xuZnVuY3Rpb24gaW5wdXRUaW1lRm10KHRpbWUsIGluY2x1ZGVTZWNvbmRzKSB7XG4gICAgbGV0IG91dCA9IFtdO1xuICAgIGxldCBob3VycyA9IHRpbWUuZ2V0SG91cnMoKTtcbiAgICBvdXQucHVzaChudW1iZXJzXzEucGFkVG9EaWdpdHMoaG91cnMsIDIpKTtcbiAgICBsZXQgbWludXRlcyA9IHRpbWUuZ2V0TWludXRlcygpO1xuICAgIG91dC5wdXNoKG51bWJlcnNfMS5wYWRUb0RpZ2l0cyhtaW51dGVzLCAyKSk7XG4gICAgaWYgKGluY2x1ZGVTZWNvbmRzKSB7XG4gICAgICAgIGxldCBzZWNvbmRzID0gdGltZS5nZXRTZWNvbmRzKCk7XG4gICAgICAgIG91dC5wdXNoKG51bWJlcnNfMS5wYWRUb0RpZ2l0cyhzZWNvbmRzLCAyKSk7XG4gICAgfVxuICAgIHJldHVybiBvdXQuam9pbihcIjpcIik7XG59XG5leHBvcnRzLmlucHV0VGltZUZtdCA9IGlucHV0VGltZUZtdDtcbmZ1bmN0aW9uIHNob3J0RGF0ZVRpbWUoZHQsIHdpdGhfZXh0cmEpIHtcbiAgICByZXR1cm4gc2hvcnREYXRlKGR0KSArIFwiIFwiICsgc2hvcnRUaW1lKGR0LCB3aXRoX2V4dHJhKTtcbn1cbmV4cG9ydHMuc2hvcnREYXRlVGltZSA9IHNob3J0RGF0ZVRpbWU7XG47XG5mdW5jdGlvbiBzdG9wd2F0Y2hEaXNwbGF5KG1pbGxpLCBub0xlYWRpbmdaZXJvcywgbm9CbGFua3MpIHtcbiAgICBsZXQgc2Vjb25kcztcbiAgICBsZXQgbWludXRlcztcbiAgICBsZXQgaG91cnM7XG4gICAgbGV0IGRheXM7XG4gICAgbGV0IGFycjtcbiAgICBsZXQgc2VjX3N0cjtcbiAgICBsZXQgbWluX3N0cjtcbiAgICBsZXQgaHJfc3RyO1xuICAgIGlmICghbm9MZWFkaW5nWmVyb3MpIHtcbiAgICAgICAgc2VjX3N0ciA9IHN0cmluZ3NfMS5hZGRMZWFkaW5nWmVyb2VzKDIsIHNlY29uZHMpO1xuICAgICAgICBtaW5fc3RyID0gc3RyaW5nc18xLmFkZExlYWRpbmdaZXJvZXMoMiwgbWludXRlcyk7XG4gICAgICAgIGhyX3N0ciA9IHN0cmluZ3NfMS5hZGRMZWFkaW5nWmVyb2VzKDIsIGhvdXJzKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHNlY19zdHIgPSBzZWNvbmRzLnRvU3RyaW5nKCk7XG4gICAgICAgIG1pbl9zdHIgPSBtaW51dGVzLnRvU3RyaW5nKCk7XG4gICAgICAgIGhyX3N0ciA9IGhvdXJzLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIHJldHVybiBkYXlzICsgXCJEICBcIiArIGhyX3N0ciArIFwiOlwiICsgbWluX3N0ciArIFwiOlwiICsgc2VjX3N0ciArIFwiICdcIiArIG1pbGxpO1xufVxuZXhwb3J0cy5zdG9wd2F0Y2hEaXNwbGF5ID0gc3RvcHdhdGNoRGlzcGxheTtcbjtcbmZ1bmN0aW9uIF9yZXRyaWV2ZUNvdW50c0Zyb21NaWxsaShtaWxsaSkge1xuICAgIGxldCBvdXQgPSB7fTtcbiAgICBsZXQgcmVtYWluaW5nID0gbWlsbGk7XG4gICAgb3V0LmRheXMgPSBNYXRoLmZsb29yKHJlbWFpbmluZyAvICgyNCAqIDYwICogNjAgKiAxMDAwKSk7XG4gICAgcmVtYWluaW5nIC09IChvdXQuZGF5cyAqIDI0ICogNjAgKiA2MCAqIDEwMDApO1xuICAgIG91dC5ob3VycyA9IE1hdGguZmxvb3IocmVtYWluaW5nIC8gKDYwICogNjAgKiAxMDAwKSk7XG4gICAgcmVtYWluaW5nIC09IChvdXQuaG91cnMgKiA2MCAqIDYwICogMTAwMCk7XG4gICAgb3V0Lm1pbnV0ZXMgPSBNYXRoLmZsb29yKHJlbWFpbmluZyAvICg2MCAqIDEwMDApKTtcbiAgICByZW1haW5pbmcgLT0gKG91dC5taW51dGVzICogNjAgKiAxMDAwKTtcbiAgICBvdXQuc2Vjb25kcyA9IE1hdGguZmxvb3IocmVtYWluaW5nIC8gMTAwMCk7XG4gICAgcmVtYWluaW5nIC09IChvdXQuc2Vjb25kcyAqIDEwMDApO1xuICAgIG91dC5taWxsaXNlY29uZHMgPSByZW1haW5pbmc7XG4gICAgcmV0dXJuIG91dDtcbn1cbmZ1bmN0aW9uIHVwZGF0ZWRTdG9wd2F0Y2hEaXNwbGF5KG1pbGxpLCBvcHRpb25zKSB7XG4gICAgbGV0IGRpZmZzID0gX3JldHJpZXZlQ291bnRzRnJvbU1pbGxpKG1pbGxpKTtcbiAgICBsZXQgb3V0ID0gW107XG4gICAgaWYgKGRpZmZzLmRheXMpIHtcbiAgICAgICAgb3V0LnB1c2goZGlmZnMuZGF5cyArIFwiIGRheXNcIik7XG4gICAgfVxuICAgIGlmIChkaWZmcy5ob3Vycykge1xuICAgICAgICBvdXQucHVzaChkaWZmcy5ob3VycyArIFwiIGhvdXJzXCIpO1xuICAgIH1cbiAgICBpZiAoZGlmZnMubWludXRlcykge1xuICAgICAgICBvdXQucHVzaChkaWZmcy5taW51dGVzICsgXCIgbWludXRlc1wiKTtcbiAgICB9XG4gICAgaWYgKGRpZmZzLnNlY29uZHMpIHtcbiAgICAgICAgb3V0LnB1c2goZGlmZnMuc2Vjb25kcyArIFwiIHNlY29uZHNcIik7XG4gICAgfVxuICAgIGlmIChkaWZmcy5taWxsaXNlY29uZHMgJiYgb3B0aW9ucy5zaG93TWlsbGkpIHtcbiAgICAgICAgb3V0LnB1c2goZGlmZnMubWlsbGlzZWNvbmRzICsgXCIgbXNcIik7XG4gICAgfVxuICAgIHJldHVybiBvdXQuam9pbihcIiBcIik7XG59XG5leHBvcnRzLnVwZGF0ZWRTdG9wd2F0Y2hEaXNwbGF5ID0gdXBkYXRlZFN0b3B3YXRjaERpc3BsYXk7XG5mdW5jdGlvbiBhZGRUb0RhdGUoZGF0ZSwgY291bnRzKSB7XG4gICAgaWYgKGNvdW50cy5taWxsaXNlY29uZHMpIHtcbiAgICAgICAgZGF0ZS5zZXRNaWxsaXNlY29uZHMoZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSArIGNvdW50cy5taWxsaXNlY29uZHMpO1xuICAgIH1cbiAgICBpZiAoY291bnRzLnNlY29uZHMpIHtcbiAgICAgICAgZGF0ZS5zZXRTZWNvbmRzKGRhdGUuZ2V0U2Vjb25kcygpICsgY291bnRzLnNlY29uZHMpO1xuICAgIH1cbiAgICBpZiAoY291bnRzLm1pbnV0ZXMpIHtcbiAgICAgICAgZGF0ZS5zZXRNaW51dGVzKGRhdGUuZ2V0TWludXRlcygpICsgY291bnRzLm1pbnV0ZXMpO1xuICAgIH1cbiAgICBpZiAoY291bnRzLmhvdXJzKSB7XG4gICAgICAgIGRhdGUuc2V0SG91cnMoZGF0ZS5nZXRIb3VycygpICsgY291bnRzLmhvdXJzKTtcbiAgICB9XG4gICAgaWYgKGNvdW50cy5kYXlzKSB7XG4gICAgICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIGNvdW50cy5kYXlzKTtcbiAgICB9XG4gICAgaWYgKGNvdW50cy5tb250aHMpIHtcbiAgICAgICAgZGF0ZS5zZXRNb250aChkYXRlLmdldE1vbnRoKCkgKyBjb3VudHMubW9udGhzKTtcbiAgICB9XG4gICAgaWYgKGNvdW50cy55ZWFycykge1xuICAgICAgICBkYXRlLnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSArIGNvdW50cy55ZWFycyk7XG4gICAgfVxuICAgIHJldHVybiBkYXRlO1xufVxuZXhwb3J0cy5hZGRUb0RhdGUgPSBhZGRUb0RhdGU7XG47XG5mdW5jdGlvbiBnZXRNb250aE5hbWUoZGF0ZSwgc2hvcnQpIHtcbiAgICBzd2l0Y2ggKGRhdGUuZ2V0TW9udGgoKSkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBpZiAoc2hvcnQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiSmFuXCI7XG4gICAgICAgICAgICByZXR1cm4gXCJKYW51YXJ5XCI7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGlmIChzaG9ydClcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJGZWJcIjtcbiAgICAgICAgICAgIHJldHVybiBcIkZlYnJ1YXJ5XCI7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGlmIChzaG9ydClcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJNYXJcIjtcbiAgICAgICAgICAgIHJldHVybiBcIk1hcmNoXCI7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGlmIChzaG9ydClcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJBcHJcIjtcbiAgICAgICAgICAgIHJldHVybiBcIkFwcmlsXCI7XG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIHJldHVybiBcIk1heVwiO1xuICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICBpZiAoc2hvcnQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiSnVuXCI7XG4gICAgICAgICAgICByZXR1cm4gXCJKdW5lXCI7XG4gICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgIGlmIChzaG9ydClcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJKdWxcIjtcbiAgICAgICAgICAgIHJldHVybiBcIkp1bHlcIjtcbiAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgaWYgKHNob3J0KVxuICAgICAgICAgICAgICAgIHJldHVybiBcIkF1Z1wiO1xuICAgICAgICAgICAgcmV0dXJuIFwiQXVndXN0XCI7XG4gICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgIGlmIChzaG9ydClcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJTZXB0XCI7XG4gICAgICAgICAgICByZXR1cm4gXCJTZXB0ZW1iZXJcIjtcbiAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgaWYgKHNob3J0KVxuICAgICAgICAgICAgICAgIHJldHVybiBcIk9jdFwiO1xuICAgICAgICAgICAgcmV0dXJuIFwiT2N0b2JlclwiO1xuICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgaWYgKHNob3J0KVxuICAgICAgICAgICAgICAgIHJldHVybiBcIk5vdlwiO1xuICAgICAgICAgICAgcmV0dXJuIFwiTm92ZW1iZXJcIjtcbiAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgIGlmIChzaG9ydClcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJEZWNcIjtcbiAgICAgICAgICAgIHJldHVybiBcIkRlY2VtYmVyXCI7XG4gICAgfVxuICAgIHJldHVybiBcIlwiO1xufVxuZXhwb3J0cy5nZXRNb250aE5hbWUgPSBnZXRNb250aE5hbWU7XG47XG5mdW5jdGlvbiBnZXREYXlPZldlZWsoZGF0ZSwgc2hvcnQpIHtcbiAgICA7XG4gICAgc3dpdGNoIChkYXRlLmdldERheSgpKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIGlmIChzaG9ydClcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJTdW5cIjtcbiAgICAgICAgICAgIHJldHVybiBcIlN1bmRheVwiO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBpZiAoc2hvcnQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiTW9uXCI7XG4gICAgICAgICAgICByZXR1cm4gXCJNb25kYXlcIjtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgaWYgKHNob3J0KVxuICAgICAgICAgICAgICAgIHJldHVybiBcIlR1ZXNcIjtcbiAgICAgICAgICAgIHJldHVybiBcIlR1ZXNkYXlcIjtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgaWYgKHNob3J0KVxuICAgICAgICAgICAgICAgIHJldHVybiBcIldlZFwiO1xuICAgICAgICAgICAgcmV0dXJuIFwiV2VkbmVzZGF5XCI7XG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIGlmIChzaG9ydClcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJUaHVyc1wiO1xuICAgICAgICAgICAgcmV0dXJuIFwiVGh1cnNkYXlcIjtcbiAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgaWYgKHNob3J0KVxuICAgICAgICAgICAgICAgIHJldHVybiBcIkZyaVwiO1xuICAgICAgICAgICAgcmV0dXJuIFwiRnJpZGF5XCI7XG4gICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgIGlmIChzaG9ydClcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJTYXRcIjtcbiAgICAgICAgICAgIHJldHVybiBcIlNhdHVyZGF5XCI7XG4gICAgfVxuICAgIHJldHVybiBcIlwiO1xufVxuZXhwb3J0cy5nZXREYXlPZldlZWsgPSBnZXREYXlPZldlZWs7XG47XG5mdW5jdGlvbiBnZXRMZW5ndGhPZk1vbnRoSW5EYXlzKGRhdGUpIHtcbiAgICBpZiAoIWRhdGUpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICBsZXQgbW9udGggPSBkYXRlLmdldE1vbnRoKCk7XG4gICAgc3dpdGNoIChtb250aCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICBjYXNlIDY6XG4gICAgICAgIGNhc2UgNzpcbiAgICAgICAgY2FzZSA5OlxuICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgcmV0dXJuIDMxO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBpZiAoaXNMZWFwWWVhcihkYXRlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAyOTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAyODtcbiAgICAgICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAzMDtcbiAgICB9XG59XG5leHBvcnRzLmdldExlbmd0aE9mTW9udGhJbkRheXMgPSBnZXRMZW5ndGhPZk1vbnRoSW5EYXlzO1xuZnVuY3Rpb24gaXNMZWFwWWVhcihkYXRlKSB7XG4gICAgaWYgKCFkYXRlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgbGV0IHllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XG4gICAgaWYgKHllYXIgJSA0ICE9PSAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCh5ZWFyICUgMTAwID09PSAwKSAmJiAoeWVhciAlIDQwMCAhPT0gMCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmV4cG9ydHMuaXNMZWFwWWVhciA9IGlzTGVhcFllYXI7XG5mdW5jdGlvbiBnZXRTaG9ydFllYXIoZGF0ZSkge1xuICAgIHJldHVybiAoK2RhdGUuZ2V0RnVsbFllYXIoKSAlIDEwMCk7XG59XG5leHBvcnRzLmdldFNob3J0WWVhciA9IGdldFNob3J0WWVhcjtcbmZ1bmN0aW9uIGlzV2Vla2VuZChkYXRlKSB7XG4gICAgbGV0IGRheU9mV2VlayA9IGRhdGUuZ2V0RGF5KCk7XG4gICAgaWYgKGRheU9mV2VlayA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGRheU9mV2VlayA9PT0gNikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0cy5pc1dlZWtlbmQgPSBpc1dlZWtlbmQ7XG5mdW5jdGlvbiBpc1RvZGF5KGRhdGUpIHtcbiAgICBsZXQgdG9kYXkgPSBnZXRUb2RheSgpO1xuICAgIGxldCBjbG9uZURhdGUgPSBjbGVhclRpbWVJbmZvKGRhdGUpO1xuICAgIHJldHVybiBpc1NhbWVEYXRlKHRvZGF5LCBjbG9uZURhdGUpO1xufVxuZXhwb3J0cy5pc1RvZGF5ID0gaXNUb2RheTtcbmZ1bmN0aW9uIGlzU2FtZURhdGUoZGF0ZUEsIGRhdGVCKSB7XG4gICAgaWYgKHNob3J0RGF0ZShkYXRlQSkgPT09IHNob3J0RGF0ZShkYXRlQikpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydHMuaXNTYW1lRGF0ZSA9IGlzU2FtZURhdGU7XG5mdW5jdGlvbiBnZXREaXNwbGF5RHVyYXRpb24oY291bnRzKSB7XG4gICAgX3VwZGF0ZURhdGVEaWZmZXJlbmNlcygxMDAwLCBjb3VudHMsIFwibWlsbGlzZWNvbmRzXCIsIFwic2Vjb25kc1wiKTtcbiAgICBfdXBkYXRlRGF0ZURpZmZlcmVuY2VzKDYwLCBjb3VudHMsIFwic2Vjb25kc1wiLCBcIm1pbnV0ZXNcIik7XG4gICAgX3VwZGF0ZURhdGVEaWZmZXJlbmNlcyg2MCwgY291bnRzLCBcIm1pbnV0ZXNcIiwgXCJob3Vyc1wiKTtcbiAgICBfdXBkYXRlRGF0ZURpZmZlcmVuY2VzKDI0LCBjb3VudHMsIFwiaG91cnNcIiwgXCJkYXlzXCIpO1xuICAgIF91cGRhdGVEYXRlRGlmZmVyZW5jZXMoMzAsIGNvdW50cywgXCJkYXlzXCIsIFwibW9udGhzXCIpO1xuICAgIF91cGRhdGVEYXRlRGlmZmVyZW5jZXMoMTIsIGNvdW50cywgXCJtb250aHNcIiwgXCJ5ZWFyc1wiKTtcbiAgICBsZXQgb3V0ID0gW107XG4gICAgaWYgKGNvdW50cy55ZWFycykge1xuICAgICAgICBvdXQucHVzaChfY3JlYXRlUGx1cmFsU3RyaW5nKGNvdW50cy55ZWFycywgXCJ5ZWFyXCIpKTtcbiAgICB9XG4gICAgaWYgKGNvdW50cy5tb250aHMpIHtcbiAgICAgICAgb3V0LnB1c2goX2NyZWF0ZVBsdXJhbFN0cmluZyhjb3VudHMubW9udGhzLCBcIm1vbnRoXCIpKTtcbiAgICB9XG4gICAgaWYgKGNvdW50cy5kYXlzKSB7XG4gICAgICAgIG91dC5wdXNoKF9jcmVhdGVQbHVyYWxTdHJpbmcoY291bnRzLmRheXMsIFwiZGF5XCIpKTtcbiAgICB9XG4gICAgaWYgKGNvdW50cy5ob3Vycykge1xuICAgICAgICBvdXQucHVzaChfY3JlYXRlUGx1cmFsU3RyaW5nKGNvdW50cy5ob3VycywgXCJob3VyXCIpKTtcbiAgICB9XG4gICAgaWYgKGNvdW50cy5taW51dGVzKSB7XG4gICAgICAgIG91dC5wdXNoKF9jcmVhdGVQbHVyYWxTdHJpbmcoY291bnRzLm1pbnV0ZXMsIFwibWludXRlXCIpKTtcbiAgICB9XG4gICAgaWYgKGNvdW50cy5zZWNvbmRzKSB7XG4gICAgICAgIG91dC5wdXNoKF9jcmVhdGVQbHVyYWxTdHJpbmcoY291bnRzLnNlY29uZHMsIFwic2Vjb25kXCIpKTtcbiAgICB9XG4gICAgaWYgKGNvdW50cy5taWxsaXNlY29uZHMpIHtcbiAgICAgICAgb3V0LnB1c2goX2NyZWF0ZVBsdXJhbFN0cmluZyhjb3VudHMubWlsbGlzZWNvbmRzLCBcIm1pbGxpc2Vjb25kXCIpKTtcbiAgICB9XG4gICAgcmV0dXJuIG91dC5qb2luKFwiIFwiKTtcbn1cbmV4cG9ydHMuZ2V0RGlzcGxheUR1cmF0aW9uID0gZ2V0RGlzcGxheUR1cmF0aW9uO1xuZnVuY3Rpb24gX3VwZGF0ZURhdGVEaWZmZXJlbmNlcyhkaXZpc29yLCBvdXQsIHN0YXJ0S2V5LCBlbmRLZXkpIHtcbiAgICBpZiAoIW91dFtzdGFydEtleV0pIHtcbiAgICAgICAgb3V0W3N0YXJ0S2V5XSA9IDA7XG4gICAgfVxuICAgIGlmICghb3V0W2VuZEtleV0pIHtcbiAgICAgICAgb3V0W2VuZEtleV0gPSAwO1xuICAgIH1cbiAgICBsZXQgZGl2aWRlbmQgPSBvdXRbc3RhcnRLZXldO1xuICAgIGxldCByZW1haW5kZXIgPSBkaXZpZGVuZCAlIGRpdmlzb3I7XG4gICAgbGV0IHF1b3RpZW50ID0gTWF0aC5mbG9vcihkaXZpZGVuZCAvIGRpdmlzb3IpO1xuICAgIG91dFtzdGFydEtleV0gPSByZW1haW5kZXI7XG4gICAgb3V0W2VuZEtleV0gKz0gcXVvdGllbnQ7XG4gICAgcmV0dXJuIG91dDtcbn1cbmZ1bmN0aW9uIF9jcmVhdGVQbHVyYWxTdHJpbmcoYW1vdW50LCBzaW5ndWxhciwgcGx1cmFsKSB7XG4gICAgaWYgKGFtb3VudCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gYW1vdW50ICsgXCIgXCIgKyBzaW5ndWxhcjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmICghcGx1cmFsKSB7XG4gICAgICAgICAgICBwbHVyYWwgPSBzaW5ndWxhciArIFwic1wiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbW91bnQgKyBcIiBcIiArIHBsdXJhbDtcbiAgICB9XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IG1hbmlwdWxhdGVfMSA9IHJlcXVpcmUoXCIuL21hbmlwdWxhdGVcIik7XG5leHBvcnRzLmRpY3Rpb25hcnlUb0FycmF5ID0gKGRpY3QgPSB7fSkgPT4ge1xuICAgIGNvbnN0IG91dCA9IFtdO1xuICAgIG1hbmlwdWxhdGVfMS5tYXAoZGljdCwgKHZhbCkgPT4ge1xuICAgICAgICBvdXQucHVzaCh2YWwpO1xuICAgIH0pO1xuICAgIHJldHVybiBvdXQ7XG59O1xuZXhwb3J0cy5hcnJheVRvTWFwID0gKGFycmF5ID0gW10pID0+IHtcbiAgICBjb25zdCBvdXQgPSBuZXcgTWFwKCk7XG4gICAgZm9yIChsZXQgdmFsIG9mIGFycmF5KSB7XG4gICAgICAgIG91dC5zZXQodmFsLCB0cnVlKTtcbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNyZWF0ZV9lbGVtZW50c18xID0gcmVxdWlyZShcIkB0b29sa2lwL2NyZWF0ZS1lbGVtZW50c1wiKTtcbmZ1bmN0aW9uIGxvYWRGaWxlKGZpbGVEZXRhaWxzKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgdGhpcy5faW5uZXJMb2FkRmlsZShmaWxlRGV0YWlscywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICB9KTtcbn1cbmV4cG9ydHMubG9hZEZpbGUgPSBsb2FkRmlsZTtcbmZ1bmN0aW9uIF9pbm5lckxvYWRGaWxlKGZpbGVEZXRhaWxzLCBzdWNjZXNzLCBlcnJvcikge1xuICAgIGxldCByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgcmVxdWVzdC5vcGVuKCdHRVQnLCBmaWxlRGV0YWlscy5maWxlbmFtZSk7XG4gICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgIGlmIChyZXF1ZXN0LnJlYWR5U3RhdGUgPT0gNCAmJiByZXF1ZXN0LnN0YXR1cyA9PSAyMDApIHtcbiAgICAgICAgICAgIHN1Y2Nlc3MocmVxdWVzdC5yZXNwb25zZVRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHJlcXVlc3Quc3RhdHVzID09PSA0MDQpIHtcbiAgICAgICAgICAgIGVycm9yKHJlcXVlc3QucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmVxdWVzdC5zZW5kKCk7XG59XG5leHBvcnRzLl9pbm5lckxvYWRGaWxlID0gX2lubmVyTG9hZEZpbGU7XG47XG5mdW5jdGlvbiBzYXZlRmlsZShmaWxlRGV0YWlscykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICBfaW5uZXJTYXZlRmlsZShmaWxlRGV0YWlscywgcmVzb2x2ZSk7XG4gICAgfSk7XG59XG5leHBvcnRzLnNhdmVGaWxlID0gc2F2ZUZpbGU7XG5mdW5jdGlvbiBfaW5uZXJTYXZlRmlsZSh7IGZpbGVuYW1lLCBjb250ZW50IH0sIHJlc29sdmUpIHtcbiAgICBsZXQgYmxvYjtcbiAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgYmxvYiA9IG5ldyBCbG9iKFtjb250ZW50XSwgeyB0eXBlOiBcInRleHQvcGxhaW5cIiB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGJsb2IgPSBjb250ZW50O1xuICAgIH1cbiAgICBfZ2VuZXJhdGVEb3dubG9hZChmaWxlbmFtZSwgYmxvYik7XG59XG5mdW5jdGlvbiBfZ2VuZXJhdGVEb3dubG9hZChmaWxlbmFtZSwgZmlsZSkge1xuICAgIGlmICh3aW5kb3cubmF2aWdhdG9yLm1zU2F2ZU9yT3BlbkJsb2IpIHtcbiAgICAgICAgd2luZG93Lm5hdmlnYXRvci5tc1NhdmVCbG9iKGZpbGUsIFwidVwiKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGxldCBlbGVtID0gY3JlYXRlX2VsZW1lbnRzXzEuY3JlYXRlRWxlbWVudCh7XG4gICAgICAgICAgICB0eXBlOiBcImFcIixcbiAgICAgICAgICAgIGF0dHI6IHtcbiAgICAgICAgICAgICAgICBcImhyZWZcIjogd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoZmlsZSksXG4gICAgICAgICAgICAgICAgXCJkb3dubG9hZFwiOiBmaWxlbmFtZVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbGVtKTtcbiAgICAgICAgZWxlbS5jbGljaygpO1xuICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGVsZW0pO1xuICAgIH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3Qgc2hhcmVkX3R5cGVzXzEgPSByZXF1aXJlKFwiQHRvb2xraXAvc2hhcmVkLXR5cGVzXCIpO1xuY29uc3Qgc3R5bGVfaGVscGVyc18xID0gcmVxdWlyZShcIkB0b29sa2lwL3N0eWxlLWhlbHBlcnNcIik7XG5jb25zdCBzdHlsZV9saWJyYXJpZXNfMSA9IHJlcXVpcmUoXCJAdG9vbGtpcC9zdHlsZS1saWJyYXJpZXNcIik7XG5jb25zdCBvYmplY3RfaGVscGVyc18xID0gcmVxdWlyZShcIkB0b29sa2lwL29iamVjdC1oZWxwZXJzXCIpO1xuY29uc3QgX3R5cGVHdWFyZHNfMSA9IHJlcXVpcmUoXCIuL190eXBlR3VhcmRzXCIpO1xuY29uc3QgbW9kZWxfMSA9IHJlcXVpcmUoXCJAdG9vbGtpcC9tb2RlbFwiKTtcbmZ1bmN0aW9uIF9jb3JlQ3JlYXRlRWxlbWVudHMob2Jqcywga2V5ZWRFbGVtcywgcmVjdXJzZVZpYSkge1xuICAgIGlmICghc2hhcmVkX3R5cGVzXzEuaXNBcnJheShvYmpzKSkge1xuICAgICAgICByZXR1cm4gW3RoaXMuX2NvcmVDcmVhdGVFbGVtZW50KG9ianMsIGtleWVkRWxlbXMsIHJlY3Vyc2VWaWEpXTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IG91dCA9IFtdO1xuICAgICAgICBmb3IgKGxldCBvYmogb2Ygb2Jqcykge1xuICAgICAgICAgICAgb3V0LnB1c2godGhpcy5fY29yZUNyZWF0ZUVsZW1lbnQob2JqLCBrZXllZEVsZW1zLCByZWN1cnNlVmlhKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG59XG5leHBvcnRzLl9jb3JlQ3JlYXRlRWxlbWVudHMgPSBfY29yZUNyZWF0ZUVsZW1lbnRzO1xuZnVuY3Rpb24gX2NvcmVDcmVhdGVFbGVtZW50KG9iaiwga2V5ZWRFbGVtcywgcmVjdXJzZVZpYSkge1xuICAgIGxldCBlbGVtO1xuICAgIGxldCBkcmF3YWJsZTtcbiAgICBpZiAob2JqLmRyYXdhYmxlKSB7XG4gICAgICAgIGRyYXdhYmxlID0gX2NyZWF0ZURyYXdhYmxlKG9iai5kcmF3YWJsZSk7XG4gICAgICAgIGVsZW0gPSBkcmF3YWJsZS5iYXNlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZWxlbSA9IF9jcmVhdGVTdGFuZGFyZEVsZW1lbnQob2JqKTtcbiAgICB9XG4gICAgaWYgKCFyZWN1cnNlVmlhKSB7XG4gICAgICAgIHJlY3Vyc2VWaWEgPSBfY29yZUNyZWF0ZUVsZW1lbnQ7XG4gICAgfVxuICAgIF9zZXRFbGVtSWRlbnRmaWVycyhlbGVtLCBvYmosIGtleWVkRWxlbXMsIGRyYXdhYmxlKTtcbiAgICBfc2V0RWxlbUNsYXNzKGVsZW0sIG9iaik7XG4gICAgX3NldEVsZW1TdHlsZXMoZWxlbSwgb2JqKTtcbiAgICBfc2V0RWxlbUF0dHJpYnV0ZXMoZWxlbSwgb2JqKTtcbiAgICBfc2V0RWxlbVN0eWxlKGVsZW0sIG9iaik7XG4gICAgX3NldEV2ZW50TGlzdGVuZXJzKGVsZW0sIG9iaik7XG4gICAgaWYgKG9iai5jaGlsZHJlbikge1xuICAgICAgICBfYWRkRWxlbUNoaWxkcmVuKGVsZW0sIG9iaiwga2V5ZWRFbGVtcywgcmVjdXJzZVZpYSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBfc2V0RWxlbUJhc2VDb250ZW50KGVsZW0sIG9iaik7XG4gICAgfVxuICAgIF9zZXRFbGVtU2VsZWN0b3Iob2JqLCBlbGVtKTtcbiAgICBfYXBwZW5kRWxlbVRvUGFyZW50KG9iaiwgZWxlbSk7XG4gICAgcmV0dXJuIGVsZW07XG59XG5leHBvcnRzLl9jb3JlQ3JlYXRlRWxlbWVudCA9IF9jb3JlQ3JlYXRlRWxlbWVudDtcbmZ1bmN0aW9uIF9jcmVhdGVEcmF3YWJsZShjdG9yKSB7XG4gICAgbGV0IGNoaWxkO1xuICAgIHRyeSB7XG4gICAgICAgIGNoaWxkID0gY3RvcigpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICBjaGlsZCA9IG5ldyBjdG9yKCk7XG4gICAgfVxuICAgIHJldHVybiBjaGlsZDtcbn1cbmZ1bmN0aW9uIF9jcmVhdGVTdGFuZGFyZEVsZW1lbnQob2JqKSB7XG4gICAgbGV0IGVsZW07XG4gICAgbGV0IHR5cGUgPSBvYmoudHlwZSB8fCBcImRpdlwiO1xuICAgIGlmIChvYmoubmFtZXNwYWNlKSB7XG4gICAgICAgIGVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMob2JqLm5hbWVzcGFjZSwgdHlwZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBlbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0eXBlKTtcbiAgICB9XG4gICAgcmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiBfc2V0RWxlbUlkZW50ZmllcnMoZWxlbSwgb2JqLCBrZXllZEVsZW1zLCBkcmF3YWJsZSkge1xuICAgIGlmIChvYmouaWQpIHtcbiAgICAgICAgX2hhbmRsZVNlbGVjdG9yKG9iai5pZCwgKGlkKSA9PiBlbGVtLnNldEF0dHJpYnV0ZShcImlkXCIsIGlkKSk7XG4gICAgfVxuICAgIGlmIChvYmoua2V5ICYmIGtleWVkRWxlbXMpIHtcbiAgICAgICAgaWYgKGRyYXdhYmxlKSB7XG4gICAgICAgICAgICBrZXllZEVsZW1zW29iai5rZXldID0gZHJhd2FibGU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBrZXllZEVsZW1zW29iai5rZXldID0gZWxlbTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIF9zZXRFbGVtQ2xhc3MoZWxlbSwgb2JqKSB7XG4gICAgY29uc3QgY2xzID0gb2JqLmNscztcbiAgICBpZiAoIWNscykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIF9oYW5kbGVTZWxlY3RvcihjbHMsICh2KSA9PiBfaW5uZXJTZXRFbGVtQ2xhc3MoZWxlbSwgdiwgb2JqKSk7XG59XG5mdW5jdGlvbiBfaW5uZXJTZXRFbGVtQ2xhc3MoZWxlbSwgY2xzLCBvYmopIHtcbiAgICBpZiAoX3R5cGVHdWFyZHNfMS5pc0NsYXNzRGVmaW5pdGlvbihjbHMpKSB7XG4gICAgICAgIF9zZXRFbGVtU3R5bGVzKGVsZW0sIHsgc3R5bGVzOiBjbHMuc3R5bGVzIH0pO1xuICAgICAgICBfc2V0RWxlbUNsYXNzTmFtZShlbGVtLCBjbHMubmFtZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBfc2V0RWxlbUNsYXNzTmFtZShlbGVtLCBjbHMpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIF9zZXRFbGVtQ2xhc3NOYW1lKGVsZW0sIG5hbWUpIHtcbiAgICBzdHlsZV9oZWxwZXJzXzEuY2xlYXJDbGFzcyhlbGVtKTtcbiAgICBpZiAoc2hhcmVkX3R5cGVzXzEuaXNTdHJpbmcobmFtZSkpIHtcbiAgICAgICAgc3R5bGVfaGVscGVyc18xLmFkZENsYXNzKGVsZW0sIG5hbWUpO1xuICAgIH1cbiAgICBlbHNlIGlmIChzaGFyZWRfdHlwZXNfMS5pc0FycmF5KG5hbWUpKSB7XG4gICAgICAgIHN0eWxlX2hlbHBlcnNfMS5hZGRDbGFzcyhlbGVtLCBuYW1lLmpvaW4oXCIgXCIpKTtcbiAgICB9XG4gICAgO1xufVxuZnVuY3Rpb24gX3NldEVsZW1TdHlsZXMoZWxlbSwgb2JqKSB7XG4gICAgY29uc3Qgc3R5bGVzID0gb2JqLnN0eWxlcztcbiAgICBpZiAoIXN0eWxlcykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBzdHlsZUFycmF5O1xuICAgIGlmIChzaGFyZWRfdHlwZXNfMS5pc0FycmF5KHN0eWxlcykpIHtcbiAgICAgICAgc3R5bGVBcnJheSA9IFsuLi5zdHlsZXNdO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc3R5bGVBcnJheSA9IFtzdHlsZXNdO1xuICAgIH1cbiAgICBmb3IgKGxldCBzIG9mIHN0eWxlQXJyYXkpIHtcbiAgICAgICAgX2hhbmRsZVNlbGVjdG9yKHMsICh2KSA9PiBfaW5uZXJTZXRFbGVtU3R5bGVzKGVsZW0sIHYpKTtcbiAgICB9XG59XG5mdW5jdGlvbiBfaW5uZXJTZXRFbGVtU3R5bGVzKGVsZW0sIHN0eWxlcykge1xuICAgIGNvbnN0IGZsYXR0ZW5lZFN0eWxlcyA9IHN0eWxlX2hlbHBlcnNfMS5mbGF0dGVuU3R5bGVzKHN0eWxlcyk7XG4gICAgb2JqZWN0X2hlbHBlcnNfMS5tYXAoZmxhdHRlbmVkU3R5bGVzLCAodmFsdWUsIHNlbGVjdG9yKSA9PiB7XG4gICAgICAgIHN0eWxlX2xpYnJhcmllc18xLmNyZWF0ZUNzc0NsYXNzKHNlbGVjdG9yLCB2YWx1ZSwgJ2NyZWF0ZV9lbGVtZW50cycpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gX3NldEVsZW1BdHRyaWJ1dGVzKGVsZW0sIG9iaikge1xuICAgIGlmICghb2JqLmF0dHIpIHtcbiAgICAgICAgb2JqLmF0dHIgPSB7fTtcbiAgICB9XG4gICAgaWYgKF9pc0ZvY3VzYWJsZShvYmopKSB7XG4gICAgICAgIG9iai5mb2N1c2FibGUgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoX25lZWRzVGFiSW5kZXgob2JqKSkge1xuICAgICAgICBvYmouYXR0ci50YWJpbmRleCA9IDA7XG4gICAgfVxuICAgIG9iamVjdF9oZWxwZXJzXzEubWFwKG9iai5hdHRyLCAodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICBfaGFuZGxlU2VsZWN0b3IodmFsdWUsICh2KSA9PiBfaW5uZXJTZXRBdHRyaWJ1dGUoZWxlbSwgdiwga2V5KSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBfaW5uZXJTZXRBdHRyaWJ1dGUoZWxlbSwgdmFsdWUsIGtleSkge1xuICAgIGlmIChzaGFyZWRfdHlwZXNfMS5pc051bGxPclVuZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodmFsdWUua2V5KSB7XG4gICAgICAgIGxldCBwYWlyID0gdmFsdWU7XG4gICAgICAgIF9zZXRFbGVtQXR0cmlidXRlKGVsZW0sIHBhaXIua2V5LCBwYWlyLnZhbCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBfc2V0RWxlbUF0dHJpYnV0ZShlbGVtLCBrZXksIHZhbHVlKTtcbiAgICB9XG59XG5mdW5jdGlvbiBfc2V0RWxlbUF0dHJpYnV0ZShlbGVtLCBrZXksIHZhbHVlKSB7XG4gICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgY2FzZSBcInZhbHVlXCI6XG4gICAgICAgICAgICBlbGVtLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGVsZW0uc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxufVxuZnVuY3Rpb24gX2lzRm9jdXNhYmxlKG9iaikge1xuICAgIGlmICghc2hhcmVkX3R5cGVzXzEuaXNOdWxsT3JVbmRlZmluZWQob2JqLmZvY3VzYWJsZSkpIHtcbiAgICAgICAgcmV0dXJuIG9iai5mb2N1c2FibGU7XG4gICAgfVxuICAgIGlmICghb2JqLmV2ZW50TGlzdGVuZXJzKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFvYmouZXZlbnRMaXN0ZW5lcnMuY2xpY2spIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIF9uZWVkc1RhYkluZGV4KG9iaikge1xuICAgIGlmICghX2lzRm9jdXNhYmxlKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAob2JqLmF0dHIudGFiSW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIF9zZXRFbGVtU3R5bGUoZWxlbSwgb2JqKSB7XG4gICAgaWYgKCFvYmouc3R5bGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBfaGFuZGxlU2VsZWN0b3Iob2JqLnN0eWxlLCAoc3R5bGUpID0+IHtcbiAgICAgICAgb2JqZWN0X2hlbHBlcnNfMS5tYXAoc3R5bGUsICh2YWwsIGtleSkgPT4ge1xuICAgICAgICAgICAgZWxlbS5zdHlsZVtrZXldID0gdmFsO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIF9zZXRFdmVudExpc3RlbmVycyhlbGVtLCBvYmopIHtcbiAgICBpZiAoIW9iai5ldmVudExpc3RlbmVycykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChvYmouZm9jdXNhYmxlICYmIG9iai5ldmVudExpc3RlbmVycy5jbGljayAmJiAhb2JqLmV2ZW50TGlzdGVuZXJzLmtleXByZXNzKSB7XG4gICAgICAgIGxldCBjbGlja0Z1bmMgPSBvYmouZXZlbnRMaXN0ZW5lcnMuY2xpY2s7XG4gICAgICAgIG9iai5ldmVudExpc3RlbmVycy5rZXlwcmVzcyA9IChlKSA9PiB7XG4gICAgICAgICAgICBpZiAoZS5rZXlDb2RlICE9PSAxMyAmJiBlLmtleUNvZGUgIT09IDMyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2xpY2tGdW5jKGUpO1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9O1xuICAgICAgICBsZXQgcHJldmVudEZvY3VzID0gZmFsc2U7XG4gICAgICAgIG9iai5ldmVudExpc3RlbmVycy5tb3VzZWRvd24gPSAoZSkgPT4ge1xuICAgICAgICAgICAgcHJldmVudEZvY3VzID0gdHJ1ZTtcbiAgICAgICAgICAgIGVsZW0uYmx1cigpO1xuICAgICAgICB9O1xuICAgICAgICBvYmouZXZlbnRMaXN0ZW5lcnMubW91c2V1cCA9IChlKSA9PiB7XG4gICAgICAgICAgICBwcmV2ZW50Rm9jdXMgPSBmYWxzZTtcbiAgICAgICAgfTtcbiAgICAgICAgb2JqLmV2ZW50TGlzdGVuZXJzLmZvY3VzID0gKGUpID0+IHtcbiAgICAgICAgICAgIGlmIChwcmV2ZW50Rm9jdXMpIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZWxlbS5ibHVyKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICBvYmplY3RfaGVscGVyc18xLm1hcChvYmouZXZlbnRMaXN0ZW5lcnMsIChsaXN0ZW5lciwga2V5KSA9PiB7XG4gICAgICAgIGVsZW0uYWRkRXZlbnRMaXN0ZW5lcihrZXksIGxpc3RlbmVyKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIF9zZXRFbGVtQmFzZUNvbnRlbnQoZWxlbSwgb2JqKSB7XG4gICAgaWYgKG9iai5jb250ZW50KSB7XG4gICAgICAgIF9oYW5kbGVTZWxlY3RvcihvYmouY29udGVudCwgKGlubmVySFRNTCkgPT4gZWxlbS5pbm5lckhUTUwgPSBpbm5lckhUTUwpO1xuICAgIH1cbiAgICBlbHNlIGlmIChvYmouaW5uZXJIVE1MKSB7XG4gICAgICAgIF9oYW5kbGVTZWxlY3RvcihvYmouaW5uZXJIVE1MLCAoaW5uZXJIVE1MKSA9PiBlbGVtLmlubmVySFRNTCA9IGlubmVySFRNTCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKG9iai5pbm5lclRleHQpIHtcbiAgICAgICAgX2hhbmRsZVNlbGVjdG9yKG9iai5pbm5lclRleHQsIChpbm5lclRleHQpID0+IGVsZW0uaW5uZXJUZXh0ID0gaW5uZXJUZXh0KTtcbiAgICB9XG59XG5mdW5jdGlvbiBfYWRkRWxlbUNoaWxkcmVuKGVsZW0sIG9iaiwga2V5ZWRFbGVtcywgcmVjdXJzZVZpYSkge1xuICAgIGlmICghb2JqLmNoaWxkcmVuKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgX2hhbmRsZVNlbGVjdG9yKG9iai5jaGlsZHJlbiwgKHYpID0+IHtcbiAgICAgICAgZWxlbS5pbm5lckhUTUwgPSBcIlwiO1xuICAgICAgICBfaW5uZXJBZGRFbGVtQ2hpbGRyZW4oZWxlbSwgdiwgb2JqLm5hbWVzcGFjZSwga2V5ZWRFbGVtcywgcmVjdXJzZVZpYSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBfaW5uZXJBZGRFbGVtQ2hpbGRyZW4oZWxlbSwgY2hpbGRyZW4sIG5hbWVzcGFjZSwga2V5ZWRFbGVtcywgcmVjdXJzZVZpYSkge1xuICAgIGZvciAobGV0IGMgb2YgY2hpbGRyZW4pIHtcbiAgICAgICAgaWYgKCFjKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJjYW5ub3QgYXBwZW5kIG5vbi1leGlzdGVudCBjaGlsZCBlbGVtZW50XCIpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgX2hhbmRsZVNlbGVjdG9yKGMsICh2KSA9PiB7XG4gICAgICAgICAgICBfaW5uZXJBZGRFbGVtQ2hpbGQoZWxlbSwgdiwgbmFtZXNwYWNlLCBrZXllZEVsZW1zLCByZWN1cnNlVmlhKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZnVuY3Rpb24gX2lubmVyQWRkRWxlbUNoaWxkKGVsZW0sIGNoaWxkLCBuYW1lc3BhY2UsIGtleWVkRWxlbXMsIHJlY3Vyc2VWaWEpIHtcbiAgICBpZiAoc2hhcmVkX3R5cGVzXzEuaXNBcnJheShjaGlsZCkpIHtcbiAgICAgICAgX2lubmVyQWRkRWxlbUNoaWxkcmVuKGVsZW0sIGNoaWxkLCBuYW1lc3BhY2UsIGtleWVkRWxlbXMsIHJlY3Vyc2VWaWEpO1xuICAgIH1cbiAgICBlbHNlIGlmIChzaGFyZWRfdHlwZXNfMS5pc0RyYXdhYmxlKGNoaWxkKSkge1xuICAgICAgICBjaGlsZC5kcmF3KGVsZW0pO1xuICAgIH1cbiAgICBlbHNlIGlmIChjaGlsZC5zZXRBdHRyaWJ1dGUpIHtcbiAgICAgICAgZWxlbS5hcHBlbmRDaGlsZChjaGlsZCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBsZXQgZGVmID0gY2hpbGQ7XG4gICAgICAgIGlmIChuYW1lc3BhY2UpIHtcbiAgICAgICAgICAgIGRlZi5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGMgPSByZWN1cnNlVmlhKGRlZiwga2V5ZWRFbGVtcyk7XG4gICAgICAgIGVsZW0uYXBwZW5kQ2hpbGQoYyk7XG4gICAgfVxufVxuZnVuY3Rpb24gX2FwcGVuZEVsZW1Ub1BhcmVudChvYmosIGVsZW0pIHtcbiAgICBpZiAoIW9iai5wYXJlbnQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoc2hhcmVkX3R5cGVzXzEuaXNEcmF3YWJsZShlbGVtKSkge1xuICAgICAgICBlbGVtLmRyYXcob2JqLnBhcmVudCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBvYmoucGFyZW50LmFwcGVuZENoaWxkKGVsZW0pO1xuICAgIH1cbn1cbmNvbnN0IF9zZXRFbGVtU2VsZWN0b3IgPSAob2JqLCBlbGVtKSA9PiB7XG4gICAgaWYgKCFvYmouc2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB7IHNlbGVjdG9yLCBhcHBseUNiIH0gPSBvYmouc2VsZWN0b3I7XG4gICAgc2VsZWN0b3IuYXBwbHkoKHBheWxvYWQpID0+IHsgYXBwbHlDYihwYXlsb2FkLCBlbGVtKTsgfSk7XG4gICAgY29uc3QgdmFsdWUgPSBzZWxlY3Rvci5nZXREYXRhKCk7XG4gICAgYXBwbHlDYih7IHZhbHVlLCBldmVudFR5cGU6ICdub25lJyB9LCBlbGVtKTtcbn07XG5jb25zdCBfaGFuZGxlU2VsZWN0b3IgPSAodmFsdWUsIGNiKSA9PiB7XG4gICAgaWYgKG1vZGVsXzEuaXNTZWxlY3Rvcih2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUuYXBwbHkoKHBheWxvYWQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgdmFsdWUgfSA9IHBheWxvYWQ7XG4gICAgICAgICAgICBjYih2YWx1ZSwgcGF5bG9hZCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY2IodmFsdWUsIHt9KTtcbiAgICB9XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlRIRU1FX0JHX0NPTE9SX0NMUyA9IFwidGhlbWVCR0NvbG9yXCI7XG5leHBvcnRzLlRIRU1FX0NPTE9SX0NMUyA9IFwidGhlbWVDb2xvclwiO1xuZXhwb3J0cy5USEVNRV9DT0xPUl9IT1ZFUl9DTFMgPSBcInRoZW1lQkdIb3ZlckNvbG9yXCI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IG9iamVjdF9oZWxwZXJzXzEgPSByZXF1aXJlKFwiQHRvb2xraXAvb2JqZWN0LWhlbHBlcnNcIik7XG5jb25zdCBjb21iaW5lcl8xID0gcmVxdWlyZShcIi4vY29tYmluZXJcIik7XG5jbGFzcyBfU3R5bGVGbGF0dGVuZXIge1xuICAgIGZsYXR0ZW4oc3R5bGVzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9mbGF0dGVuU3R5bGVzKHN0eWxlcywgXCJcIik7XG4gICAgfVxuICAgIF9mbGF0dGVuU3R5bGVzKHN0eWxlcywgbGFzdFNlbGVjdG9yKSB7XG4gICAgICAgIGxldCBvdXRTdHlsZXMgPSB7fTtcbiAgICAgICAgb2JqZWN0X2hlbHBlcnNfMS5tYXAoc3R5bGVzLCAodmFsdWUsIHNlbGVjdG9yKSA9PiB7XG4gICAgICAgICAgICBsZXQgbmV3U2VsZWN0b3JzID0gdGhpcy5fYnVpbGROZXdTZWxlY3RvcnMoc2VsZWN0b3IsIGxhc3RTZWxlY3Rvcik7XG4gICAgICAgICAgICBmb3IgKGxldCBzZWxlY3RvciBvZiBuZXdTZWxlY3RvcnMpIHtcbiAgICAgICAgICAgICAgICBsZXQgY2FsY3VsYXRlZFN0eWxlcyA9IHRoaXMuX2ZsYXR0ZW5DbGFzc0RlZmluaXRpb24oc2VsZWN0b3IsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBvdXRTdHlsZXMgPSBjb21iaW5lcl8xLmNvbWJpbmVTdHlsZXMob3V0U3R5bGVzLCBjYWxjdWxhdGVkU3R5bGVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBvdXRTdHlsZXM7XG4gICAgfVxuICAgIF9mbGF0dGVuQ2xhc3NEZWZpbml0aW9uKHNlbGVjdG9yLCBjbGFzc0RlZikge1xuICAgICAgICBsZXQgdG9wU3R5bGVzID0ge1xuICAgICAgICAgICAgW3NlbGVjdG9yXToge30sXG4gICAgICAgIH07XG4gICAgICAgIG9iamVjdF9oZWxwZXJzXzEubWFwKGNsYXNzRGVmLCAocHJvcGVydHlWYWx1ZSwgcHJvcGVydHlOYW1lKSA9PiB7XG4gICAgICAgICAgICBpZiAocHJvcGVydHlOYW1lID09PSBcIm5lc3RlZFwiKSB7XG4gICAgICAgICAgICAgICAgbGV0IHN1Ym5lc3RlZFN0eWxlcyA9IHRoaXMuX2ZsYXR0ZW5TdHlsZXMocHJvcGVydHlWYWx1ZSwgc2VsZWN0b3IpO1xuICAgICAgICAgICAgICAgIHRvcFN0eWxlcyA9IGNvbWJpbmVyXzEuY29tYmluZVN0eWxlcyh0b3BTdHlsZXMsIHN1Ym5lc3RlZFN0eWxlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0b3BTdHlsZXNbc2VsZWN0b3JdW3Byb3BlcnR5TmFtZV0gPSBwcm9wZXJ0eVZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRvcFN0eWxlcztcbiAgICB9XG4gICAgX2J1aWxkTmV3U2VsZWN0b3JzKGN1clNlbGVjdG9yLCBsYXN0U2VsZWN0b3IpIHtcbiAgICAgICAgbGV0IG5ld1NlbGVjdG9ycyA9IGN1clNlbGVjdG9yLnNwbGl0KFwiLFwiKTtcbiAgICAgICAgaWYgKCFsYXN0U2VsZWN0b3IpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXdTZWxlY3RvcnM7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXdTZWxlY3RvcnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIG5ld1NlbGVjdG9yc1tpXSA9IHRoaXMuX2J1aWxkTmV3U2VsZWN0b3IobmV3U2VsZWN0b3JzW2ldLCBsYXN0U2VsZWN0b3IpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXdTZWxlY3RvcnM7XG4gICAgfVxuICAgIF9idWlsZE5ld1NlbGVjdG9yKG5ld1NlbGVjdG9yLCBsYXN0U2VsZWN0b3IpIHtcbiAgICAgICAgbGV0IG91dCA9IFwiXCI7XG4gICAgICAgIGlmIChuZXdTZWxlY3Rvci5pbmRleE9mKFwiJlwiKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIG91dCA9IG5ld1NlbGVjdG9yLnJlcGxhY2UoLyYvZywgbGFzdFNlbGVjdG9yKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG91dCA9IGxhc3RTZWxlY3RvciArIFwiIFwiICsgbmV3U2VsZWN0b3I7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG59XG5jb25zdCBTdHlsZUZsYXR0ZW5lciA9IG5ldyBfU3R5bGVGbGF0dGVuZXIoKTtcbmZ1bmN0aW9uIGZsYXR0ZW5TdHlsZXMoc3R5bGVzKSB7XG4gICAgcmV0dXJuIFN0eWxlRmxhdHRlbmVyLmZsYXR0ZW4oc3R5bGVzKTtcbn1cbmV4cG9ydHMuZmxhdHRlblN0eWxlcyA9IGZsYXR0ZW5TdHlsZXM7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNsYXNzIF9TdHlsZVJ1bGVIZWxwZXIge1xuICAgIGdldENzc1J1bGUoc2VsZWN0b3IsIHNraXBFeGlzdGluZ1NlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRDc3NSdWxlKHNlbGVjdG9yLCBza2lwRXhpc3RpbmdTZWxlY3Rvcik7XG4gICAgfVxuICAgIF9nZXRDc3NSdWxlKHNlbGVjdG9yLCBza2lwRXhpc3RpbmdTZWxlY3Rvcikge1xuICAgICAgICBsZXQgY3NzUnVsZTtcbiAgICAgICAgaWYgKCFza2lwRXhpc3RpbmdTZWxlY3Rvcikge1xuICAgICAgICAgICAgY3NzUnVsZSA9IHRoaXMuX2dldEV4aXN0aW5nU2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY3NzUnVsZSkge1xuICAgICAgICAgICAgY3NzUnVsZSA9IHsgc3R5bGU6IHt9IH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNzc1J1bGU7XG4gICAgfVxuICAgIF9nZXRFeGlzdGluZ1NlbGVjdG9yKHNlbGVjdG9yKSB7XG4gICAgICAgIGZvciAobGV0IHN0eWxlc2hlZXQgb2YgZG9jdW1lbnQuc3R5bGVTaGVldHMpIHtcbiAgICAgICAgICAgIGxldCBydWxlcyA9IHRoaXMuX2dldFJ1bGVzKHN0eWxlc2hlZXQpO1xuICAgICAgICAgICAgaWYgKHJ1bGVzKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgZm91bmRSdWxlID0gdGhpcy5fc2VhcmNoUnVsZXNGb3JTZWxlY3RvcihzZWxlY3RvciwgcnVsZXMpO1xuICAgICAgICAgICAgaWYgKGZvdW5kUnVsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmb3VuZFJ1bGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIF9nZXRSdWxlcyhzdHlsZXNoZWV0KSB7XG4gICAgICAgIGxldCBjc3MgPSBkb2N1bWVudC5hbGwgPyAncnVsZXMnIDogJ2Nzc1J1bGVzJztcbiAgICAgICAgbGV0IHJ1bGVzO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcnVsZXMgPSBzdHlsZXNoZWV0W2Nzc107XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJ1bGVzO1xuICAgIH1cbiAgICBfc2VhcmNoUnVsZXNGb3JTZWxlY3RvcihzZWxlY3RvciwgcnVsZXMpIHtcbiAgICAgICAgZm9yIChsZXQgcnVsZSBvZiBydWxlcykge1xuICAgICAgICAgICAgaWYgKHJ1bGUuc2VsZWN0b3JUZXh0ID09PSBzZWxlY3Rvcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBydWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbmNvbnN0IFN0eWxlUnVsZUhlbHBlciA9IG5ldyBfU3R5bGVSdWxlSGVscGVyKCk7XG5mdW5jdGlvbiBnZXRDc3NSdWxlKHNlbGVjdG9yLCBza2lwRXhpc3RpbmdTZWxlY3Rvcikge1xuICAgIHJldHVybiBTdHlsZVJ1bGVIZWxwZXIuZ2V0Q3NzUnVsZShzZWxlY3Rvciwgc2tpcEV4aXN0aW5nU2VsZWN0b3IpO1xufVxuZXhwb3J0cy5nZXRDc3NSdWxlID0gZ2V0Q3NzUnVsZTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBvYmplY3RfaGVscGVyc18xID0gcmVxdWlyZShcIkB0b29sa2lwL29iamVjdC1oZWxwZXJzXCIpO1xuY29uc3QgYXN5bmNfMSA9IHJlcXVpcmUoXCJAdG9vbGtpcC9hc3luY1wiKTtcbmNvbnN0IGNzc18xID0gcmVxdWlyZShcIi4vY3NzXCIpO1xuY29uc3Qgc3R5bGVFbGVtZW50XzEgPSByZXF1aXJlKFwiLi9zdHlsZUVsZW1lbnRcIik7XG5jb25zdCBzdHJpbmdpZmllcl8xID0gcmVxdWlyZShcIi4vc3RyaW5naWZpZXJcIik7XG5jbGFzcyBfVHJhbnNpdGlvbkNvbnRyb2xsZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLl9sYXN0Q2xzSWQgPSAwO1xuICAgICAgICB0aGlzLl9nZW5lcmF0ZWRDbGFzc2VzID0ge307XG4gICAgfVxuICAgIHRyYW5zaXRpb24oZGV0YWlscykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgaWYgKCFkZXRhaWxzLmVsZW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXCJubyBlbGVtZW50XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFkZXRhaWxzLnRpbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXCJubyB0aW1lXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHN0YXJ0TmFtZSA9IHRoaXMuX2dldENsYXNzKGRldGFpbHMuc3RhcnQsIGRldGFpbHMuZWxlbSk7XG4gICAgICAgICAgICBpZiAoIWRldGFpbHMuZW5kLnRyYW5zaXRpb24pIHtcbiAgICAgICAgICAgICAgICBkZXRhaWxzLmVuZC50cmFuc2l0aW9uID0gXCJhbGwgZWFzZS1pbi1vdXQgXCIgKyAoZGV0YWlscy50aW1lIC8gMTAwMCkgKyBcInNcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBlbmROYW1lID0gdGhpcy5fZ2V0Q2xhc3MoZGV0YWlscy5lbmQsIGRldGFpbHMuZWxlbSk7XG4gICAgICAgICAgICB5aWVsZCB0aGlzLl9hbmltYXRlKGRldGFpbHMsIHN0YXJ0TmFtZSwgZW5kTmFtZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfZ2V0Q2xhc3MoY2xhc3NEZWYsIGVsZW0pIHtcbiAgICAgICAgY2xhc3NEZWYgPSB0aGlzLl9yZXBsYWNlUGxhY2Vob2xkZXJzKGNsYXNzRGVmLCBlbGVtKTtcbiAgICAgICAgbGV0IHN0ckRlZiA9IEpTT04uc3RyaW5naWZ5KGNsYXNzRGVmKS5yZXBsYWNlKC8gL2csIFwiXCIpO1xuICAgICAgICBpZiAodGhpcy5fZ2VuZXJhdGVkQ2xhc3Nlc1tzdHJEZWZdKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2VuZXJhdGVkQ2xhc3Nlc1tzdHJEZWZdO1xuICAgICAgICB9XG4gICAgICAgIGxldCBuYW1lID0gdGhpcy5fZ2VuZXJhdGVSYW5kb21DbGFzc05hbWUoKTtcbiAgICAgICAgdGhpcy5fZ2VuZXJhdGVkQ2xhc3Nlc1tzdHJEZWZdID0gbmFtZTtcbiAgICAgICAgdGhpcy5fY3JlYXRlVHJhbnNpdGlvbkNsYXNzKG5hbWUsIGNsYXNzRGVmLCBlbGVtKTtcbiAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfVxuICAgIF9nZW5lcmF0ZVJhbmRvbUNsYXNzTmFtZSgpIHtcbiAgICAgICAgdGhpcy5fbGFzdENsc0lkICs9IDE7XG4gICAgICAgIHJldHVybiBcImdlbmNsc1wiICsgdGhpcy5fbGFzdENsc0lkO1xuICAgIH1cbiAgICBfY3JlYXRlVHJhbnNpdGlvbkNsYXNzKGNsYXNzTmFtZSwgY2xhc3NEZWYsIGVsZW0pIHtcbiAgICAgICAgaWYgKCF0aGlzLl9zdHlsZUVsZW0pIHtcbiAgICAgICAgICAgIHRoaXMuX2NyZWF0ZVN0eWxlRWxlbSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3N0eWxlRWxlbS5pbm5lckhUTUwgKz0gc3RyaW5naWZpZXJfMS5zdHJpbmdpZnlTdHlsZShcIi5cIiArIGNsYXNzTmFtZSwgY2xhc3NEZWYpO1xuICAgIH1cbiAgICBfcmVwbGFjZVBsYWNlaG9sZGVycyhjbGFzc0RlZiwgZWxlbSkge1xuICAgICAgICBvYmplY3RfaGVscGVyc18xLm1hcChjbGFzc0RlZiwgKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZShcIjx3aWR0aD5cIiwgKGVsZW0ub2Zmc2V0V2lkdGggKyAxKSArIFwicHhcIik7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoXCI8aGVpZ2h0PlwiLCBlbGVtLm9mZnNldEhlaWdodCArIFwicHhcIik7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoXCI8bGVmdD5cIiwgZWxlbS5vZmZzZXRMZWZ0ICsgXCJweFwiKTtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZShcIjx0b3A+XCIsIGVsZW0ub2Zmc2V0VG9wICsgXCJweFwiKTtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZShcIjxyaWdodD5cIiwgKGVsZW0ub2Zmc2V0TGVmdCArIGVsZW0ub2Zmc2V0V2lkdGgpICsgXCJweFwiKTtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZShcIjxib3R0b20+XCIsIChlbGVtLm9mZnNldFRvcCArIGVsZW0ub2Zmc2V0SGVpZ2h0KSArIFwicHhcIik7XG4gICAgICAgICAgICBjbGFzc0RlZltrZXldID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY2xhc3NEZWY7XG4gICAgfVxuICAgIF9jcmVhdGVTdHlsZUVsZW0oKSB7XG4gICAgICAgIHRoaXMuX3N0eWxlRWxlbSA9IHN0eWxlRWxlbWVudF8xLmNyZWF0ZVN0eWxlRWxlbWVudCgpO1xuICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHRoaXMuX3N0eWxlRWxlbSk7XG4gICAgfVxuICAgIF9hbmltYXRlKGRldGFpbHMsIHN0YXJ0TmFtZSwgZW5kTmFtZSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgeWllbGQgYXN5bmNfMS5uZXh0UmVuZGVyKCk7XG4gICAgICAgICAgICBjc3NfMS5hZGRDbGFzcyhkZXRhaWxzLmVsZW0sIHN0YXJ0TmFtZSk7XG4gICAgICAgICAgICB5aWVsZCBhc3luY18xLndhaXQoZGV0YWlscy5kZWxheSB8fCAwKTtcbiAgICAgICAgICAgIGNzc18xLmFkZENsYXNzKGRldGFpbHMuZWxlbSwgZW5kTmFtZSk7XG4gICAgICAgICAgICB5aWVsZCBhc3luY18xLndhaXQoZGV0YWlscy50aW1lKTtcbiAgICAgICAgICAgIGNzc18xLnJlbW92ZUNsYXNzKGRldGFpbHMuZWxlbSwgc3RhcnROYW1lKTtcbiAgICAgICAgICAgIHlpZWxkIGFzeW5jXzEubmV4dFJlbmRlcigpO1xuICAgICAgICAgICAgdGhpcy5fcmVtb3ZlRW5kQ2xhc3MoZGV0YWlscy5lbGVtLCBlbmROYW1lKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9yZW1vdmVFbmRDbGFzcyhlbGVtLCBlbmROYW1lKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB5aWVsZCBhc3luY18xLndhaXQoMTApO1xuICAgICAgICAgICAgY3NzXzEucmVtb3ZlQ2xhc3MoZWxlbSwgZW5kTmFtZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmNvbnN0IFRyYW5zaXRpb25Db250cm9sbGVyID0gbmV3IF9UcmFuc2l0aW9uQ29udHJvbGxlcigpO1xuZnVuY3Rpb24gdHJhbnNpdGlvbihlbGVtZW50LCBzdGFydFN0eWxlLCBlbmRTdHlsZSwgdGltZSwgZGVsYXkpIHtcbiAgICByZXR1cm4gVHJhbnNpdGlvbkNvbnRyb2xsZXIudHJhbnNpdGlvbih7XG4gICAgICAgIGVsZW06IGVsZW1lbnQsXG4gICAgICAgIHN0YXJ0OiBzdGFydFN0eWxlLFxuICAgICAgICBlbmQ6IGVuZFN0eWxlLFxuICAgICAgICB0aW1lOiB0aW1lLFxuICAgICAgICBkZWxheTogZGVsYXkgfHwgMFxuICAgIH0pO1xufVxuZXhwb3J0cy50cmFuc2l0aW9uID0gdHJhbnNpdGlvbjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZnVuY3Rpb24gd2FpdCh0aW1lSW5Ncykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICB3aW5kb3cuc2V0VGltZW91dChyZXNvbHZlLCB0aW1lSW5Ncyk7XG4gICAgfSk7XG59XG5leHBvcnRzLndhaXQgPSB3YWl0O1xuZnVuY3Rpb24gbmV4dFJlbmRlcigpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5leHBvcnRzLm5leHRSZW5kZXIgPSBuZXh0UmVuZGVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnQocmVxdWlyZShcIi4vX2xpYnJhcnlcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vc3R5bGVMaWJyYXJ5XCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL3BsYWNlaG9sZGVybGlicmFyeVwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9mb250TGlicmFyeVwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9oZWxwZXJzXCIpKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZnVuY3Rpb24gZ2xvYmFsT2Zmc2V0TGVmdChlbGVtLCBwYXJlbnQsIHVzZVN0YW5kYXJkUGFyZW50KSB7XG4gICAgcmV0dXJuIF9hdXhHbG9iYWxPZmZzZXQoZWxlbSwgXCJvZmZzZXRMZWZ0XCIsIHBhcmVudCwgdXNlU3RhbmRhcmRQYXJlbnQpO1xufVxuZXhwb3J0cy5nbG9iYWxPZmZzZXRMZWZ0ID0gZ2xvYmFsT2Zmc2V0TGVmdDtcbjtcbmZ1bmN0aW9uIGdsb2JhbE9mZnNldFRvcChlbGVtLCBwYXJlbnQsIHVzZVN0YW5kYXJkUGFyZW50KSB7XG4gICAgcmV0dXJuIF9hdXhHbG9iYWxPZmZzZXQoZWxlbSwgXCJvZmZzZXRUb3BcIiwgcGFyZW50LCB1c2VTdGFuZGFyZFBhcmVudCk7XG59XG5leHBvcnRzLmdsb2JhbE9mZnNldFRvcCA9IGdsb2JhbE9mZnNldFRvcDtcbjtcbmZ1bmN0aW9uIGdsb2JhbE9mZnNldHMoZWxlbSwgcGFyZW50LCB1c2VTdGFuZGFyZFBhcmVudCkge1xuICAgIDtcbiAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiBnbG9iYWxPZmZzZXRMZWZ0KGVsZW0sIHBhcmVudCwgdXNlU3RhbmRhcmRQYXJlbnQpLFxuICAgICAgICB0b3A6IGdsb2JhbE9mZnNldFRvcChlbGVtLCBwYXJlbnQsIHVzZVN0YW5kYXJkUGFyZW50KVxuICAgIH07XG59XG5leHBvcnRzLmdsb2JhbE9mZnNldHMgPSBnbG9iYWxPZmZzZXRzO1xuO1xuZnVuY3Rpb24gX2F1eEdsb2JhbE9mZnNldChlbGVtLCB0eXBlLCBwYXJlbnQsIHVzZVN0YW5kYXJkUGFyZW50KSB7XG4gICAgbGV0IG9mZnNldCA9IDA7XG4gICAgd2hpbGUgKGVsZW0gJiYgKGVsZW0gIT09IHBhcmVudCkpIHtcbiAgICAgICAgaWYgKGVsZW1bdHlwZV0pIHtcbiAgICAgICAgICAgIG9mZnNldCArPSBlbGVtW3R5cGVdO1xuICAgICAgICB9XG4gICAgICAgIGlmICh1c2VTdGFuZGFyZFBhcmVudCkge1xuICAgICAgICAgICAgZWxlbSA9IGVsZW0ucGFyZW50Tm9kZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVsZW0gPSBlbGVtLm9mZnNldFBhcmVudDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2Zmc2V0O1xufVxuO1xuZnVuY3Rpb24gZ2V0U2Nyb2xsUG9zaXRpb24oKSB7XG4gICAgbGV0IG91dCA9IHtcbiAgICAgICAgeDogKHdpbmRvdy5wYWdlWE9mZnNldCkgPyB3aW5kb3cucGFnZVhPZmZzZXQgOiBkb2N1bWVudC5ib2R5LnNjcm9sbExlZnQsXG4gICAgICAgIHk6ICh3aW5kb3cucGFnZVlPZmZzZXQpID8gd2luZG93LnBhZ2VZT2Zmc2V0IDogZG9jdW1lbnQuYm9keS5zY3JvbGxUb3BcbiAgICB9O1xuICAgIHJldHVybiBvdXQ7XG59XG5leHBvcnRzLmdldFNjcm9sbFBvc2l0aW9uID0gZ2V0U2Nyb2xsUG9zaXRpb247XG5mdW5jdGlvbiBtZWFzdXJlRWxlbWVudChlbGVtLCBwYXJlbnQpIHtcbiAgICBsZXQgYWRkZWQgPSBmYWxzZTtcbiAgICBpZiAoIWVsZW0ucGFyZW50Tm9kZSkge1xuICAgICAgICBhZGRlZCA9IHRydWU7XG4gICAgICAgIGxldCBvcmlnT3BhY2l0eSA9IGVsZW0uc3R5bGUub3BhY2l0eTtcbiAgICAgICAgZWxlbS5zdHlsZS5vcGFjaXR5ID0gXCIwXCI7XG4gICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHsgZWxlbS5zdHlsZS5vcGFjaXR5ID0gb3JpZ09wYWNpdHk7IH0pO1xuICAgICAgICBpZiAoIXBhcmVudCkge1xuICAgICAgICAgICAgcGFyZW50ID0gZG9jdW1lbnQuYm9keTtcbiAgICAgICAgfVxuICAgICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoZWxlbSk7XG4gICAgfVxuICAgIGxldCByZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBpZiAoYWRkZWQpIHtcbiAgICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKGVsZW0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVjdDtcbn1cbmV4cG9ydHMubWVhc3VyZUVsZW1lbnQgPSBtZWFzdXJlRWxlbWVudDtcbmZ1bmN0aW9uIGZpbmRDb21tb25QYXJlbnQoZWxlbV9hLCBlbGVtX2IpIHtcbiAgICBsZXQgcGFyZW50X2E7XG4gICAgbGV0IHBhcmVudF9iO1xuICAgIGlmICghZWxlbV9hIHx8ICFlbGVtX2IpXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgcGFyZW50X2EgPSBlbGVtX2E7XG4gICAgcGFyZW50X2IgPSBlbGVtX2I7XG4gICAgd2hpbGUgKHBhcmVudF9hKSB7XG4gICAgICAgIHdoaWxlIChwYXJlbnRfYikge1xuICAgICAgICAgICAgaWYgKHBhcmVudF9hID09PSBwYXJlbnRfYilcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyZW50X2E7XG4gICAgICAgICAgICBwYXJlbnRfYiA9IHBhcmVudF9iLnBhcmVudE5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgcGFyZW50X2EgPSBwYXJlbnRfYS5wYXJlbnROb2RlO1xuICAgICAgICBwYXJlbnRfYiA9IGVsZW1fYjtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmV4cG9ydHMuZmluZENvbW1vblBhcmVudCA9IGZpbmRDb21tb25QYXJlbnQ7XG47XG5mdW5jdGlvbiBtb3ZlUmVsVG9FbGVtKGVsZW0sIHJlZiwgeCwgeSwgbm9fbW92ZSkge1xuICAgIGxldCBvZmZzZXRfbWU7XG4gICAgbGV0IG9mZnNldF90aGVtO1xuICAgIGxldCBkeDtcbiAgICBsZXQgZHk7XG4gICAgb2Zmc2V0X21lID0gZ2xvYmFsT2Zmc2V0cyhlbGVtKTtcbiAgICBvZmZzZXRfdGhlbSA9IGdsb2JhbE9mZnNldHMoZWxlbSk7XG4gICAgZHggPSAob2Zmc2V0X3RoZW0ubGVmdCArIHgpIC0gb2Zmc2V0X21lLmxlZnQ7XG4gICAgZHkgPSAob2Zmc2V0X3RoZW0udG9wICsgeSkgLSBvZmZzZXRfbWUudG9wO1xuICAgIGlmICghbm9fbW92ZSkge1xuICAgICAgICBlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgICAgICBlbGVtLnN0eWxlLmxlZnQgPSBkeCArIFwicHhcIjtcbiAgICAgICAgZWxlbS5zdHlsZS50b3AgPSBkeSArIFwicHhcIjtcbiAgICB9XG4gICAgcmV0dXJuIHsgeDogZHgsIHk6IGR5IH07XG59XG5leHBvcnRzLm1vdmVSZWxUb0VsZW0gPSBtb3ZlUmVsVG9FbGVtO1xuO1xuZnVuY3Rpb24gaXNJbkRPTShlbGVtKSB7XG4gICAgbGV0IHBhcmVudE5vZGUgPSBlbGVtLnBhcmVudE5vZGU7XG4gICAgd2hpbGUgKHBhcmVudE5vZGUpIHtcbiAgICAgICAgaWYgKHBhcmVudE5vZGUgPT09IGRvY3VtZW50LmJvZHkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudE5vZGU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydHMuaXNJbkRPTSA9IGlzSW5ET007XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHN0eWxlX2hlbHBlcnNfMSA9IHJlcXVpcmUoXCJAdG9vbGtpcC9zdHlsZS1oZWxwZXJzXCIpO1xuY29uc3QgX3R5cGVndWFyZHNfMSA9IHJlcXVpcmUoXCIuL190eXBlZ3VhcmRzXCIpO1xuY29uc3Qgc2hhcmVkX3R5cGVzXzEgPSByZXF1aXJlKFwiQHRvb2xraXAvc2hhcmVkLXR5cGVzXCIpO1xuZnVuY3Rpb24gcmVtb3ZlU3ViY2xhc3NGcm9tQWxsRWxlbWVudHMoY2xzLCBzdWJjbHMsIGV4Y2VwdGlvbikge1xuICAgIGxldCBlbGVtcztcbiAgICBsZXQgZTtcbiAgICBsZXQgZWxlbTtcbiAgICBlbGVtcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoY2xzKTtcbiAgICBmb3IgKGUgPSAwOyBlIDwgZWxlbXMubGVuZ3RoOyBlICs9IDEpIHtcbiAgICAgICAgZWxlbSA9IGVsZW1zW2VdO1xuICAgICAgICBpZiAoZWxlbSAhPT0gZXhjZXB0aW9uKSB7XG4gICAgICAgICAgICBzdHlsZV9oZWxwZXJzXzEucmVtb3ZlQ2xhc3MoZWxlbSwgc3ViY2xzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMucmVtb3ZlU3ViY2xhc3NGcm9tQWxsRWxlbWVudHMgPSByZW1vdmVTdWJjbGFzc0Zyb21BbGxFbGVtZW50cztcbjtcbmZ1bmN0aW9uIGFkZFJlc2l6aW5nRWxlbWVudChlbGVtLCBmaXhlZFJhdGlvLCBmb3JjZUluaXRXLCBmb3JjZUluaXRIKSB7XG59XG47XG5mdW5jdGlvbiByZXNpemVFbGVtZW50KG9iaikge1xufVxuO1xuZnVuY3Rpb24gaXNDaGlsZEV2ZW50VGFyZ2V0KGV2LCByb290KSB7XG4gICAgcmV0dXJuIGlzQ2hpbGQocm9vdCwgZXYudGFyZ2V0KTtcbn1cbmV4cG9ydHMuaXNDaGlsZEV2ZW50VGFyZ2V0ID0gaXNDaGlsZEV2ZW50VGFyZ2V0O1xuO1xuZnVuY3Rpb24gaXNDaGlsZChyb290LCBjaGlsZCkge1xuICAgIDtcbiAgICBsZXQgcGFyZW50O1xuICAgIHBhcmVudCA9IGNoaWxkO1xuICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgICAgaWYgKHBhcmVudCA9PT0gcm9vdClcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50Tm9kZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0cy5pc0NoaWxkID0gaXNDaGlsZDtcbjtcbmZ1bmN0aW9uIGFwcGVuZENoaWxkcmVuKHBhcmVudCwgLi4ua2lkcykge1xuICAgIDtcbiAgICBsZXQgaWR4O1xuICAgIGZvciAoaWR4ID0gMDsgaWR4IDwga2lkcy5sZW5ndGg7IGlkeCArPSAxKSB7XG4gICAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChraWRzW2lkeF0pO1xuICAgIH1cbn1cbmV4cG9ydHMuYXBwZW5kQ2hpbGRyZW4gPSBhcHBlbmRDaGlsZHJlbjtcbmZ1bmN0aW9uIGNsZWFyQ2hpbGRyZW4ocGFyZW50KSB7XG4gICAgZm9yIChsZXQgaWR4ID0gcGFyZW50LmNoaWxkcmVuLmxlbmd0aCAtIDE7IGlkeCA+PSAwOyBpZHggLT0gMSkge1xuICAgICAgICBsZXQgY2hpbGQgPSBwYXJlbnQuY2hpbGRyZW5baWR4XTtcbiAgICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKGNoaWxkKTtcbiAgICB9XG59XG5leHBvcnRzLmNsZWFyQ2hpbGRyZW4gPSBjbGVhckNoaWxkcmVuO1xuZnVuY3Rpb24gbW92ZUVsZW1SZWxhdGl2ZVBvc2l0aW9uKGVsZW0sIGRpc3RhbmNlKSB7XG4gICAgbGV0IHRvcCA9IHBhcnNlSW50KGVsZW0uc3R5bGUudG9wKSB8fCAwO1xuICAgIGxldCBsZWZ0ID0gcGFyc2VJbnQoZWxlbS5zdHlsZS5sZWZ0KSB8fCAwO1xuICAgIGVsZW0uc3R5bGUudG9wID0gKHRvcCArIGRpc3RhbmNlLnkpICsgXCJweFwiO1xuICAgIGVsZW0uc3R5bGUubGVmdCA9IChsZWZ0ICsgZGlzdGFuY2UueCkgKyBcInB4XCI7XG59XG5leHBvcnRzLm1vdmVFbGVtUmVsYXRpdmVQb3NpdGlvbiA9IG1vdmVFbGVtUmVsYXRpdmVQb3NpdGlvbjtcbmZ1bmN0aW9uIHJlc2V0UGFnZUZvY3VzKCkge1xuICAgIGxldCBvbGRUYWJJbmRleCA9IC0xO1xuICAgIGlmIChzaGFyZWRfdHlwZXNfMS5pc051bGxPclVuZGVmaW5lZChkb2N1bWVudC5ib2R5LnRhYkluZGV4KSkge1xuICAgICAgICBvbGRUYWJJbmRleCA9IGRvY3VtZW50LmJvZHkudGFiSW5kZXg7XG4gICAgfVxuICAgIGRvY3VtZW50LmJvZHkudGFiSW5kZXggPSAwO1xuICAgIGRvY3VtZW50LmJvZHkuZm9jdXMoKTtcbiAgICBkb2N1bWVudC5ib2R5LnRhYkluZGV4ID0gb2xkVGFiSW5kZXg7XG59XG5leHBvcnRzLnJlc2V0UGFnZUZvY3VzID0gcmVzZXRQYWdlRm9jdXM7XG5mdW5jdGlvbiByZW1vdmVFbGVtZW50KGVsZW0pIHtcbiAgICBpZiAoIWVsZW0ucGFyZW50Tm9kZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGVsZW0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbGVtKTtcbn1cbmV4cG9ydHMucmVtb3ZlRWxlbWVudCA9IHJlbW92ZUVsZW1lbnQ7XG5mdW5jdGlvbiBzZWxlY3QoaHRtbEVsZW0pIHtcbiAgICBpZiAoX3R5cGVndWFyZHNfMS5pc1NlbGVjdGFibGUoaHRtbEVsZW0pKSB7XG4gICAgICAgIGh0bWxFbGVtLnNlbGVjdCgpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbGV0IHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKGh0bWxFbGVtKTtcbiAgICAgICAgbGV0IHNlbGVjdGlvbiA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbiAgICAgICAgc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgICBzZWxlY3Rpb24uYWRkUmFuZ2UocmFuZ2UpO1xuICAgIH1cbn1cbmV4cG9ydHMuc2VsZWN0ID0gc2VsZWN0O1xuZXhwb3J0cy5IVE1MX1RBQiA9IFwiJm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7XCI7XG5mdW5jdGlvbiBlbmNvZGVGb3JIVE1MKGRhdGEpIHtcbiAgICBkYXRhID0gZGF0YS5yZXBsYWNlKC8mL2csIFwiJmFtcDtcIik7XG4gICAgZGF0YSA9IGRhdGEucmVwbGFjZSgvPC9nLCBcIiZsdDtcIik7XG4gICAgZGF0YSA9IGRhdGEucmVwbGFjZSgvPi9nLCBcIiZndDtcIik7XG4gICAgZGF0YSA9IGRhdGEucmVwbGFjZSgvXFxcXG4vZywgXCI8YnI+XCIpO1xuICAgIGRhdGEgPSBkYXRhLnJlcGxhY2UoL1xcXFx0L2csIGV4cG9ydHMuSFRNTF9UQUIpO1xuICAgIHJldHVybiBkYXRhO1xufVxuZXhwb3J0cy5lbmNvZGVGb3JIVE1MID0gZW5jb2RlRm9ySFRNTDtcbmZ1bmN0aW9uIGRlY29kZUZyb21IVE1MKGRhdGEpIHtcbiAgICBkYXRhID0gZGF0YS5yZXBsYWNlKC8mYW1wOy9nLCBcIiZcIik7XG4gICAgZGF0YSA9IGRhdGEucmVwbGFjZSgvJmx0Oy9nLCBcIjxcIik7XG4gICAgZGF0YSA9IGRhdGEucmVwbGFjZSgvJmd0Oy9nLCBcIj5cIik7XG4gICAgZGF0YSA9IGRhdGEucmVwbGFjZSgvJnF1b3Q7L2csIFwiXFxcIlwiKTtcbiAgICBkYXRhID0gZGF0YS5yZXBsYWNlKC8mYXBvczsvZywgXCInXCIpO1xuICAgIGRhdGEgPSBkYXRhLnJlcGxhY2UoLzxicj4vZywgXCJcXG5cIik7XG4gICAgZGF0YSA9IGRhdGEucmVwbGFjZShuZXcgUmVnRXhwKGV4cG9ydHMuSFRNTF9UQUIsIFwiZ1wiKSwgXCJcXHRcIik7XG4gICAgZGF0YSA9IGRhdGEucmVwbGFjZSgvJm5ic3A7L2csIFwiIFwiKTtcbiAgICByZXR1cm4gZGF0YTtcbn1cbmV4cG9ydHMuZGVjb2RlRnJvbUhUTUwgPSBkZWNvZGVGcm9tSFRNTDtcbmZ1bmN0aW9uIHJlcGxhY2VFbGVtV2l0aEVsZW0oZWxlbVRvUmVwbGFjZSwgcmVwbGFjZW1lbnQpIHtcbiAgICBpZiAoIWVsZW1Ub1JlcGxhY2UucGFyZW50Tm9kZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBuZXh0Q2hpbGQgPSBlbGVtVG9SZXBsYWNlLm5leHRTaWJsaW5nO1xuICAgIGxldCBwYXJlbnQgPSBlbGVtVG9SZXBsYWNlLnBhcmVudE5vZGU7XG4gICAgcGFyZW50LnJlbW92ZUNoaWxkKGVsZW1Ub1JlcGxhY2UpO1xuICAgIHBhcmVudC5pbnNlcnRCZWZvcmUocmVwbGFjZW1lbnQsIG5leHRDaGlsZCk7XG59XG5leHBvcnRzLnJlcGxhY2VFbGVtV2l0aEVsZW0gPSByZXBsYWNlRWxlbVdpdGhFbGVtO1xuZnVuY3Rpb24gaXNWaXNpYmxlKGVsZW0pIHtcbiAgICBpZiAoX3R5cGVndWFyZHNfMS5oYXNPZmZzZXRzKGVsZW0pKSB7XG4gICAgICAgIGlmIChlbGVtLm9mZnNldFdpZHRoICE9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxlbS5vZmZzZXRIZWlnaHQgIT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoZWxlbS5jbGllbnRXaWR0aCAhPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVsZW0uY2xpZW50SGVpZ2h0ICE9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnRzLmlzVmlzaWJsZSA9IGlzVmlzaWJsZTtcbmZ1bmN0aW9uIGdldEVsZW1lbnRzQnlTZWxlY3RvcihzZWxlY3Rvcikge1xuICAgIGxldCBsaXN0ID0gZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICBsZXQgb3V0ID0gW107XG4gICAgZm9yIChsZXQgbCBvZiBsaXN0KSB7XG4gICAgICAgIG91dC5wdXNoKGwpO1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xufVxuZXhwb3J0cy5nZXRFbGVtZW50c0J5U2VsZWN0b3IgPSBnZXRFbGVtZW50c0J5U2VsZWN0b3I7XG5mdW5jdGlvbiBkb2VzRWxlbWVudE1hdGNoU2VsZWN0b3IoZWxlbSwgc2VsZWN0b3IpIHtcbiAgICBpZiAoIWVsZW0pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIWVsZW0ubWF0Y2hlcykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBlbGVtLm1hdGNoZXMoc2VsZWN0b3IpO1xufVxuZXhwb3J0cy5kb2VzRWxlbWVudE1hdGNoU2VsZWN0b3IgPSBkb2VzRWxlbWVudE1hdGNoU2VsZWN0b3I7XG4iLCJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XG59XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9jb21wYXJpc29uc1wiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9fdHlwZWd1YXJkc1wiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9faW50ZXJmYWNlc1wiKSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IF90eXBlZ3VhcmRzXzEgPSByZXF1aXJlKFwiLi9fdHlwZWd1YXJkc1wiKTtcbmNvbnN0IHNoYXJlZF90eXBlc18xID0gcmVxdWlyZShcIkB0b29sa2lwL3NoYXJlZC10eXBlc1wiKTtcbmZ1bmN0aW9uIGVxdWFscyhvcmlnLCBjb21wYXJpc29uKSB7XG4gICAgaWYgKF90eXBlZ3VhcmRzXzEuaXNFcXVhdGFibGUob3JpZykpIHtcbiAgICAgICAgcmV0dXJuIG9yaWcuZXF1YWxzKGNvbXBhcmlzb24pO1xuICAgIH1cbiAgICBpZiAoc2hhcmVkX3R5cGVzXzEuaXNQcmltaXRpdmUob3JpZykpIHtcbiAgICAgICAgcmV0dXJuIChvcmlnID09PSBjb21wYXJpc29uKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc2hhcmVkX3R5cGVzXzEuaXNEYXRlKG9yaWcpKSB7XG4gICAgICAgIHJldHVybiAoK29yaWcgPT09ICtjb21wYXJpc29uKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiAoSlNPTi5zdHJpbmdpZnkob3JpZykgPT09IEpTT04uc3RyaW5naWZ5KGNvbXBhcmlzb24pKTtcbiAgICB9XG59XG5leHBvcnRzLmVxdWFscyA9IGVxdWFscztcbmZ1bmN0aW9uIGxlc3NlclRoYW4ob3JpZywgY29tcGFyaXNvbikge1xuICAgIGlmIChfdHlwZWd1YXJkc18xLmlzQ29tcGFyYWJsZShvcmlnKSkge1xuICAgICAgICByZXR1cm4gb3JpZy5sZXNzZXJUaGFuKGNvbXBhcmlzb24pO1xuICAgIH1cbiAgICByZXR1cm4gKG9yaWcgPCBjb21wYXJpc29uKTtcbn1cbmV4cG9ydHMubGVzc2VyVGhhbiA9IGxlc3NlclRoYW47XG5mdW5jdGlvbiBncmVhdGVyVGhhbihvcmlnLCBjb21wYXJpc29uKSB7XG4gICAgaWYgKF90eXBlZ3VhcmRzXzEuaXNDb21wYXJhYmxlKG9yaWcpKSB7XG4gICAgICAgIHJldHVybiBvcmlnLmdyZWF0ZXJUaGFuKGNvbXBhcmlzb24pO1xuICAgIH1cbiAgICByZXR1cm4gKG9yaWcgPiBjb21wYXJpc29uKTtcbn1cbmV4cG9ydHMuZ3JlYXRlclRoYW4gPSBncmVhdGVyVGhhbjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFNvcnRPcmRlckVudW07XG4oZnVuY3Rpb24gKFNvcnRPcmRlckVudW0pIHtcbiAgICBTb3J0T3JkZXJFbnVtW1NvcnRPcmRlckVudW1bXCJJTkNPUlJFQ1RfT1JERVJcIl0gPSAxXSA9IFwiSU5DT1JSRUNUX09SREVSXCI7XG4gICAgU29ydE9yZGVyRW51bVtTb3J0T3JkZXJFbnVtW1wiU0FNRVwiXSA9IDBdID0gXCJTQU1FXCI7XG4gICAgU29ydE9yZGVyRW51bVtTb3J0T3JkZXJFbnVtW1wiQ09SUkVDVF9PUkRFUlwiXSA9IC0xXSA9IFwiQ09SUkVDVF9PUkRFUlwiO1xufSkoU29ydE9yZGVyRW51bSA9IGV4cG9ydHMuU29ydE9yZGVyRW51bSB8fCAoZXhwb3J0cy5Tb3J0T3JkZXJFbnVtID0ge30pKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgX2xpYnJhcnlfMSA9IHJlcXVpcmUoXCIuL19saWJyYXJ5XCIpO1xuY29uc3Qgb2JqZWN0X2hlbHBlcnNfMSA9IHJlcXVpcmUoXCJAdG9vbGtpcC9vYmplY3QtaGVscGVyc1wiKTtcbmNvbnN0IHN0eWxlX2hlbHBlcnNfMSA9IHJlcXVpcmUoXCJAdG9vbGtpcC9zdHlsZS1oZWxwZXJzXCIpO1xuY29uc3QgaHRtbF9oZWxwZXJzXzEgPSByZXF1aXJlKFwiQHRvb2xraXAvaHRtbC1oZWxwZXJzXCIpO1xuY2xhc3MgX1BsYWNlaG9sZGVyTGlicmFyeSBleHRlbmRzIF9saWJyYXJ5XzEuX0xpYnJhcnkge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLl9pbmRleGVkUGxhY2Vob2xkZXJzID0ge307XG4gICAgfVxuICAgIGdldCBfaWRTdWZmaXgoKSB7IHJldHVybiBcInBsYWNlaG9sZGVyXCI7IH1cbiAgICBfaW5kZXhCeVBsYWNlaG9sZGVyKHN0eWxlcywgdW5pcXVlS2V5KSB7XG4gICAgICAgIGxldCBkID0geyBbdW5pcXVlS2V5XTogc3R5bGVzIH07XG4gICAgICAgIGxldCBvdXQgPSBzdHlsZV9oZWxwZXJzXzEuaW5kZXhCeVBsYWNlaG9sZGVyKGQpO1xuICAgICAgICBvYmplY3RfaGVscGVyc18xLm1hcChvdXQsIChkaWN0LCBwbGFjZWhvbGRlcikgPT4ge1xuICAgICAgICAgICAgaWYgKCFkaWN0W3VuaXF1ZUtleV0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgcGxhY2Vob2xkZXJJZHggPSB0aGlzLl9pbmRleGVkUGxhY2Vob2xkZXJzW3BsYWNlaG9sZGVyXSB8fCB7fTtcbiAgICAgICAgICAgIGxldCB1bmlxdWVJZHggPSBwbGFjZWhvbGRlcklkeFt1bmlxdWVLZXldIHx8IHt9O1xuICAgICAgICAgICAgbGV0IGNvbWJvID0gb2JqZWN0X2hlbHBlcnNfMS5jb21iaW5lT2JqZWN0cyh1bmlxdWVJZHgsIGRpY3RbdW5pcXVlS2V5XSk7XG4gICAgICAgICAgICBvYmplY3RfaGVscGVyc18xLnNldERpY3RWYWx1ZSh0aGlzLl9pbmRleGVkUGxhY2Vob2xkZXJzLCBjb21ibywgW3BsYWNlaG9sZGVyLCB1bmlxdWVLZXldKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIF91cGRhdGVFbGVtcyhzdHlsZXMsIHVuaXF1ZUtleSkge1xuICAgICAgICBsZXQgaW5kZXhlZCA9IHRoaXMuX2luZGV4QnlQbGFjZWhvbGRlcihzdHlsZXMsIHVuaXF1ZUtleSk7XG4gICAgICAgIG9iamVjdF9oZWxwZXJzXzEubWFwKGluZGV4ZWQsIChkaWN0LCBwbGFjZWhvbGRlcikgPT4ge1xuICAgICAgICAgICAgbGV0IGlkeCA9IGRpY3RbdW5pcXVlS2V5XTtcbiAgICAgICAgICAgIGxldCBidWlsdFN0eWxlcyA9IHN0eWxlX2hlbHBlcnNfMS5tYXBJbmRleFRvU3R5bGUoaWR4LCB0aGlzLl9yYXdTdHlsZXNbdW5pcXVlS2V5XSk7XG4gICAgICAgICAgICBpZiAoIWJ1aWx0U3R5bGVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fdXBkYXRlUGxhY2Vob2xkZXJFbGVtKGJ1aWx0U3R5bGVzLCB1bmlxdWVLZXksIHBsYWNlaG9sZGVyKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF91cGRhdGVQbGFjZWhvbGRlckVsZW0oc3R5bGVzLCB1bmlxdWVLZXksIHBsYWNlaG9sZGVyKSB7XG4gICAgICAgIHN1cGVyLl91cGRhdGVFbGVtcyhzdHlsZXMsIHRoaXMuX2Zvcm1hdEVsZW1TdHJpbmcodW5pcXVlS2V5LCBwbGFjZWhvbGRlcikpO1xuICAgIH1cbiAgICByZXBsYWNlUGxhY2Vob2xkZXIob3B0cykge1xuICAgICAgICBpZiAob3B0cy5iYXNlRWxlbSkge1xuICAgICAgICAgICAgdGhpcy5fcmVwbGFjZVNpbmdsZUVsZW1QbGFjZWhvbGRlcnMob3B0cyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob3B0cy51bmlxdWVLZXkpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlcGxhY2VQbGFjZWhvbGRlckZvcktleShvcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3JlcGxhY2VQbGFjZWhvbGRlcnNGb3JNdWx0aXBsZUtleXMob3B0cyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3JlcGxhY2VQbGFjZWhvbGRlcnNGb3JNdWx0aXBsZUtleXMob3B0cykge1xuICAgICAgICBjb25zdCBpZHggPSB0aGlzLl9pbmRleGVkUGxhY2Vob2xkZXJzW29wdHMucGxhY2Vob2xkZXJdO1xuICAgICAgICBpZiAoIWlkeCB8fCBvYmplY3RfaGVscGVyc18xLmlzRW1wdHlPYmplY3QoaWR4KSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdF9oZWxwZXJzXzEubWFwKGlkeCwgKF8sIHVuaXF1ZUtleSkgPT4ge1xuICAgICAgICAgICAgb3B0cy51bmlxdWVLZXkgPSB1bmlxdWVLZXk7XG4gICAgICAgICAgICB0aGlzLl9yZXBsYWNlUGxhY2Vob2xkZXJGb3JLZXkob3B0cyk7XG4gICAgICAgICAgICBvcHRzLnVuaXF1ZUtleSA9IG51bGw7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfcmVwbGFjZVBsYWNlaG9sZGVyRm9yS2V5KG9wdHMpIHtcbiAgICAgICAgaWYgKCFvcHRzLnVuaXF1ZUtleSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlcGxhY2VkU3R5bGVzID0gdGhpcy5fcmVwbGFjZVBsYWNlaG9sZGVyVmlhSW5kZXgob3B0cyk7XG4gICAgICAgIHRoaXMuX3VwZGF0ZVBsYWNlaG9sZGVyRWxlbShyZXBsYWNlZFN0eWxlcywgb3B0cy51bmlxdWVLZXksIG9wdHMucGxhY2Vob2xkZXIpO1xuICAgIH1cbiAgICBfcmVwbGFjZVNpbmdsZUVsZW1QbGFjZWhvbGRlcnMob3B0cykge1xuICAgICAgICBpZiAoIW9wdHMudW5pcXVlS2V5IHx8ICFvcHRzLm5ld1ZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVwbGFjZWRTdHlsZXMgPSB0aGlzLl9yZXBsYWNlUGxhY2Vob2xkZXJWaWFJbmRleChvcHRzKTtcbiAgICAgICAgY29uc3QgbWF0Y2hlcyA9IHRoaXMuX2ZpbmRNYXRjaGVzKG9wdHMuYmFzZUVsZW0sIG9iamVjdF9oZWxwZXJzXzEuZ2V0S2V5cyhyZXBsYWNlZFN0eWxlcykpO1xuICAgICAgICBvYmplY3RfaGVscGVyc18xLm1hcChtYXRjaGVzLCAobWF0Y2hlZEVsZW1zLCBzZWxlY3RvcikgPT4ge1xuICAgICAgICAgICAgZm9yIChsZXQgbWF0Y2hlZEVsZW0gb2YgbWF0Y2hlZEVsZW1zKSB7XG4gICAgICAgICAgICAgICAgb2JqZWN0X2hlbHBlcnNfMS5tYXAocmVwbGFjZWRTdHlsZXNbc2VsZWN0b3JdLCAocFZhbCwgcE5hbWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hlZEVsZW0uc3R5bGVbcE5hbWVdID0gcFZhbDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9maW5kTWF0Y2hlcyhwYXJlbnQsIHNlbGVjdG9ycykge1xuICAgICAgICBsZXQgb3V0ID0ge307XG4gICAgICAgIGZvciAobGV0IHMgb2Ygc2VsZWN0b3JzKSB7XG4gICAgICAgICAgICBvdXRbc10gPSB0aGlzLl9maW5kTWF0Y2gocGFyZW50LCBzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICBfZmluZE1hdGNoKHBhcmVudCwgc2VsZWN0b3IpIHtcbiAgICAgICAgbGV0IG91dCA9IFtdO1xuICAgICAgICBsZXQgbm9kZVF1ZXVlID0gW3BhcmVudF07XG4gICAgICAgIGxldCBjbnQgPSAwO1xuICAgICAgICB3aGlsZSAoY250IDwgbm9kZVF1ZXVlLmxlbmd0aCkge1xuICAgICAgICAgICAgbGV0IGN1cnJlbnROb2RlID0gbm9kZVF1ZXVlW2NudF07XG4gICAgICAgICAgICBpZiAoaHRtbF9oZWxwZXJzXzEuZG9lc0VsZW1lbnRNYXRjaFNlbGVjdG9yKGN1cnJlbnROb2RlLCBzZWxlY3RvcikpIHtcbiAgICAgICAgICAgICAgICBvdXQucHVzaChjdXJyZW50Tm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBub2RlUXVldWUgPSBub2RlUXVldWUuY29uY2F0KFsuLi5jdXJyZW50Tm9kZS5jaGlsZE5vZGVzXSk7XG4gICAgICAgICAgICBjbnQgKz0gMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICBfcmVwbGFjZVBsYWNlaG9sZGVyVmlhSW5kZXgob3B0cykge1xuICAgICAgICBpZiAoIXRoaXMuX2luZGV4ZWRQbGFjZWhvbGRlcnNbb3B0cy5wbGFjZWhvbGRlcl0pIHtcbiAgICAgICAgICAgIHRoaXMuX2luZGV4ZWRQbGFjZWhvbGRlcnNbb3B0cy5wbGFjZWhvbGRlcl0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdHlsZXMgPSB0aGlzLl9pbmRleGVkUGxhY2Vob2xkZXJzW29wdHMucGxhY2Vob2xkZXJdW29wdHMudW5pcXVlS2V5XSB8fCB7fTtcbiAgICAgICAgbGV0IG1hcHBlZFN0eWxlcyA9IHN0eWxlX2hlbHBlcnNfMS5tYXBJbmRleFRvU3R5bGUoc3R5bGVzLCB0aGlzLl9yYXdTdHlsZXNbb3B0cy51bmlxdWVLZXldKTtcbiAgICAgICAgcmV0dXJuIHN0eWxlX2hlbHBlcnNfMS5yZXBsYWNlUGxhY2Vob2xkZXJzKG1hcHBlZFN0eWxlcywgb3B0cy5wbGFjZWhvbGRlciwgb3B0cy5uZXdWYWx1ZSk7XG4gICAgfVxuICAgIF9mb3JtYXRFbGVtU3RyaW5nKHVuaXF1ZUtleSwgcGxhY2Vob2xkZXIpIHtcbiAgICAgICAgcmV0dXJuIGAke3VuaXF1ZUtleX0tJHtwbGFjZWhvbGRlcn1gO1xuICAgIH1cbn1cbmV4cG9ydHMuUGxhY2Vob2xkZXJMaWJyYXJ5ID0gbmV3IF9QbGFjZWhvbGRlckxpYnJhcnkoKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgX2xpYnJhcnlfMSA9IHJlcXVpcmUoXCIuL19saWJyYXJ5XCIpO1xuY2xhc3MgX0ZvbnRMaWJyYXJ5IGV4dGVuZHMgX2xpYnJhcnlfMS5fTGlicmFyeSB7XG4gICAgZ2V0IF9pZFN1ZmZpeCgpIHsgcmV0dXJuIFwiZm9udHNcIjsgfVxufVxuZXhwb3J0cy5Gb250TGlicmFyeSA9IG5ldyBfRm9udExpYnJhcnkoKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3Qgc3R5bGVMaWJyYXJ5XzEgPSByZXF1aXJlKFwiLi9zdHlsZUxpYnJhcnlcIik7XG5mdW5jdGlvbiBjcmVhdGVDc3NDbGFzcyhzZWxlY3RvciwgZGVmLCBrZXkpIHtcbiAgICBrZXkgPSBrZXkgfHwgc3R5bGVMaWJyYXJ5XzEuU3R5bGVMaWJyYXJ5LmdldE5leHRJZCgpO1xuICAgIHN0eWxlTGlicmFyeV8xLlN0eWxlTGlicmFyeS5hZGQoa2V5LCB7IFtzZWxlY3Rvcl06IGRlZiB9KTtcbiAgICByZXR1cm4gc3R5bGVMaWJyYXJ5XzEuU3R5bGVMaWJyYXJ5LmdldEVsZW1Gb3JLZXkoa2V5KTtcbn1cbmV4cG9ydHMuY3JlYXRlQ3NzQ2xhc3MgPSBjcmVhdGVDc3NDbGFzcztcbmZ1bmN0aW9uIGFkZEhpZGRlbkNsYXNzKGNsc05hbWUgPSAnaGlkZGVuJykge1xuICAgIGNvbnN0IGNscyA9IHtcbiAgICAgICAgZGlzcGxheTogXCJub25lXCJcbiAgICB9O1xuICAgIHJldHVybiBjcmVhdGVDc3NDbGFzcyhgLiR7Y2xzTmFtZX1gLCBjbHMpO1xufVxuZXhwb3J0cy5hZGRIaWRkZW5DbGFzcyA9IGFkZEhpZGRlbkNsYXNzO1xuZnVuY3Rpb24gYWRkVW5zZWxlY3RhYmxlQ2xhc3MoY2xzTmFtZSA9ICd1bnNlbGVjdGFibGUnKSB7XG4gICAgY29uc3QgY2xzID0ge1xuICAgICAgICB1c2VyU2VsZWN0OiBcIm5vbmVcIixcbiAgICAgICAgbW96VXNlclNlbGVjdDogXCJub25lXCIsXG4gICAgICAgIHdlYmtpdFVzZXJTZWxlY3Q6IFwibm9uZVwiLFxuICAgICAgICBraHRtbFVzZXJTZWxlY3Q6IFwibm9uZVwiLFxuICAgICAgICBvVXNlclNlbGVjdDogXCJub25lXCJcbiAgICB9O1xuICAgIHJldHVybiBjcmVhdGVDc3NDbGFzcyhgLiR7Y2xzTmFtZX1gLCBjbHMpO1xufVxuZXhwb3J0cy5hZGRVbnNlbGVjdGFibGVDbGFzcyA9IGFkZFVuc2VsZWN0YWJsZUNsYXNzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjb2RlX2V2ZW50XzEgPSByZXF1aXJlKFwiQHRvb2xraXAvY29kZS1ldmVudFwiKTtcbmNsYXNzIE1vZGVsRXZlbnQgZXh0ZW5kcyBjb2RlX2V2ZW50XzEuQ29kZUV2ZW50IHtcbn1cbmV4cG9ydHMuTW9kZWxFdmVudCA9IE1vZGVsRXZlbnQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XG59XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9jb2RlRXZlbnRcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vX3R5cGVndWFyZHNcIikpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jbGFzcyBDb2RlRXZlbnQge1xuICAgIGNvbnN0cnVjdG9yKG5hbWUpIHtcbiAgICAgICAgdGhpcy5fbmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuX2xpc3RlbmVycyA9IG5ldyBNYXAoKTtcbiAgICB9XG4gICAgZ2V0IGxpc3RlbmVycygpIHsgcmV0dXJuIG5ldyBNYXAodGhpcy5fbGlzdGVuZXJzKTsgfVxuICAgIGRpc3BhdGNoKHRhcmdldCwgZGF0YSkge1xuICAgICAgICBsZXQgZGlzcGF0Y2hEYXRhID0gZGF0YTtcbiAgICAgICAgZGlzcGF0Y2hEYXRhLnRhcmdldCA9IHRhcmdldDtcbiAgICAgICAgZGlzcGF0Y2hEYXRhLm5hbWUgPSB0aGlzLl9uYW1lO1xuICAgICAgICBsZXQgbGlzdGVuZXJzID0gW107XG4gICAgICAgIGxpc3RlbmVycyA9IGxpc3RlbmVycy5jb25jYXQodGhpcy5fbGlzdGVuZXJzLmdldCh0YXJnZXQpKTtcbiAgICAgICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLmNvbmNhdCh0aGlzLl9saXN0ZW5lcnMuZ2V0KG51bGwpKTtcbiAgICAgICAgZm9yIChsZXQgY2Igb2YgbGlzdGVuZXJzKSB7XG4gICAgICAgICAgICBpZiAoIWNiKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYihkaXNwYXRjaERhdGEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFkZEV2ZW50TGlzdGVuZXIoY2IsIHRhcmdldCkge1xuICAgICAgICBpZiAoIXRhcmdldCkge1xuICAgICAgICAgICAgdGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzLmdldCh0YXJnZXQpO1xuICAgICAgICBpZiAoIWxpc3RlbmVycykge1xuICAgICAgICAgICAgbGlzdGVuZXJzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgbGlzdGVuZXJzLnB1c2goY2IpO1xuICAgICAgICB0aGlzLl9saXN0ZW5lcnMuc2V0KHRhcmdldCwgbGlzdGVuZXJzKTtcbiAgICB9XG59XG5leHBvcnRzLkNvZGVFdmVudCA9IENvZGVFdmVudDtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc0xpc3RlbmFibGUgPSAodGVzdCkgPT4ge1xuICAgIGlmICh0ZXN0LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XG59XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9jb3JlXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL3NwZWNpZmljXCIpKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgX3R5cGVndWFyZHNfMSA9IHJlcXVpcmUoXCIuL190eXBlZ3VhcmRzXCIpO1xuY29uc3Qgc2hhcmVkX3R5cGVzXzEgPSByZXF1aXJlKFwiQHRvb2xraXAvc2hhcmVkLXR5cGVzXCIpO1xuZnVuY3Rpb24gZXF1YWxzKG9yaWcsIGNvbXBhcmlzb24pIHtcbiAgICBpZiAoX3R5cGVndWFyZHNfMS5pc0VxdWF0YWJsZShvcmlnKSkge1xuICAgICAgICByZXR1cm4gb3JpZy5lcXVhbHMoY29tcGFyaXNvbik7XG4gICAgfVxuICAgIGlmIChzaGFyZWRfdHlwZXNfMS5pc1ByaW1pdGl2ZShvcmlnKSkge1xuICAgICAgICByZXR1cm4gKG9yaWcgPT09IGNvbXBhcmlzb24pO1xuICAgIH1cbiAgICBlbHNlIGlmIChzaGFyZWRfdHlwZXNfMS5pc0RhdGUob3JpZykpIHtcbiAgICAgICAgcmV0dXJuICgrb3JpZyA9PT0gK2NvbXBhcmlzb24pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIChKU09OLnN0cmluZ2lmeShvcmlnKSA9PT0gSlNPTi5zdHJpbmdpZnkoY29tcGFyaXNvbikpO1xuICAgIH1cbn1cbmV4cG9ydHMuZXF1YWxzID0gZXF1YWxzO1xuZnVuY3Rpb24gbGVzc2VyVGhhbihvcmlnLCBjb21wYXJpc29uKSB7XG4gICAgaWYgKF90eXBlZ3VhcmRzXzEuaXNDb21wYXJhYmxlKG9yaWcpKSB7XG4gICAgICAgIHJldHVybiBvcmlnLmxlc3NlclRoYW4oY29tcGFyaXNvbik7XG4gICAgfVxuICAgIHJldHVybiAob3JpZyA8IGNvbXBhcmlzb24pO1xufVxuZXhwb3J0cy5sZXNzZXJUaGFuID0gbGVzc2VyVGhhbjtcbmZ1bmN0aW9uIGdyZWF0ZXJUaGFuKG9yaWcsIGNvbXBhcmlzb24pIHtcbiAgICBpZiAoX3R5cGVndWFyZHNfMS5pc0NvbXBhcmFibGUob3JpZykpIHtcbiAgICAgICAgcmV0dXJuIG9yaWcuZ3JlYXRlclRoYW4oY29tcGFyaXNvbik7XG4gICAgfVxuICAgIHJldHVybiAob3JpZyA+IGNvbXBhcmlzb24pO1xufVxuZXhwb3J0cy5ncmVhdGVyVGhhbiA9IGdyZWF0ZXJUaGFuO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnRzLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG5mdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZCh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydHMuaXNOdWxsT3JVbmRlZmluZWQgPSBpc051bGxPclVuZGVmaW5lZDtcbmZ1bmN0aW9uIGlzRmFsc3kodmFsdWUsIGZhbHN5VHlwZXNUb0lnbm9yZSA9IFtdKSB7XG4gICAgaWYgKCEhdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKGxldCBpZ25vcmVkVHlwZSBvZiBmYWxzeVR5cGVzVG9JZ25vcmUpIHtcbiAgICAgICAgaWYgKGlnbm9yZWRUeXBlID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZXhwb3J0cy5pc0ZhbHN5ID0gaXNGYWxzeTtcbmZ1bmN0aW9uIGlzVHJ1dGh5KHZhbHVlLCBmYWxzeVR5cGVzVG9UcmVhdEFzVHJ1dGh5ID0gW10pIHtcbiAgICByZXR1cm4gIXRoaXMuaXNGYWxzeSh2YWx1ZSwgZmFsc3lUeXBlc1RvVHJlYXRBc1RydXRoeSk7XG59XG5leHBvcnRzLmlzVHJ1dGh5ID0gaXNUcnV0aHk7XG5mdW5jdGlvbiBpc0ludGVyZmFjZSh0ZXN0LCBmdWxsX2ltcCkge1xuICAgIGxldCBwcm9wO1xuICAgIGxldCByZXFfbWF0Y2ggPSB0cnVlO1xuICAgIGxldCB2YWw7XG4gICAgZm9yIChwcm9wIGluIGZ1bGxfaW1wKSB7XG4gICAgICAgIGlmIChmdWxsX2ltcC5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgICAgICAgdmFsID0gZnVsbF9pbXBbcHJvcF07XG4gICAgICAgICAgICBpZiAodmFsICYmICh0ZXN0W3Byb3BdID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgICAgICAgcmVxX21hdGNoID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFyZXFfbWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBsZXQgaGFzX2V4dHJhID0gZmFsc2U7XG4gICAgZm9yIChwcm9wIGluIHRlc3QpIHtcbiAgICAgICAgaWYgKHRlc3QuaGFzT3duUHJvcGVydHkocHJvcCkpIHtcbiAgICAgICAgICAgIGlmIChmdWxsX2ltcFtwcm9wXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaGFzX2V4dHJhID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gKCFoYXNfZXh0cmEpO1xufVxuZXhwb3J0cy5pc0ludGVyZmFjZSA9IGlzSW50ZXJmYWNlO1xuZnVuY3Rpb24gaXNTdHJpbmcodGVzdCkge1xuICAgIHJldHVybiAodHlwZW9mIHRlc3QgPT09IFwic3RyaW5nXCIpO1xufVxuZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nO1xuZnVuY3Rpb24gaXNLZXlvZih0ZXN0LCByZWZlcmVuY2UpIHtcbiAgICBpZiAoIXJlZmVyZW5jZSkge1xuICAgICAgICByZXR1cm4gaXNTdHJpbmcodGVzdCk7XG4gICAgfVxuICAgIHJldHVybiByZWZlcmVuY2UuaGFzT3duUHJvcGVydHkodGVzdCk7XG59XG5leHBvcnRzLmlzS2V5b2YgPSBpc0tleW9mO1xuZnVuY3Rpb24gaXNOdW1iZXIodGVzdCkge1xuICAgIHJldHVybiAodHlwZW9mIHRlc3QgPT09IFwibnVtYmVyXCIpO1xufVxuZXhwb3J0cy5pc051bWJlciA9IGlzTnVtYmVyO1xuZnVuY3Rpb24gaXNCb29sZWFuKHRlc3QpIHtcbiAgICByZXR1cm4gKHR5cGVvZiB0ZXN0ID09PSBcImJvb2xlYW5cIik7XG59XG5leHBvcnRzLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcbmZ1bmN0aW9uIGlzUHJpbWl0aXZlKHRlc3QpIHtcbiAgICBpZiAodGVzdCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgc3dpdGNoICh0eXBlb2YgdGVzdCkge1xuICAgICAgICBjYXNlICdib29sZWFuJzpcbiAgICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgY2FzZSAndW5kZWZpbmVkJzpcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbmV4cG9ydHMuaXNQcmltaXRpdmUgPSBpc1ByaW1pdGl2ZTtcbmZ1bmN0aW9uIGlzRnVuY3Rpb24odGVzdCkge1xuICAgIHJldHVybiAodHlwZW9mIHRlc3QgPT09IFwiZnVuY3Rpb25cIik7XG59XG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuZnVuY3Rpb24gaXNBcnJheSh0ZXN0KSB7XG4gICAgcmV0dXJuICh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpO1xufVxuZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcbmZ1bmN0aW9uIGlzT2JqZWN0KHRlc3QpIHtcbiAgICByZXR1cm4gKHR5cGVvZiB0ZXN0ID09PSB0eXBlb2Yge30pO1xufVxuZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xuZnVuY3Rpb24gaXNEYXRlKHRlc3QpIHtcbiAgICBpZiAoISh0ZXN0IGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBwcm90b05hbWUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodGVzdCk7XG4gICAgcmV0dXJuIHByb3RvTmFtZSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuZXhwb3J0cy5pc0RhdGUgPSBpc0RhdGU7XG5mdW5jdGlvbiBpc1Byb21pc2UodGVzdCkge1xuICAgIGlmICh0ZXN0IGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0cy5pc1Byb21pc2UgPSBpc1Byb21pc2U7XG5mdW5jdGlvbiBpc1Byb21pc2VMaWtlKHRlc3QpIHtcbiAgICBpZiAoIXRlc3QudGhlbikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdGVzdC50aGVuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5leHBvcnRzLmlzUHJvbWlzZUxpa2UgPSBpc1Byb21pc2VMaWtlO1xuZnVuY3Rpb24gaXNTdGFuZGFyZEVsZW1lbnQodGVzdCkge1xuICAgIGlmICh0ZXN0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICh0ZXN0IGluc3RhbmNlb2YgU1ZHRWxlbWVudCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0cy5pc1N0YW5kYXJkRWxlbWVudCA9IGlzU3RhbmRhcmRFbGVtZW50O1xuZnVuY3Rpb24gaXNEcmF3YWJsZSh0ZXN0KSB7XG4gICAgcmV0dXJuICEhdGVzdC5kcmF3O1xufVxuZXhwb3J0cy5pc0RyYXdhYmxlID0gaXNEcmF3YWJsZTtcbmZ1bmN0aW9uIGlzRHJhd2FibGVFbGVtZW50KHRlc3QpIHtcbiAgICByZXR1cm4gKCEhKHRlc3QuYXBwZW5kQ2hpbGQpKTtcbn1cbmV4cG9ydHMuaXNEcmF3YWJsZUVsZW1lbnQgPSBpc0RyYXdhYmxlRWxlbWVudDtcbmZ1bmN0aW9uIGlzVXBkYXRhYmxlKHRlc3QpIHtcbiAgICBpZiAoIXRlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gISEodGVzdC51cGRhdGUpO1xufVxuZXhwb3J0cy5pc1VwZGF0YWJsZSA9IGlzVXBkYXRhYmxlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgU29ydE9yZGVyRW51bTtcbihmdW5jdGlvbiAoU29ydE9yZGVyRW51bSkge1xuICAgIFNvcnRPcmRlckVudW1bU29ydE9yZGVyRW51bVtcIklOQ09SUkVDVF9PUkRFUlwiXSA9IDFdID0gXCJJTkNPUlJFQ1RfT1JERVJcIjtcbiAgICBTb3J0T3JkZXJFbnVtW1NvcnRPcmRlckVudW1bXCJTQU1FXCJdID0gMF0gPSBcIlNBTUVcIjtcbiAgICBTb3J0T3JkZXJFbnVtW1NvcnRPcmRlckVudW1bXCJDT1JSRUNUX09SREVSXCJdID0gLTFdID0gXCJDT1JSRUNUX09SREVSXCI7XG59KShTb3J0T3JkZXJFbnVtID0gZXhwb3J0cy5Tb3J0T3JkZXJFbnVtIHx8IChleHBvcnRzLlNvcnRPcmRlckVudW0gPSB7fSkpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjb21iaW5lXzEgPSByZXF1aXJlKFwiLi9jb21iaW5lXCIpO1xuY29uc3QgbWFuaXB1bGF0ZV8xID0gcmVxdWlyZShcIi4vbWFuaXB1bGF0ZVwiKTtcbmNvbnN0IHNoYXJlZF90eXBlc18xID0gcmVxdWlyZShcIkB0b29sa2lwL3NoYXJlZC10eXBlc1wiKTtcbmNvbnN0IF90eXBlZ3VhcmRzXzEgPSByZXF1aXJlKFwiLi9fdHlwZWd1YXJkc1wiKTtcbmZ1bmN0aW9uIGNsb25lUmVjdChyZWN0KSB7XG4gICAgbGV0IG91dCA9IHtcbiAgICAgICAgeDogcmVjdC54LFxuICAgICAgICB5OiByZWN0LnksXG4gICAgICAgIHc6IHJlY3QudyxcbiAgICAgICAgaDogcmVjdC5oXG4gICAgfTtcbiAgICByZXR1cm4gb3V0O1xufVxuZXhwb3J0cy5jbG9uZVJlY3QgPSBjbG9uZVJlY3Q7XG5mdW5jdGlvbiBjbG9uZVBvaW50KHBvaW50KSB7XG4gICAgbGV0IG91dCA9IHtcbiAgICAgICAgeDogcG9pbnQueCxcbiAgICAgICAgeTogcG9pbnQueVxuICAgIH07XG4gICAgcmV0dXJuIG91dDtcbn1cbmV4cG9ydHMuY2xvbmVQb2ludCA9IGNsb25lUG9pbnQ7XG5mdW5jdGlvbiBjbG9uZVBvaW50QXJyYXkocG9pbnRzKSB7XG4gICAgbGV0IG91dCA9IFtdO1xuICAgIGxldCBwdDtcbiAgICBmb3IgKHB0IG9mIHBvaW50cykge1xuICAgICAgICBsZXQgY2xvbmUgPSBjbG9uZVBvaW50KHB0KTtcbiAgICAgICAgb3V0LnB1c2goY2xvbmUpO1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xufVxuZXhwb3J0cy5jbG9uZVBvaW50QXJyYXkgPSBjbG9uZVBvaW50QXJyYXk7XG5mdW5jdGlvbiBjbG9uZU9iamVjdChvYmopIHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmopKTtcbn1cbmV4cG9ydHMuY2xvbmVPYmplY3QgPSBjbG9uZU9iamVjdDtcbmZ1bmN0aW9uIGNsb25lKHRvQ2xvbmUsIGN1c3RvbUNsb25lcnMgPSBbXSwga2V5KSB7XG4gICAgZm9yIChsZXQgYyBvZiBjdXN0b21DbG9uZXJzKSB7XG4gICAgICAgIGlmIChjLnR5cGVHdWFyZCh0b0Nsb25lLCBrZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gYy5jbG9uZXIodG9DbG9uZSwga2V5KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoc2hhcmVkX3R5cGVzXzEuaXNQcmltaXRpdmUodG9DbG9uZSkpIHtcbiAgICAgICAgcmV0dXJuIF9jbG9uZVByaW1pdGl2ZSh0b0Nsb25lKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoX3R5cGVndWFyZHNfMS5pc0Nsb25lYWJsZSh0b0Nsb25lKSkge1xuICAgICAgICByZXR1cm4gdG9DbG9uZS5jbG9uZSgpO1xuICAgIH1cbiAgICBlbHNlIGlmIChzaGFyZWRfdHlwZXNfMS5pc0RhdGUodG9DbG9uZSkpIHtcbiAgICAgICAgcmV0dXJuIF9jbG9uZURhdGUodG9DbG9uZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHNoYXJlZF90eXBlc18xLmlzQXJyYXkodG9DbG9uZSkpIHtcbiAgICAgICAgcmV0dXJuIF9jbG9uZUFycmF5KHRvQ2xvbmUsIGN1c3RvbUNsb25lcnMpO1xuICAgIH1cbiAgICBlbHNlIGlmIChzaGFyZWRfdHlwZXNfMS5pc09iamVjdCh0b0Nsb25lKSkge1xuICAgICAgICByZXR1cm4gX2Nsb25lT2JqZWN0KHRvQ2xvbmUsIGN1c3RvbUNsb25lcnMpO1xuICAgIH1cbn1cbmV4cG9ydHMuY2xvbmUgPSBjbG9uZTtcbmNvbnN0IF9jbG9uZVByaW1pdGl2ZSA9IChwcmltaXRpdmUpID0+IHtcbiAgICByZXR1cm4gcHJpbWl0aXZlO1xufTtcbmNvbnN0IF9jbG9uZURhdGUgPSAoZGF0ZSkgPT4ge1xuICAgIHJldHVybiBuZXcgRGF0ZShkYXRlLnZhbHVlT2YoKSk7XG59O1xuY29uc3QgX2Nsb25lT2JqZWN0ID0gKG9iaiwgY3VzdG9tQ2xvbmVycykgPT4ge1xuICAgIGNvbnN0IHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaik7XG4gICAgY29uc3Qgb3V0ID0gT2JqZWN0LmNyZWF0ZShwcm90byk7XG4gICAgbWFuaXB1bGF0ZV8xLm1hcChvYmosICh2LCBrKSA9PiB7XG4gICAgICAgIG91dFtrXSA9IGNsb25lKHYsIGN1c3RvbUNsb25lcnMsIGspO1xuICAgIH0pO1xuICAgIHJldHVybiBvdXQ7XG59O1xuY29uc3QgX2Nsb25lQXJyYXkgPSAoYXJyLCBjdXN0b21DbG9uZXJzKSA9PiB7XG4gICAgY29uc3Qgb3V0ID0gW107XG4gICAgZm9yIChsZXQgZSBvZiBhcnIpIHtcbiAgICAgICAgb3V0LnB1c2goY2xvbmUoZSwgY3VzdG9tQ2xvbmVycykpO1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xufTtcbmZ1bmN0aW9uIHNoYWxsb3dDbG9uZU9iamVjdChvYmplY3QpIHtcbiAgICByZXR1cm4gY29tYmluZV8xLmNvbWJpbmVPYmplY3RzKHt9LCBvYmplY3QpO1xufVxuZXhwb3J0cy5zaGFsbG93Q2xvbmVPYmplY3QgPSBzaGFsbG93Q2xvbmVPYmplY3Q7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHByaW1pdGl2ZV9oZWxwZXJzXzEgPSByZXF1aXJlKFwiQHRvb2xraXAvcHJpbWl0aXZlLWhlbHBlcnNcIik7XG5jb25zdCBtYW5pcHVsYXRlXzEgPSByZXF1aXJlKFwiLi9tYW5pcHVsYXRlXCIpO1xuZnVuY3Rpb24gc3RyaW5naWZ5KG9iaiwgYXNIdG1sLCBwcmVmaXgpIHtcbiAgICBsZXQgb3V0ID0gW107XG4gICAgbGV0IG5ld0xpbmVDaGFyID0gYXNIdG1sID8gXCI8YnI+XCIgOiBcIlxcblwiO1xuICAgIGxldCB0YWJDaGFyID0gYXNIdG1sID8gXCImbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDtcIiA6IFwiXFx0XCI7XG4gICAgaWYgKCFwcmVmaXgpIHtcbiAgICAgICAgcHJlZml4ID0gXCJcIjtcbiAgICB9XG4gICAgbWFuaXB1bGF0ZV8xLm1hcChvYmosICh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgIGxldCB2YWxTdHI7XG4gICAgICAgIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgICAgICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgICAgICAgICAgdmFsU3RyID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgICAgICAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgICAgICAgICAgICAgIHZhbFN0ciA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsU3RyID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodmFsdWUuaGFzT3duUHJvcGVydHkoXCJ0b1N0cmluZ1wiKSkge1xuICAgICAgICAgICAgICAgICAgICB2YWxTdHIgPSBuZXdMaW5lQ2hhciArIHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YWxTdHIgPSBuZXdMaW5lQ2hhciArIHN0cmluZ2lmeSh2YWx1ZSwgYXNIdG1sLCB0YWJDaGFyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgb3V0LnB1c2goX2Zvcm1hdChwcmVmaXggKyBrZXksIHZhbFN0ciwgYXNIdG1sKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIG91dC5qb2luKFwiXCIpO1xufVxuZXhwb3J0cy5zdHJpbmdpZnkgPSBzdHJpbmdpZnk7XG5mdW5jdGlvbiBfZm9ybWF0KGtleSwgdmFsdWUsIGFzSHRtbCkge1xuICAgIGlmIChhc0h0bWwpIHtcbiAgICAgICAgcmV0dXJuIF9mb3JtYXRQcm9wZXJ0eUFzSFRNTChrZXksIHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIF9mb3JtYXRQcm9wZXJ0eUFzUGxhaW5UZXh0KGtleSwgdmFsdWUpO1xufVxuZnVuY3Rpb24gX2Zvcm1hdFByb3BlcnR5QXNIVE1MKGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gcHJpbWl0aXZlX2hlbHBlcnNfMS5mb3JtYXQoXCI8Yj57MH08L2I+OiB7MX17Mn1cIiwga2V5LCB2YWx1ZSwgXCI8YnI+XCIpO1xufVxuZnVuY3Rpb24gX2Zvcm1hdFByb3BlcnR5QXNQbGFpblRleHQoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiBwcmltaXRpdmVfaGVscGVyc18xLmZvcm1hdChcInswfTogezF9XFxuXCIsIGtleSwgdmFsdWUpO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5mdW5jdGlvbiBjb250YWlucyhhcnIsIHZhbHVlLCBlcXVhbGl0eUZ1bmN0aW9uKSB7XG4gICAgcmV0dXJuIChpbmRleE9mKGFyciwgdmFsdWUsIGVxdWFsaXR5RnVuY3Rpb24pICE9PSAtMSk7XG59XG5leHBvcnRzLmNvbnRhaW5zID0gY29udGFpbnM7XG5mdW5jdGlvbiBpbmRleE9mKGFyciwgdmFsdWUsIGVxdWFsaXR5RnVuY3Rpb24pIHtcbiAgICBpZiAoIWFycikge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGFyci5sZW5ndGg7IGlkeCArPSAxKSB7XG4gICAgICAgIGlmIChlcXVhbGl0eUZ1bmN0aW9uKSB7XG4gICAgICAgICAgICBpZiAoZXF1YWxpdHlGdW5jdGlvbihhcnJbaWR4XSwgdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlkeDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhcnJbaWR4XSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBpZHg7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xufVxuZXhwb3J0cy5pbmRleE9mID0gaW5kZXhPZjtcbmZ1bmN0aW9uIHJlbW92ZUVsZW1Gcm9tQXJyKGFyciwgZWxlbSwgZXF1YWwpIHtcbiAgICBsZXQgaWR4O1xuICAgIGxldCBvdXRBcnI7XG4gICAgaWYgKCFlcXVhbCkge1xuICAgICAgICBlcXVhbCA9IGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiAoYSA9PT0gYik7IH07XG4gICAgfVxuICAgIGZvciAoaWR4ID0gKGFyci5sZW5ndGggLSAxKTsgaWR4ID49IDA7IGlkeCAtPSAxKSB7XG4gICAgICAgIGlmIChlcXVhbChhcnJbaWR4XSwgZWxlbSkpIHtcbiAgICAgICAgICAgIG91dEFyciA9IGFyci5zcGxpY2UoaWR4LCAxKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0QXJyO1xufVxuZXhwb3J0cy5yZW1vdmVFbGVtRnJvbUFyciA9IHJlbW92ZUVsZW1Gcm9tQXJyO1xuO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBudW1iZXJzXzEgPSByZXF1aXJlKFwiLi9udW1iZXJzXCIpO1xuY29uc3Qgc3RyaW5nc18xID0gcmVxdWlyZShcIi4vc3RyaW5nc1wiKTtcbmZ1bmN0aW9uIGRhdGVEaWZmKGEsIGIsIHNpZ25lZCwgaW5jbHVkZVRpbWUsIHJldHVybk1pbGxpKSB7XG4gICAgbGV0IG1zO1xuICAgIGxldCBkaWZmO1xuICAgIGxldCBkaXI7XG4gICAgbXMgPSAoMTAwMCAqIDYwICogNjAgKiAyNCk7XG4gICAgaWYgKCFpbmNsdWRlVGltZSkge1xuICAgICAgICBhID0gY2xlYXJUaW1lSW5mbyhhLCB0cnVlKTtcbiAgICAgICAgYiA9IGNsZWFyVGltZUluZm8oYiwgdHJ1ZSk7XG4gICAgfVxuICAgIGlmICgoYSA+IGIpIHx8IHNpZ25lZCkge1xuICAgICAgICBkaWZmID0gKGEgLSBiKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGRpZmYgPSAoYiAtIGEpO1xuICAgIH1cbiAgICBpZiAoIXJldHVybk1pbGxpKSB7XG4gICAgICAgIGRpZmYgPSBkaWZmIC8gbXM7XG4gICAgfVxuICAgIHJldHVybiBkaWZmO1xufVxuZXhwb3J0cy5kYXRlRGlmZiA9IGRhdGVEaWZmO1xuO1xudmFyIEluY2x1c2l2aXR5RW51bTtcbihmdW5jdGlvbiAoSW5jbHVzaXZpdHlFbnVtKSB7XG4gICAgSW5jbHVzaXZpdHlFbnVtW0luY2x1c2l2aXR5RW51bVtcIkVYQ0xVU0lWRVwiXSA9IC0xXSA9IFwiRVhDTFVTSVZFXCI7XG4gICAgSW5jbHVzaXZpdHlFbnVtW0luY2x1c2l2aXR5RW51bVtcIkRFRkFVTFRcIl0gPSAwXSA9IFwiREVGQVVMVFwiO1xuICAgIEluY2x1c2l2aXR5RW51bVtJbmNsdXNpdml0eUVudW1bXCJJTkNMVVNJVkVcIl0gPSAxXSA9IFwiSU5DTFVTSVZFXCI7XG59KShJbmNsdXNpdml0eUVudW0gPSBleHBvcnRzLkluY2x1c2l2aXR5RW51bSB8fCAoZXhwb3J0cy5JbmNsdXNpdml0eUVudW0gPSB7fSkpO1xuZnVuY3Rpb24gbW9udGhEaWZmKGEsIGIsIHNpZ25lZCwgaW5jbHVzaXZpdHkpIHtcbiAgICBsZXQgbW9udGhEaWZmO1xuICAgIGxldCB5ZWFyRGlmZjtcbiAgICBpZiAoKGEgPiBiKSB8fCBzaWduZWQpIHtcbiAgICAgICAgbW9udGhEaWZmID0gKGEuZ2V0TW9udGgoKSkgLSAoYi5nZXRNb250aCgpKTtcbiAgICAgICAgeWVhckRpZmYgPSAoYS5nZXRGdWxsWWVhcigpKSAtIChiLmdldEZ1bGxZZWFyKCkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbW9udGhEaWZmID0gKGIuZ2V0TW9udGgoKSkgLSAoYS5nZXRNb250aCgpKTtcbiAgICAgICAgeWVhckRpZmYgPSAoYi5nZXRGdWxsWWVhcigpKSAtIChhLmdldEZ1bGxZZWFyKCkpO1xuICAgIH1cbiAgICBsZXQgZGlmZiA9IHllYXJEaWZmICogMTIgKyBtb250aERpZmY7XG4gICAgZGlmZiArPSAraW5jbHVzaXZpdHk7XG4gICAgcmV0dXJuIGRpZmY7XG59XG5leHBvcnRzLm1vbnRoRGlmZiA9IG1vbnRoRGlmZjtcbmZ1bmN0aW9uIGdldFRvZGF5KGluY2x1ZGVfdGltZSkge1xuICAgIDtcbiAgICBsZXQgcmV0O1xuICAgIHJldCA9IG5ldyBEYXRlKCk7XG4gICAgaWYgKGluY2x1ZGVfdGltZSlcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICByZXQgPSBjbGVhclRpbWVJbmZvKHJldCk7XG4gICAgcmV0dXJuIHJldDtcbn1cbmV4cG9ydHMuZ2V0VG9kYXkgPSBnZXRUb2RheTtcbjtcbmZ1bmN0aW9uIGNsZWFyVGltZUluZm8oZGF0ZSwgY2xlYXJUWikge1xuICAgIGxldCBkYXRlU3RyID0gc2hvcnREYXRlKGRhdGUpO1xuICAgIGxldCBvdXREYXRlO1xuICAgIGlmIChjbGVhclRaKSB7XG4gICAgICAgIG91dERhdGUgPSBuZXcgRGF0ZShkYXRlU3RyICsgXCIgMDA6MDBaXCIpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgb3V0RGF0ZSA9IG5ldyBEYXRlKGRhdGVTdHIpO1xuICAgIH1cbiAgICByZXR1cm4gb3V0RGF0ZTtcbn1cbmV4cG9ydHMuY2xlYXJUaW1lSW5mbyA9IGNsZWFyVGltZUluZm87XG5mdW5jdGlvbiBidXNpbmVzc0RhdGVEaWZmKGEsIGIsIHNpZ25lZCwgaW5jbHVkZVRpbWUsIHJldHVybk1pbGxpKSB7XG4gICAgO1xuICAgIGxldCBkaWZmO1xuICAgIGxldCBkYXlPZldlZWs7XG4gICAgbGV0IGRpcjtcbiAgICBsZXQgaWR4O1xuICAgIGRpZmYgPSBkYXRlRGlmZihhLCBiLCBzaWduZWQsIGluY2x1ZGVUaW1lLCByZXR1cm5NaWxsaSk7XG4gICAgZGF5T2ZXZWVrID0gKGIgPiBhID8gYS5nZXREYXkoKSA6IGIuZ2V0RGF5KCkpICsgMTtcbiAgICBkYXlPZldlZWsgJT0gNztcbiAgICBpZiAoZGF5T2ZXZWVrIDwgMCkge1xuICAgICAgICBkYXlPZldlZWsgPSA2O1xuICAgIH1cbiAgICBsZXQgd2Vla2VuZERheXMgPSAwO1xuICAgIGZvciAoaWR4ID0gMDsgaWR4IDwgTWF0aC5hYnMoZGlmZik7IGlkeCArPSAxKSB7XG4gICAgICAgIGlmIChkYXlPZldlZWsgPT09IDAgfHwgZGF5T2ZXZWVrID09PSA2KSB7XG4gICAgICAgICAgICB3ZWVrZW5kRGF5cyArPSAxO1xuICAgICAgICB9XG4gICAgICAgIGRheU9mV2VlayArPSAxO1xuICAgICAgICBkYXlPZldlZWsgJT0gNztcbiAgICAgICAgaWYgKGRheU9mV2VlayA8IDApIHtcbiAgICAgICAgICAgIGRheU9mV2VlayA9IDY7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGRpZmYgPCAwKSB7XG4gICAgICAgIGRpciA9IC0xO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZGlyID0gMTtcbiAgICB9XG4gICAgcmV0dXJuIGRpZmYgLSAod2Vla2VuZERheXMgKiBkaXIpO1xufVxuZXhwb3J0cy5idXNpbmVzc0RhdGVEaWZmID0gYnVzaW5lc3NEYXRlRGlmZjtcbjtcbmZ1bmN0aW9uIHNob3J0RGF0ZShkdCkge1xuICAgIDtcbiAgICBpZiAoIWR0KSB7XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgICBsZXQgeXI7XG4gICAgeXIgPSBnZXRTaG9ydFllYXIoZHQpO1xuICAgIHJldHVybiAoZHQuZ2V0TW9udGgoKSArIDEpICsgXCIvXCIgKyBkdC5nZXREYXRlKCkgKyBcIi9cIiArIHlyO1xufVxuZXhwb3J0cy5zaG9ydERhdGUgPSBzaG9ydERhdGU7XG47XG5mdW5jdGlvbiBpbnB1dERhdGVGbXQoZHQpIHtcbiAgICA7XG4gICAgbGV0IG07XG4gICAgbGV0IGQ7XG4gICAgbGV0IHk7XG4gICAgeSA9IGR0LmdldEZ1bGxZZWFyKCk7XG4gICAgbSA9IChkdC5nZXRNb250aCgpICsgMSk7XG4gICAgaWYgKG0gPCAxMClcbiAgICAgICAgbSA9IFwiMFwiICsgbTtcbiAgICBkID0gK2R0LmdldERhdGUoKTtcbiAgICBpZiAoZCA8IDEwKVxuICAgICAgICBkID0gXCIwXCIgKyBkO1xuICAgIHJldHVybiAoZHQuZ2V0RnVsbFllYXIoKSArIFwiLVwiICsgbSArIFwiLVwiICsgZCk7XG59XG5leHBvcnRzLmlucHV0RGF0ZUZtdCA9IGlucHV0RGF0ZUZtdDtcbjtcbmZ1bmN0aW9uIGlucHV0VG9EYXRlKGlEdCwgaVRpbWUpIHtcbiAgICBsZXQgb3V0RGF0ZTtcbiAgICBpZiAoaUR0KSB7XG4gICAgICAgIGxldCBkdEFyciA9IGlEdC5zcGxpdChcIi1cIik7XG4gICAgICAgIG91dERhdGUgPSBuZXcgRGF0ZSgrZHRBcnJbMF0sICtkdEFyclsxXSAtIDEsICtkdEFyclsyXSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlUaW1lKSB7XG4gICAgICAgIG91dERhdGUgPSBnZXRUb2RheSgpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgb3V0RGF0ZSA9IG51bGw7XG4gICAgICAgIHJldHVybiBvdXREYXRlO1xuICAgIH1cbiAgICBpZiAoaVRpbWUpIHtcbiAgICAgICAgbGV0IHRpbWVBcnIgPSBpVGltZS5zcGxpdChcIjpcIik7XG4gICAgICAgIG91dERhdGUuc2V0SG91cnMoK3RpbWVBcnJbMF0pO1xuICAgICAgICBvdXREYXRlLnNldE1pbnV0ZXMoK3RpbWVBcnJbMV0pO1xuICAgIH1cbiAgICByZXR1cm4gb3V0RGF0ZTtcbn1cbmV4cG9ydHMuaW5wdXRUb0RhdGUgPSBpbnB1dFRvRGF0ZTtcbjtcbmZ1bmN0aW9uIHNob3J0VGltZShkdCwgd2l0aEV4dHJhKSB7XG4gICAgO1xuICAgIGxldCBtaW47XG4gICAgbGV0IG1pbl9zdHI7XG4gICAgbGV0IGhvdXJzO1xuICAgIGxldCBoYWxmO1xuICAgIG1pbiA9ICtkdC5nZXRNaW51dGVzKCk7XG4gICAgaG91cnMgPSArZHQuZ2V0SG91cnMoKTtcbiAgICBoYWxmID0gXCJcIjtcbiAgICBpZiAobWluIDwgMTApIHtcbiAgICAgICAgbWluX3N0ciA9IFwiMFwiICsgbWluO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbWluX3N0ciA9IG1pbi50b1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAod2l0aEV4dHJhKSB7XG4gICAgICAgIGhhbGYgPSBcIiBBTVwiO1xuICAgICAgICBpZiAoaG91cnMgPj0gMTIpXG4gICAgICAgICAgICBoYWxmID0gXCIgUE1cIjtcbiAgICAgICAgaWYgKGhvdXJzID4gMTIpXG4gICAgICAgICAgICBob3VycyAtPSAxMjtcbiAgICAgICAgaWYgKGhvdXJzID09PSAwKSB7XG4gICAgICAgICAgICBob3VycyA9IDEyO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBob3VycyArIFwiOlwiICsgbWluX3N0ciArIGhhbGY7XG59XG5leHBvcnRzLnNob3J0VGltZSA9IHNob3J0VGltZTtcbjtcbmZ1bmN0aW9uIGlucHV0VGltZUZtdCh0aW1lLCBpbmNsdWRlU2Vjb25kcykge1xuICAgIGxldCBvdXQgPSBbXTtcbiAgICBsZXQgaG91cnMgPSB0aW1lLmdldEhvdXJzKCk7XG4gICAgb3V0LnB1c2gobnVtYmVyc18xLnBhZFRvRGlnaXRzKGhvdXJzLCAyKSk7XG4gICAgbGV0IG1pbnV0ZXMgPSB0aW1lLmdldE1pbnV0ZXMoKTtcbiAgICBvdXQucHVzaChudW1iZXJzXzEucGFkVG9EaWdpdHMobWludXRlcywgMikpO1xuICAgIGlmIChpbmNsdWRlU2Vjb25kcykge1xuICAgICAgICBsZXQgc2Vjb25kcyA9IHRpbWUuZ2V0U2Vjb25kcygpO1xuICAgICAgICBvdXQucHVzaChudW1iZXJzXzEucGFkVG9EaWdpdHMoc2Vjb25kcywgMikpO1xuICAgIH1cbiAgICByZXR1cm4gb3V0LmpvaW4oXCI6XCIpO1xufVxuZXhwb3J0cy5pbnB1dFRpbWVGbXQgPSBpbnB1dFRpbWVGbXQ7XG5mdW5jdGlvbiBzaG9ydERhdGVUaW1lKGR0LCB3aXRoX2V4dHJhKSB7XG4gICAgcmV0dXJuIHNob3J0RGF0ZShkdCkgKyBcIiBcIiArIHNob3J0VGltZShkdCwgd2l0aF9leHRyYSk7XG59XG5leHBvcnRzLnNob3J0RGF0ZVRpbWUgPSBzaG9ydERhdGVUaW1lO1xuO1xuZnVuY3Rpb24gc3RvcHdhdGNoRGlzcGxheShtaWxsaSwgbm9MZWFkaW5nWmVyb3MsIG5vQmxhbmtzKSB7XG4gICAgbGV0IHNlY29uZHM7XG4gICAgbGV0IG1pbnV0ZXM7XG4gICAgbGV0IGhvdXJzO1xuICAgIGxldCBkYXlzO1xuICAgIGxldCBhcnI7XG4gICAgbGV0IHNlY19zdHI7XG4gICAgbGV0IG1pbl9zdHI7XG4gICAgbGV0IGhyX3N0cjtcbiAgICBpZiAoIW5vTGVhZGluZ1plcm9zKSB7XG4gICAgICAgIHNlY19zdHIgPSBzdHJpbmdzXzEuYWRkTGVhZGluZ1plcm9lcygyLCBzZWNvbmRzKTtcbiAgICAgICAgbWluX3N0ciA9IHN0cmluZ3NfMS5hZGRMZWFkaW5nWmVyb2VzKDIsIG1pbnV0ZXMpO1xuICAgICAgICBocl9zdHIgPSBzdHJpbmdzXzEuYWRkTGVhZGluZ1plcm9lcygyLCBob3Vycyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzZWNfc3RyID0gc2Vjb25kcy50b1N0cmluZygpO1xuICAgICAgICBtaW5fc3RyID0gbWludXRlcy50b1N0cmluZygpO1xuICAgICAgICBocl9zdHIgPSBob3Vycy50b1N0cmluZygpO1xuICAgIH1cbiAgICByZXR1cm4gZGF5cyArIFwiRCAgXCIgKyBocl9zdHIgKyBcIjpcIiArIG1pbl9zdHIgKyBcIjpcIiArIHNlY19zdHIgKyBcIiAnXCIgKyBtaWxsaTtcbn1cbmV4cG9ydHMuc3RvcHdhdGNoRGlzcGxheSA9IHN0b3B3YXRjaERpc3BsYXk7XG47XG5mdW5jdGlvbiBfcmV0cmlldmVDb3VudHNGcm9tTWlsbGkobWlsbGkpIHtcbiAgICBsZXQgb3V0ID0ge307XG4gICAgbGV0IHJlbWFpbmluZyA9IG1pbGxpO1xuICAgIG91dC5kYXlzID0gTWF0aC5mbG9vcihyZW1haW5pbmcgLyAoMjQgKiA2MCAqIDYwICogMTAwMCkpO1xuICAgIHJlbWFpbmluZyAtPSAob3V0LmRheXMgKiAyNCAqIDYwICogNjAgKiAxMDAwKTtcbiAgICBvdXQuaG91cnMgPSBNYXRoLmZsb29yKHJlbWFpbmluZyAvICg2MCAqIDYwICogMTAwMCkpO1xuICAgIHJlbWFpbmluZyAtPSAob3V0LmhvdXJzICogNjAgKiA2MCAqIDEwMDApO1xuICAgIG91dC5taW51dGVzID0gTWF0aC5mbG9vcihyZW1haW5pbmcgLyAoNjAgKiAxMDAwKSk7XG4gICAgcmVtYWluaW5nIC09IChvdXQubWludXRlcyAqIDYwICogMTAwMCk7XG4gICAgb3V0LnNlY29uZHMgPSBNYXRoLmZsb29yKHJlbWFpbmluZyAvIDEwMDApO1xuICAgIHJlbWFpbmluZyAtPSAob3V0LnNlY29uZHMgKiAxMDAwKTtcbiAgICBvdXQubWlsbGlzZWNvbmRzID0gcmVtYWluaW5nO1xuICAgIHJldHVybiBvdXQ7XG59XG5mdW5jdGlvbiB1cGRhdGVkU3RvcHdhdGNoRGlzcGxheShtaWxsaSwgb3B0aW9ucykge1xuICAgIGxldCBkaWZmcyA9IF9yZXRyaWV2ZUNvdW50c0Zyb21NaWxsaShtaWxsaSk7XG4gICAgbGV0IG91dCA9IFtdO1xuICAgIGlmIChkaWZmcy5kYXlzKSB7XG4gICAgICAgIG91dC5wdXNoKGRpZmZzLmRheXMgKyBcIiBkYXlzXCIpO1xuICAgIH1cbiAgICBpZiAoZGlmZnMuaG91cnMpIHtcbiAgICAgICAgb3V0LnB1c2goZGlmZnMuaG91cnMgKyBcIiBob3Vyc1wiKTtcbiAgICB9XG4gICAgaWYgKGRpZmZzLm1pbnV0ZXMpIHtcbiAgICAgICAgb3V0LnB1c2goZGlmZnMubWludXRlcyArIFwiIG1pbnV0ZXNcIik7XG4gICAgfVxuICAgIGlmIChkaWZmcy5zZWNvbmRzKSB7XG4gICAgICAgIG91dC5wdXNoKGRpZmZzLnNlY29uZHMgKyBcIiBzZWNvbmRzXCIpO1xuICAgIH1cbiAgICBpZiAoZGlmZnMubWlsbGlzZWNvbmRzICYmIG9wdGlvbnMuc2hvd01pbGxpKSB7XG4gICAgICAgIG91dC5wdXNoKGRpZmZzLm1pbGxpc2Vjb25kcyArIFwiIG1zXCIpO1xuICAgIH1cbiAgICByZXR1cm4gb3V0LmpvaW4oXCIgXCIpO1xufVxuZXhwb3J0cy51cGRhdGVkU3RvcHdhdGNoRGlzcGxheSA9IHVwZGF0ZWRTdG9wd2F0Y2hEaXNwbGF5O1xuZnVuY3Rpb24gYWRkVG9EYXRlKGRhdGUsIGNvdW50cykge1xuICAgIGlmIChjb3VudHMubWlsbGlzZWNvbmRzKSB7XG4gICAgICAgIGRhdGUuc2V0TWlsbGlzZWNvbmRzKGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkgKyBjb3VudHMubWlsbGlzZWNvbmRzKTtcbiAgICB9XG4gICAgaWYgKGNvdW50cy5zZWNvbmRzKSB7XG4gICAgICAgIGRhdGUuc2V0U2Vjb25kcyhkYXRlLmdldFNlY29uZHMoKSArIGNvdW50cy5zZWNvbmRzKTtcbiAgICB9XG4gICAgaWYgKGNvdW50cy5taW51dGVzKSB7XG4gICAgICAgIGRhdGUuc2V0TWludXRlcyhkYXRlLmdldE1pbnV0ZXMoKSArIGNvdW50cy5taW51dGVzKTtcbiAgICB9XG4gICAgaWYgKGNvdW50cy5ob3Vycykge1xuICAgICAgICBkYXRlLnNldEhvdXJzKGRhdGUuZ2V0SG91cnMoKSArIGNvdW50cy5ob3Vycyk7XG4gICAgfVxuICAgIGlmIChjb3VudHMuZGF5cykge1xuICAgICAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyBjb3VudHMuZGF5cyk7XG4gICAgfVxuICAgIGlmIChjb3VudHMubW9udGhzKSB7XG4gICAgICAgIGRhdGUuc2V0TW9udGgoZGF0ZS5nZXRNb250aCgpICsgY291bnRzLm1vbnRocyk7XG4gICAgfVxuICAgIGlmIChjb3VudHMueWVhcnMpIHtcbiAgICAgICAgZGF0ZS5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkgKyBjb3VudHMueWVhcnMpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0ZTtcbn1cbmV4cG9ydHMuYWRkVG9EYXRlID0gYWRkVG9EYXRlO1xuO1xuZnVuY3Rpb24gZ2V0TW9udGhOYW1lKGRhdGUsIHNob3J0KSB7XG4gICAgc3dpdGNoIChkYXRlLmdldE1vbnRoKCkpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgaWYgKHNob3J0KVxuICAgICAgICAgICAgICAgIHJldHVybiBcIkphblwiO1xuICAgICAgICAgICAgcmV0dXJuIFwiSmFudWFyeVwiO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBpZiAoc2hvcnQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiRmViXCI7XG4gICAgICAgICAgICByZXR1cm4gXCJGZWJydWFyeVwiO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBpZiAoc2hvcnQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiTWFyXCI7XG4gICAgICAgICAgICByZXR1cm4gXCJNYXJjaFwiO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBpZiAoc2hvcnQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiQXByXCI7XG4gICAgICAgICAgICByZXR1cm4gXCJBcHJpbFwiO1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICByZXR1cm4gXCJNYXlcIjtcbiAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgaWYgKHNob3J0KVxuICAgICAgICAgICAgICAgIHJldHVybiBcIkp1blwiO1xuICAgICAgICAgICAgcmV0dXJuIFwiSnVuZVwiO1xuICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICBpZiAoc2hvcnQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiSnVsXCI7XG4gICAgICAgICAgICByZXR1cm4gXCJKdWx5XCI7XG4gICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgIGlmIChzaG9ydClcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJBdWdcIjtcbiAgICAgICAgICAgIHJldHVybiBcIkF1Z3VzdFwiO1xuICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICBpZiAoc2hvcnQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiU2VwdFwiO1xuICAgICAgICAgICAgcmV0dXJuIFwiU2VwdGVtYmVyXCI7XG4gICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgIGlmIChzaG9ydClcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJPY3RcIjtcbiAgICAgICAgICAgIHJldHVybiBcIk9jdG9iZXJcIjtcbiAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgIGlmIChzaG9ydClcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJOb3ZcIjtcbiAgICAgICAgICAgIHJldHVybiBcIk5vdmVtYmVyXCI7XG4gICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICBpZiAoc2hvcnQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiRGVjXCI7XG4gICAgICAgICAgICByZXR1cm4gXCJEZWNlbWJlclwiO1xuICAgIH1cbiAgICByZXR1cm4gXCJcIjtcbn1cbmV4cG9ydHMuZ2V0TW9udGhOYW1lID0gZ2V0TW9udGhOYW1lO1xuO1xuZnVuY3Rpb24gZ2V0RGF5T2ZXZWVrKGRhdGUsIHNob3J0KSB7XG4gICAgO1xuICAgIHN3aXRjaCAoZGF0ZS5nZXREYXkoKSkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBpZiAoc2hvcnQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiU3VuXCI7XG4gICAgICAgICAgICByZXR1cm4gXCJTdW5kYXlcIjtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgaWYgKHNob3J0KVxuICAgICAgICAgICAgICAgIHJldHVybiBcIk1vblwiO1xuICAgICAgICAgICAgcmV0dXJuIFwiTW9uZGF5XCI7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGlmIChzaG9ydClcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJUdWVzXCI7XG4gICAgICAgICAgICByZXR1cm4gXCJUdWVzZGF5XCI7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGlmIChzaG9ydClcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJXZWRcIjtcbiAgICAgICAgICAgIHJldHVybiBcIldlZG5lc2RheVwiO1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICBpZiAoc2hvcnQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiVGh1cnNcIjtcbiAgICAgICAgICAgIHJldHVybiBcIlRodXJzZGF5XCI7XG4gICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgIGlmIChzaG9ydClcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJGcmlcIjtcbiAgICAgICAgICAgIHJldHVybiBcIkZyaWRheVwiO1xuICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICBpZiAoc2hvcnQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiU2F0XCI7XG4gICAgICAgICAgICByZXR1cm4gXCJTYXR1cmRheVwiO1xuICAgIH1cbiAgICByZXR1cm4gXCJcIjtcbn1cbmV4cG9ydHMuZ2V0RGF5T2ZXZWVrID0gZ2V0RGF5T2ZXZWVrO1xuO1xuZnVuY3Rpb24gZ2V0TGVuZ3RoT2ZNb250aEluRGF5cyhkYXRlKSB7XG4gICAgaWYgKCFkYXRlKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgbGV0IG1vbnRoID0gZGF0ZS5nZXRNb250aCgpO1xuICAgIHN3aXRjaCAobW9udGgpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICBjYXNlIDI6XG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgY2FzZSA2OlxuICAgICAgICBjYXNlIDc6XG4gICAgICAgIGNhc2UgOTpcbiAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgIHJldHVybiAzMTtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgaWYgKGlzTGVhcFllYXIoZGF0ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMjk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMjg7XG4gICAgICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gMzA7XG4gICAgfVxufVxuZXhwb3J0cy5nZXRMZW5ndGhPZk1vbnRoSW5EYXlzID0gZ2V0TGVuZ3RoT2ZNb250aEluRGF5cztcbmZ1bmN0aW9uIGlzTGVhcFllYXIoZGF0ZSkge1xuICAgIGlmICghZGF0ZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGxldCB5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgIGlmICh5ZWFyICUgNCAhPT0gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICgoeWVhciAlIDEwMCA9PT0gMCkgJiYgKHllYXIgJSA0MDAgIT09IDApKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5leHBvcnRzLmlzTGVhcFllYXIgPSBpc0xlYXBZZWFyO1xuZnVuY3Rpb24gZ2V0U2hvcnRZZWFyKGRhdGUpIHtcbiAgICByZXR1cm4gKCtkYXRlLmdldEZ1bGxZZWFyKCkgJSAxMDApO1xufVxuZXhwb3J0cy5nZXRTaG9ydFllYXIgPSBnZXRTaG9ydFllYXI7XG5mdW5jdGlvbiBpc1dlZWtlbmQoZGF0ZSkge1xuICAgIGxldCBkYXlPZldlZWsgPSBkYXRlLmdldERheSgpO1xuICAgIGlmIChkYXlPZldlZWsgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChkYXlPZldlZWsgPT09IDYpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydHMuaXNXZWVrZW5kID0gaXNXZWVrZW5kO1xuZnVuY3Rpb24gaXNUb2RheShkYXRlKSB7XG4gICAgbGV0IHRvZGF5ID0gZ2V0VG9kYXkoKTtcbiAgICBsZXQgY2xvbmVEYXRlID0gY2xlYXJUaW1lSW5mbyhkYXRlKTtcbiAgICByZXR1cm4gaXNTYW1lRGF0ZSh0b2RheSwgY2xvbmVEYXRlKTtcbn1cbmV4cG9ydHMuaXNUb2RheSA9IGlzVG9kYXk7XG5mdW5jdGlvbiBpc1NhbWVEYXRlKGRhdGVBLCBkYXRlQikge1xuICAgIGlmIChzaG9ydERhdGUoZGF0ZUEpID09PSBzaG9ydERhdGUoZGF0ZUIpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnRzLmlzU2FtZURhdGUgPSBpc1NhbWVEYXRlO1xuZnVuY3Rpb24gZ2V0RGlzcGxheUR1cmF0aW9uKGNvdW50cykge1xuICAgIF91cGRhdGVEYXRlRGlmZmVyZW5jZXMoMTAwMCwgY291bnRzLCBcIm1pbGxpc2Vjb25kc1wiLCBcInNlY29uZHNcIik7XG4gICAgX3VwZGF0ZURhdGVEaWZmZXJlbmNlcyg2MCwgY291bnRzLCBcInNlY29uZHNcIiwgXCJtaW51dGVzXCIpO1xuICAgIF91cGRhdGVEYXRlRGlmZmVyZW5jZXMoNjAsIGNvdW50cywgXCJtaW51dGVzXCIsIFwiaG91cnNcIik7XG4gICAgX3VwZGF0ZURhdGVEaWZmZXJlbmNlcygyNCwgY291bnRzLCBcImhvdXJzXCIsIFwiZGF5c1wiKTtcbiAgICBfdXBkYXRlRGF0ZURpZmZlcmVuY2VzKDMwLCBjb3VudHMsIFwiZGF5c1wiLCBcIm1vbnRoc1wiKTtcbiAgICBfdXBkYXRlRGF0ZURpZmZlcmVuY2VzKDEyLCBjb3VudHMsIFwibW9udGhzXCIsIFwieWVhcnNcIik7XG4gICAgbGV0IG91dCA9IFtdO1xuICAgIGlmIChjb3VudHMueWVhcnMpIHtcbiAgICAgICAgb3V0LnB1c2goX2NyZWF0ZVBsdXJhbFN0cmluZyhjb3VudHMueWVhcnMsIFwieWVhclwiKSk7XG4gICAgfVxuICAgIGlmIChjb3VudHMubW9udGhzKSB7XG4gICAgICAgIG91dC5wdXNoKF9jcmVhdGVQbHVyYWxTdHJpbmcoY291bnRzLm1vbnRocywgXCJtb250aFwiKSk7XG4gICAgfVxuICAgIGlmIChjb3VudHMuZGF5cykge1xuICAgICAgICBvdXQucHVzaChfY3JlYXRlUGx1cmFsU3RyaW5nKGNvdW50cy5kYXlzLCBcImRheVwiKSk7XG4gICAgfVxuICAgIGlmIChjb3VudHMuaG91cnMpIHtcbiAgICAgICAgb3V0LnB1c2goX2NyZWF0ZVBsdXJhbFN0cmluZyhjb3VudHMuaG91cnMsIFwiaG91clwiKSk7XG4gICAgfVxuICAgIGlmIChjb3VudHMubWludXRlcykge1xuICAgICAgICBvdXQucHVzaChfY3JlYXRlUGx1cmFsU3RyaW5nKGNvdW50cy5taW51dGVzLCBcIm1pbnV0ZVwiKSk7XG4gICAgfVxuICAgIGlmIChjb3VudHMuc2Vjb25kcykge1xuICAgICAgICBvdXQucHVzaChfY3JlYXRlUGx1cmFsU3RyaW5nKGNvdW50cy5zZWNvbmRzLCBcInNlY29uZFwiKSk7XG4gICAgfVxuICAgIGlmIChjb3VudHMubWlsbGlzZWNvbmRzKSB7XG4gICAgICAgIG91dC5wdXNoKF9jcmVhdGVQbHVyYWxTdHJpbmcoY291bnRzLm1pbGxpc2Vjb25kcywgXCJtaWxsaXNlY29uZFwiKSk7XG4gICAgfVxuICAgIHJldHVybiBvdXQuam9pbihcIiBcIik7XG59XG5leHBvcnRzLmdldERpc3BsYXlEdXJhdGlvbiA9IGdldERpc3BsYXlEdXJhdGlvbjtcbmZ1bmN0aW9uIF91cGRhdGVEYXRlRGlmZmVyZW5jZXMoZGl2aXNvciwgb3V0LCBzdGFydEtleSwgZW5kS2V5KSB7XG4gICAgaWYgKCFvdXRbc3RhcnRLZXldKSB7XG4gICAgICAgIG91dFtzdGFydEtleV0gPSAwO1xuICAgIH1cbiAgICBpZiAoIW91dFtlbmRLZXldKSB7XG4gICAgICAgIG91dFtlbmRLZXldID0gMDtcbiAgICB9XG4gICAgbGV0IGRpdmlkZW5kID0gb3V0W3N0YXJ0S2V5XTtcbiAgICBsZXQgcmVtYWluZGVyID0gZGl2aWRlbmQgJSBkaXZpc29yO1xuICAgIGxldCBxdW90aWVudCA9IE1hdGguZmxvb3IoZGl2aWRlbmQgLyBkaXZpc29yKTtcbiAgICBvdXRbc3RhcnRLZXldID0gcmVtYWluZGVyO1xuICAgIG91dFtlbmRLZXldICs9IHF1b3RpZW50O1xuICAgIHJldHVybiBvdXQ7XG59XG5mdW5jdGlvbiBfY3JlYXRlUGx1cmFsU3RyaW5nKGFtb3VudCwgc2luZ3VsYXIsIHBsdXJhbCkge1xuICAgIGlmIChhbW91bnQgPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIGFtb3VudCArIFwiIFwiICsgc2luZ3VsYXI7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoIXBsdXJhbCkge1xuICAgICAgICAgICAgcGx1cmFsID0gc2luZ3VsYXIgKyBcInNcIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYW1vdW50ICsgXCIgXCIgKyBwbHVyYWw7XG4gICAgfVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBtYW5pcHVsYXRlXzEgPSByZXF1aXJlKFwiLi9tYW5pcHVsYXRlXCIpO1xuZXhwb3J0cy5kaWN0aW9uYXJ5VG9BcnJheSA9IChkaWN0ID0ge30pID0+IHtcbiAgICBjb25zdCBvdXQgPSBbXTtcbiAgICBtYW5pcHVsYXRlXzEubWFwKGRpY3QsICh2YWwpID0+IHtcbiAgICAgICAgb3V0LnB1c2godmFsKTtcbiAgICB9KTtcbiAgICByZXR1cm4gb3V0O1xufTtcbmV4cG9ydHMuYXJyYXlUb01hcCA9IChhcnJheSA9IFtdKSA9PiB7XG4gICAgY29uc3Qgb3V0ID0gbmV3IE1hcCgpO1xuICAgIGZvciAobGV0IHZhbCBvZiBhcnJheSkge1xuICAgICAgICBvdXQuc2V0KHZhbCwgdHJ1ZSk7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnQocmVxdWlyZShcIi4vaGlzdG9yeVwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9oaXN0b3J5Tm9kZVwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi91bmRvQ2hhaW5cIikpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBoaXN0b3J5XzEgPSByZXF1aXJlKFwiLi9oaXN0b3J5XCIpO1xuY2xhc3MgX1VuZG9DaGFpbiBleHRlbmRzIGhpc3RvcnlfMS5IaXN0b3J5Q2hhaW4ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFldmVudC5jdHJsS2V5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgIT09IDkwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuX3Nob3VsZElnbm9yZUV2ZW50KGV2ZW50KSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChldmVudC5zaGlmdEtleSkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVkbygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy51bmRvKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB1bmRvKCkge1xuICAgICAgICBsZXQgdW5kb2FibGUgPSB0aGlzLm5hdmlnYXRlQmFjaygpO1xuICAgICAgICBpZiAoIXVuZG9hYmxlIHx8ICF1bmRvYWJsZS5yZXZlcnNlRnVuY3Rpb24pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB1bmRvYWJsZS5yZXZlcnNlRnVuY3Rpb24oKTtcbiAgICB9XG4gICAgcmVkbygpIHtcbiAgICAgICAgbGV0IHVuZG9hYmxlID0gdGhpcy5uYXZpZ2F0ZUZvcndhcmQoKTtcbiAgICAgICAgaWYgKCF1bmRvYWJsZSB8fCAhdW5kb2FibGUuZm9yd2FyZEZ1bmN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdW5kb2FibGUuZm9yd2FyZEZ1bmN0aW9uKCk7XG4gICAgfVxufVxuZXhwb3J0cy5fVW5kb0NoYWluID0gX1VuZG9DaGFpbjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgaWRlbnRpZmlhYmxlTW9kZWxfMSA9IHJlcXVpcmUoXCIuLi9vYmplY3RNb2RlbHMvaWRlbnRpZmlhYmxlTW9kZWxcIik7XG5jb25zdCBvYmplY3RNb2RlbHNfMSA9IHJlcXVpcmUoXCIuLi9vYmplY3RNb2RlbHNcIik7XG5jb25zdCBwcmltaXRpdmVNb2RlbHNfMSA9IHJlcXVpcmUoXCIuLi9wcmltaXRpdmVNb2RlbHNcIik7XG5jb25zdCBhcnJheU1vZGVsc18xID0gcmVxdWlyZShcIi4uL2FycmF5TW9kZWxzXCIpO1xuY29uc3Qgc2VsZWN0b3JzXzEgPSByZXF1aXJlKFwiLi4vaGVscGVycy9zZWxlY3RvcnNcIik7XG5leHBvcnRzLmlzUHJpbWl0aXZlTW9kZWwgPSAodGVzdCkgPT4ge1xuICAgIGlmICh0ZXN0IGluc3RhbmNlb2YgcHJpbWl0aXZlTW9kZWxzXzEuTVByaW1pdGl2ZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcbmV4cG9ydHMuaXNEYXRlTW9kZWwgPSAodGVzdCkgPT4ge1xuICAgIGlmICh0ZXN0IGluc3RhbmNlb2YgcHJpbWl0aXZlTW9kZWxzXzEuTURhdGUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn07XG5leHBvcnRzLmlzT2JqZWN0TW9kZWwgPSAodGVzdCkgPT4ge1xuICAgIGlmICh0ZXN0IGluc3RhbmNlb2Ygb2JqZWN0TW9kZWxzXzEuTU9iamVjdCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcbmV4cG9ydHMuaXNBcnJheU1vZGVsID0gKHRlc3QpID0+IHtcbiAgICBpZiAodGVzdCBpbnN0YW5jZW9mIGFycmF5TW9kZWxzXzEuTUFycmF5KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuZXhwb3J0cy5pc01hbmFnZXJNb2RlbCA9ICh0ZXN0KSA9PiB7XG4gICAgaWYgKHRlc3QgaW5zdGFuY2VvZiBhcnJheU1vZGVsc18xLk1NYW5hZ2VyKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuZXhwb3J0cy5pc0lkZW50aWZpYWJsZU1vZGVsID0gKG1vZGVsKSA9PiB7XG4gICAgaWYgKG1vZGVsIGluc3RhbmNlb2YgaWRlbnRpZmlhYmxlTW9kZWxfMS5NSWRlbnRpZmlhYmxlKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuZXhwb3J0cy5pc1NlbGVjdG9yID0gKHRlc3QpID0+IHtcbiAgICBpZiAodGVzdCBpbnN0YW5jZW9mIHNlbGVjdG9yc18xLlNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzSWRlbnRpZmlhYmxlID0gKHRlc3QpID0+IHtcbiAgICBpZiAodGVzdC5pZCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY2xhc3MgX0lkZW50aWZpZXJBc3NpZ25lciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuX2xhc3RJZHMgPSB7IFwiaWRcIjogMCB9O1xuICAgIH1cbiAgICBnZXRMYXN0SWQodW5pcXVlS2V5KSB7IHJldHVybiB0aGlzLl9sYXN0SWRzW3VuaXF1ZUtleV07IH1cbiAgICBfY2xlYW5VbmlxdWVLZXkoc3VmZml4KSB7XG4gICAgICAgIGlmICghc3VmZml4KSB7XG4gICAgICAgICAgICByZXR1cm4gXCJpZFwiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdWZmaXgucmVwbGFjZSgvLS9nLCBcIl9cIik7XG4gICAgfVxuICAgIF9nZXROdW1lcmljSWQobGFzdElkKSB7XG4gICAgICAgIGNvbnN0IHBpZWNlcyA9IGxhc3RJZC5zcGxpdChcIi1cIik7XG4gICAgICAgIGxldCBudW1lcmljSWQgPSBOYU47XG4gICAgICAgIGZvciAobGV0IHBjIG9mIHBpZWNlcykge1xuICAgICAgICAgICAgY29uc3QgcGFyc2VkUGllY2UgPSBwYXJzZUludChwYyk7XG4gICAgICAgICAgICBpZiAoIWlzTmFOKHBhcnNlZFBpZWNlKSkge1xuICAgICAgICAgICAgICAgIG51bWVyaWNJZCA9IHBhcnNlZFBpZWNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudW1lcmljSWQ7XG4gICAgfVxuICAgIGdlbmVyYXRlVW5pcXVlSWQodW5pcXVlS2V5LCBzdXBwbGVtZW50YWxTdWZmaXgpIHtcbiAgICAgICAgdW5pcXVlS2V5ID0gdGhpcy5fY2xlYW5VbmlxdWVLZXkodW5pcXVlS2V5KTtcbiAgICAgICAgY29uc3QgbmV4dElkID0gKHRoaXMuX2xhc3RJZHNbdW5pcXVlS2V5XSB8fCAwKSArIDE7XG4gICAgICAgIHRoaXMuX2xhc3RJZHNbdW5pcXVlS2V5XSA9IG5leHRJZDtcbiAgICAgICAgaWYgKHN1cHBsZW1lbnRhbFN1ZmZpeCkge1xuICAgICAgICAgICAgcmV0dXJuIGAke25leHRJZH0tJHtzdXBwbGVtZW50YWxTdWZmaXh9YDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBgJHtuZXh0SWR9YDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZWdpc3RlcklkKGlkVG9SZWdpc3RlciwgdW5pcXVlS2V5KSB7XG4gICAgICAgIGNvbnN0IGxhc3RJZCA9IHRoaXMuX2dldE51bWVyaWNJZChpZFRvUmVnaXN0ZXIpO1xuICAgICAgICBjb25zdCBrZXkgPSB0aGlzLl9jbGVhblVuaXF1ZUtleSh1bmlxdWVLZXkpO1xuICAgICAgICBpZiAoaXNOYU4obGFzdElkKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsYXN0SWQgPD0gdGhpcy5fbGFzdElkc1trZXldKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbGFzdElkc1trZXldID0gbGFzdElkO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmVzZXQodW5pcXVlS2V5KSB7XG4gICAgICAgIGNvbnN0IGtleSA9IHRoaXMuX2NsZWFuVW5pcXVlS2V5KHVuaXF1ZUtleSk7XG4gICAgICAgIHRoaXMuX2xhc3RJZHNba2V5XSA9IDA7XG4gICAgfVxufVxuZXhwb3J0cy5JZGVudGlmaWVyQXNzaWduZXIgPSBuZXcgX0lkZW50aWZpZXJBc3NpZ25lcigpO1xuZnVuY3Rpb24gZ2VuZXJhdGVVbmlxdWVJZCh1bmlxdWVLZXksIHN1cHBsZW1lbnRhbFN1ZmZpeCkge1xuICAgIHJldHVybiBleHBvcnRzLklkZW50aWZpZXJBc3NpZ25lci5nZW5lcmF0ZVVuaXF1ZUlkKHVuaXF1ZUtleSwgc3VwcGxlbWVudGFsU3VmZml4KTtcbn1cbmV4cG9ydHMuZ2VuZXJhdGVVbmlxdWVJZCA9IGdlbmVyYXRlVW5pcXVlSWQ7XG5mdW5jdGlvbiByZWdpc3RlclVuaXF1ZUlkKGxhc3RJZCwgdW5pcXVlS2V5KSB7XG4gICAgcmV0dXJuIHRoaXMuSWRlbnRpZmllckFzc2lnbmVyLnJlZ2lzdGVySWQobGFzdElkLCB1bmlxdWVLZXkpO1xufVxuZXhwb3J0cy5yZWdpc3RlclVuaXF1ZUlkID0gcmVnaXN0ZXJVbmlxdWVJZDtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgX2tleWVkTW9kZWxfMSA9IHJlcXVpcmUoXCIuL19rZXllZE1vZGVsXCIpO1xuY29uc3QgY29tcGFyYWJsZV8xID0gcmVxdWlyZShcIkB0b29sa2lwL2NvbXBhcmFibGVcIik7XG5jb25zdCBzaGFyZWRfdHlwZXNfMSA9IHJlcXVpcmUoXCJAdG9vbGtpcC9zaGFyZWQtdHlwZXNcIik7XG5jb25zdCBjb3JlXzEgPSByZXF1aXJlKFwiLi4vX3R5cGVndWFyZHMvY29yZVwiKTtcbmNsYXNzIF9LZXllZE1vZGVscyBleHRlbmRzIF9rZXllZE1vZGVsXzEuX0tleWVkTW9kZWwge1xuICAgIF9nZXRUeXBlKCkgeyByZXR1cm4gJ2FycmF5JzsgfVxuICAgIHJlbW92ZShrZXkpIHtcbiAgICAgICAgY29uc3Qgb3V0ID0gdGhpcy5nZXQoa2V5KTtcbiAgICAgICAgdGhpcy5faW5uZXJTZXQoe1xuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgdmFsdWU6IHVuZGVmaW5lZFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAgZmluZEluZGV4KHZhbCkge1xuICAgICAgICBsZXQgb3V0O1xuICAgICAgICB0aGlzLl9tYXAodGhpcy5faW5uZXJNb2RlbCwgKHYsIGtleSkgPT4ge1xuICAgICAgICAgICAgaWYgKGNvbXBhcmFibGVfMS5lcXVhbHModmFsLCBjb3JlXzEuaXNNb2RlbCh2KSA/IHYuZ2V0RGF0YSgpIDogdikpIHtcbiAgICAgICAgICAgICAgICBvdXQgPSBrZXk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICBjb250YWlucyh2YWwpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5maW5kSW5kZXgodmFsKTtcbiAgICAgICAgaWYgKHNoYXJlZF90eXBlc18xLmlzVW5kZWZpbmVkKGtleSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMuX2lubmVyU2V0RGF0YSh7XG4gICAgICAgICAgICBldmVudFR5cGU6ICdyZW1vdmUnLFxuICAgICAgICAgICAgdmFsdWU6IHRoaXMuX2dldERlZmF1bHRWYWx1ZXMoKVxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLl9LZXllZE1vZGVscyA9IF9LZXllZE1vZGVscztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgX21vZGVsXzEgPSByZXF1aXJlKFwiLi4vYWJzdHJhY3RDbGFzc2VzL19tb2RlbFwiKTtcbmNsYXNzIE1QcmltaXRpdmUgZXh0ZW5kcyBfbW9kZWxfMS5fTW9kZWwge1xuICAgIF9nZXREZWZhdWx0VmFsdWVzKCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbn1cbmV4cG9ydHMuTVByaW1pdGl2ZSA9IE1QcmltaXRpdmU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IF9tb2RlbF8xID0gcmVxdWlyZShcIi4uL2Fic3RyYWN0Q2xhc3Nlcy9fbW9kZWxcIik7XG5jb25zdCBkYXRlVHJhbnNmb3Jtc18xID0gcmVxdWlyZShcIi4uL3RyYW5zZm9ybXMvZGF0ZVRyYW5zZm9ybXNcIik7XG5jbGFzcyBNRGF0ZSBleHRlbmRzIF9tb2RlbF8xLl9Nb2RlbCB7XG4gICAgX2dldEFwcGxpY2FibGVUcmFuc2Zvcm1zKCkge1xuICAgICAgICBjb25zdCB0eCA9IHN1cGVyLl9nZXRBcHBsaWNhYmxlVHJhbnNmb3JtcygpO1xuICAgICAgICBpZiAoIXR4KSB7XG4gICAgICAgICAgICByZXR1cm4gZGF0ZVRyYW5zZm9ybXNfMS5EZWZhdWx0RGF0ZVRyYW5zZm9ybTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHg7XG4gICAgfVxuICAgIF9nZXREZWZhdWx0VmFsdWVzKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZ2V0RGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmdldERhdGEoKTtcbiAgICB9XG59XG5leHBvcnRzLk1EYXRlID0gTURhdGU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IF9tb2RlbF8xID0gcmVxdWlyZShcIi4uL2Fic3RyYWN0Q2xhc3Nlcy9fbW9kZWxcIik7XG5jb25zdCBjb3JlXzEgPSByZXF1aXJlKFwiLi4vX3R5cGVndWFyZHMvY29yZVwiKTtcbmNsYXNzIE1vZGVsIGV4dGVuZHMgX21vZGVsXzEuX01vZGVsIHtcbiAgICBfZ2V0RGVmYXVsdFZhbHVlcygpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfVxuICAgIHNldERhdGEoZGF0YSkge1xuICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IHRoaXMuX3dyYXBJbk1vZGVsKGRhdGEsIHRoaXMuX3RyYW5zZm9ybXMpO1xuICAgICAgICB0aGlzLl9pbm5lclNldERhdGEoeyB2YWx1ZTogbmV3VmFsdWUgfSk7XG4gICAgfVxuICAgIGdldERhdGEoKSB7XG4gICAgICAgIGNvbnN0IGNsb25lZE1vZGVsID0gdGhpcy5faW5uZXJHZXREYXRhKCk7XG4gICAgICAgIHJldHVybiBjb3JlXzEuaXNNb2RlbChjbG9uZWRNb2RlbCkgPyBjbG9uZWRNb2RlbC5nZXREYXRhKCkgOiBjbG9uZWRNb2RlbDtcbiAgICB9XG4gICAgZ2V0TW9kZWwoYXNUeXBlID0gJ28nKSB7XG4gICAgICAgIGlmICghY29yZV8xLmlzTW9kZWwodGhpcy5faW5uZXJNb2RlbCkpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2lubmVyTW9kZWw7XG4gICAgfVxufVxuZXhwb3J0cy5Nb2RlbCA9IE1vZGVsO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBhcnJheU1vZGVsXzEgPSByZXF1aXJlKFwiLi9hcnJheU1vZGVsXCIpO1xuY2xhc3MgTVNldCBleHRlbmRzIGFycmF5TW9kZWxfMS5NQXJyYXkge1xuICAgIGFkZCh2YWwpIHtcbiAgICAgICAgaWYgKHRoaXMuY29udGFpbnModmFsKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlci5hZGQodmFsKTtcbiAgICB9XG59XG5leHBvcnRzLk1TZXQgPSBNU2V0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBtYW5hZ2Vyc18xID0gcmVxdWlyZShcIkB0b29sa2lwL21hbmFnZXJzXCIpO1xuY29uc3QgYWJzdHJhY3RDbGFzc2VzXzEgPSByZXF1aXJlKFwiLi4vYWJzdHJhY3RDbGFzc2VzXCIpO1xuY29uc3Qgb2JqZWN0X2hlbHBlcnNfMSA9IHJlcXVpcmUoXCJAdG9vbGtpcC9vYmplY3QtaGVscGVyc1wiKTtcbmNvbnN0IHNoYXJlZF90eXBlc18xID0gcmVxdWlyZShcIkB0b29sa2lwL3NoYXJlZC10eXBlc1wiKTtcbmNsYXNzIE1NYW5hZ2VyIGV4dGVuZHMgYWJzdHJhY3RDbGFzc2VzXzEuX0tleWVkTW9kZWxzIHtcbiAgICBfZ2V0RGVmYXVsdFZhbHVlcygpIHsgcmV0dXJuIG5ldyBtYW5hZ2Vyc18xLkRhdGFNYW5hZ2VyKCk7IH1cbiAgICBfZ2V0VmFsdWUob3V0cHV0LCBrZXkpIHtcbiAgICAgICAgcmV0dXJuIG91dHB1dC5nZXQoa2V5KTtcbiAgICB9XG4gICAgX2lubmVyR2V0RGF0YSgpIHtcbiAgICAgICAgY29uc3Qgb3V0ID0gc3VwZXIuX2lubmVyR2V0RGF0YSgpO1xuICAgICAgICByZXR1cm4gb3V0LnRvQXJyYXkoKTtcbiAgICB9XG4gICAgX2lubmVyRXhwb3J0KCkge1xuICAgICAgICBjb25zdCBvdXQgPSBzdXBlci5faW5uZXJFeHBvcnQoKTtcbiAgICAgICAgcmV0dXJuIG91dC50b0FycmF5KCk7XG4gICAgfVxuICAgIHRvRGF0YU1hbmFnZXIoKSB7XG4gICAgICAgIHJldHVybiBzdXBlci5faW5uZXJHZXREYXRhKCk7XG4gICAgfVxuICAgIHRvQXJyYXkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbm5lckdldERhdGEoKTtcbiAgICB9XG4gICAgdG9EaWN0aW9uYXJ5KCkge1xuICAgICAgICBjb25zdCBtYW5hZ2VyID0gdGhpcy50b0RhdGFNYW5hZ2VyKCk7XG4gICAgICAgIHJldHVybiBtYW5hZ2VyLnRvRGljdGlvbmFyeSgpO1xuICAgIH1cbiAgICBfc2V0VmFsdWUob3V0cHV0LCBrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc1JlbW92YWwob3V0cHV0LCBrZXksIHZhbHVlKSkge1xuICAgICAgICAgICAgb3V0cHV0LnJlbW92ZShrZXkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuX2lzUmVwbGFjZW1lbnQob3V0cHV0LCBrZXkpKSB7XG4gICAgICAgICAgICBvdXRwdXQucmVtb3ZlKGtleSk7XG4gICAgICAgICAgICBvdXRwdXQuYWRkKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghc2hhcmVkX3R5cGVzXzEuaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgICBvdXRwdXQuYWRkKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfaXNSZW1vdmFsKG91dHB1dCwga2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAoIW1hbmFnZXJzXzEuaXNEYXRhTWFuYWdlcihvdXRwdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFvdXRwdXQuY29udGFpbnMoa2V5KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaGFyZWRfdHlwZXNfMS5pc1VuZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaGFyZWRfdHlwZXNfMS5pc1VuZGVmaW5lZCh2YWx1ZS5nZXREYXRhKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIF9pc1JlcGxhY2VtZW50KG91dHB1dCwga2V5KSB7XG4gICAgICAgIGlmICghbWFuYWdlcnNfMS5pc0RhdGFNYW5hZ2VyKG91dHB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW91dHB1dC5jb250YWlucyhrZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIF9tYXAoZGF0YSwgbWFwRnVuYykge1xuICAgICAgICBpZiAobWFuYWdlcnNfMS5pc0RhdGFNYW5hZ2VyKGRhdGEpKSB7XG4gICAgICAgICAgICBkYXRhLm1hcChtYXBGdW5jKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzaGFyZWRfdHlwZXNfMS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgICAgICBvYmplY3RfaGVscGVyc18xLm1hcChkYXRhLCAodmFsLCBpZHgpID0+IG1hcEZ1bmModmFsLCB2YWwuaWQpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9iamVjdF9oZWxwZXJzXzEubWFwKGRhdGEsIG1hcEZ1bmMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFkZChpdGVtKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbnRhaW5zKGl0ZW0pKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faW5uZXJTZXQoe1xuICAgICAgICAgICAga2V5OiBpdGVtLmlkLFxuICAgICAgICAgICAgdmFsdWU6IGl0ZW0sXG4gICAgICAgICAgICBldmVudFR5cGU6ICdhZGQnXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZ2V0SW5kZXgoaXRlbSkge1xuICAgICAgICBpZiAodGhpcy5faW5uZXJNb2RlbC5jb250YWlucyhpdGVtLmlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW0uaWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG59XG5leHBvcnRzLk1NYW5hZ2VyID0gTU1hbmFnZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XG59XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9hc3luY01hbmFnZXJcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vZGF0YU1hbmFnZXJcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vX3R5cGVndWFyZHNcIikpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGRhdGFNYW5hZ2VyXzEgPSByZXF1aXJlKFwiLi9kYXRhTWFuYWdlclwiKTtcbmNsYXNzIEFzeW5jTWFuYWdlciBleHRlbmRzIGRhdGFNYW5hZ2VyXzEuRGF0YU1hbmFnZXIge1xuICAgIGNvbnN0cnVjdG9yKGxvYWQsIGNyZWF0ZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl9pbm5lckxvYWQgPSBsb2FkO1xuICAgICAgICB0aGlzLl9pbm5lckNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAgICAgdGhpcy5faW5GbGlnaHQgPSB7fTtcbiAgICB9XG4gICAgX2NyZWF0ZUFuZEFkZERlZmF1bHQoZCkge1xuICAgICAgICBsZXQgbW9kZWwgPSB0aGlzLmNyZWF0ZShkKTtcbiAgICAgICAgdGhpcy5hZGQobW9kZWwpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZ2V0T3JDcmVhdGUoaWQpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGlmICghaWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJubyBJRCBwcm92aWRlZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBkYXR1bSA9IHRoaXMuZ2V0KGlkKTtcbiAgICAgICAgICAgIGlmIChkYXR1bSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXR1bTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLl9pbkZsaWdodFtpZF0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faW5GbGlnaHRbaWRdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5faW5GbGlnaHRbaWRdID0gdGhpcy5fbG9hZEFuZENyZWF0ZShpZCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faW5GbGlnaHRbaWRdO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgX2xvYWRBbmRDcmVhdGUoaWQpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGxldCBkID0geWllbGQgdGhpcy5sb2FkKGlkKTtcbiAgICAgICAgICAgIGlmICghZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vIGRhdGEgZm91bmQgZm9yIGlkICdcIiArIGlkICsgXCInXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgO1xuICAgICAgICAgICAgbGV0IG1vZGVsID0gdGhpcy5jcmVhdGUoZCk7XG4gICAgICAgICAgICBsZXQgZGF0dW0gPSBtb2RlbDtcbiAgICAgICAgICAgIHRoaXMuYWRkKGRhdHVtKTtcbiAgICAgICAgICAgIHJldHVybiBkYXR1bTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNyZWF0ZShkKSB7XG4gICAgICAgIGlmICh0aGlzLl9pbm5lckNyZWF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lubmVyQ3JlYXRlKGQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgIH1cbiAgICBsb2FkKGlkKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2lubmVyTG9hZCkge1xuICAgICAgICAgICAgICAgIFByb21pc2UucmVqZWN0KCdpbm5lckxvYWQgbm90IGRlZmluZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pbm5lckxvYWQoaWQpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLkFzeW5jTWFuYWdlciA9IEFzeW5jTWFuYWdlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgZGF0YU1hbmFnZXJfMSA9IHJlcXVpcmUoXCIuL2RhdGFNYW5hZ2VyXCIpO1xuZnVuY3Rpb24gaXNEYXRhTWFuYWdlcih0ZXN0KSB7XG4gICAgcmV0dXJuIHRlc3QgaW5zdGFuY2VvZiBkYXRhTWFuYWdlcl8xLkRhdGFNYW5hZ2VyO1xufVxuZXhwb3J0cy5pc0RhdGFNYW5hZ2VyID0gaXNEYXRhTWFuYWdlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gX19leHBvcnQobSkge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcbn1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL21vZGVsRmFjdG9yeVwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9zZWxlY3RvcnNcIikpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnQocmVxdWlyZShcIi4vbW9kZWxUcmFuc2Zvcm1zXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL2RhdGVUcmFuc2Zvcm1zXCIpKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgZGF0ZVRyYW5zZm9ybXNfMSA9IHJlcXVpcmUoXCIuL2RhdGVUcmFuc2Zvcm1zXCIpO1xuY29uc3QgcHJpbWl0aXZlTW9kZWxzXzEgPSByZXF1aXJlKFwiLi4vcHJpbWl0aXZlTW9kZWxzXCIpO1xuZXhwb3J0cy5jcmVhdGVNb2RlbFRyYW5zZm9ybSA9IChjdG9yKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW5jb21pbmc6IChkYXRhLCBrZXksIHBhcmVudE1vZGVsKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBvdXQgPSBuZXcgY3RvcihkYXRhKTtcbiAgICAgICAgICAgIGlmIChwYXJlbnRNb2RlbCkge1xuICAgICAgICAgICAgICAgIHBhcmVudE1vZGVsLmFkZE1vZGVsTGlzdGVuZXIob3V0LCBrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG91dDtcbiAgICAgICAgfVxuICAgIH07XG59O1xuZXhwb3J0cy5jcmVhdGVNb2RlbERhdGVUcmFuc2Zvcm0gPSAodHggPSBkYXRlVHJhbnNmb3Jtc18xLkRlZmF1bHREYXRlVHJhbnNmb3JtKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW5jb21pbmc6IChkYXRhLCBrZXksIHBhcmVudE1vZGVsKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBvdXQgPSBuZXcgcHJpbWl0aXZlTW9kZWxzXzEuTURhdGUoZGF0YSwgeyBcIl9cIjogdHggfSk7XG4gICAgICAgICAgICBpZiAocGFyZW50TW9kZWwpIHtcbiAgICAgICAgICAgICAgICBwYXJlbnRNb2RlbC5hZGRNb2RlbExpc3RlbmVyKG91dCwga2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvdXQ7XG4gICAgICAgIH0sXG4gICAgfTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGlkZW50aWZpYWJsZV8xID0gcmVxdWlyZShcIkB0b29sa2lwL2lkZW50aWZpYWJsZVwiKTtcbmNvbnN0IGNyZWF0ZUVsZW1lbnRfMSA9IHJlcXVpcmUoXCIuL2NyZWF0ZUVsZW1lbnRcIik7XG5mdW5jdGlvbiBjcmVhdGVJbnB1dChkZWYsIGtleWVkRWxlbXMpIHtcbiAgICBjb25zdCBjb252ZXJ0ZWREZWYgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGRlZiksIHsgdHlwZTogJ2lucHV0JywgYXR0cjogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBkZWYuYXR0ciksIHsgdmFsdWU6IGRlZi52YWx1ZSwgdHlwZTogZGVmLnR5cGUgfSksIGV2ZW50TGlzdGVuZXJzOiB7XG4gICAgICAgICAgICBjaGFuZ2U6IGRlZi5vbkNoYW5nZVxuICAgICAgICB9IH0pO1xuICAgIHJldHVybiBjcmVhdGVFbGVtZW50XzEuY3JlYXRlRWxlbWVudChjb252ZXJ0ZWREZWYsIGtleWVkRWxlbXMpO1xufVxuZXhwb3J0cy5jcmVhdGVJbnB1dCA9IGNyZWF0ZUlucHV0O1xuZnVuY3Rpb24gY3JlYXRlTGFiZWxlZElucHV0KGxibERlZiwgaW5wdXREZWYsIGtleWVkRWxlbXMpIHtcbiAgICBpZiAoIWlucHV0RGVmLmlkKSB7XG4gICAgICAgIGNvbnN0IGlkID0gaWRlbnRpZmlhYmxlXzEuSWRlbnRpZmllckFzc2lnbmVyLmdlbmVyYXRlVW5pcXVlSWQoXCJpbnB1dFwiLCBcImdlbklucHV0XCIpO1xuICAgICAgICBpbnB1dERlZi5pZCA9IGlkO1xuICAgICAgICBpbnB1dERlZi5hdHRyID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBpbnB1dERlZi5hdHRyKSwgeyBuYW1lOiBpZCB9KTtcbiAgICB9XG4gICAgbGJsRGVmLnR5cGUgPSAnbGFiZWwnO1xuICAgIGxibERlZi5hdHRyID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBsYmxEZWYuYXR0ciksIHsgZm9yOiBpbnB1dERlZi5pZCB9KTtcbiAgICByZXR1cm4gW1xuICAgICAgICBjcmVhdGVFbGVtZW50XzEuY3JlYXRlRWxlbWVudChsYmxEZWYsIGtleWVkRWxlbXMpLFxuICAgICAgICBjcmVhdGVJbnB1dChpbnB1dERlZiwga2V5ZWRFbGVtcylcbiAgICBdO1xufVxuZXhwb3J0cy5jcmVhdGVMYWJlbGVkSW5wdXQgPSBjcmVhdGVMYWJlbGVkSW5wdXQ7XG5mdW5jdGlvbiBjcmVhdGVCdXR0b24oZGVmLCBrZXllZEVsZW1zKSB7XG4gICAgY29uc3QgY29udmVydGVkRGVmID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBkZWYpLCB7IHR5cGU6ICdidXR0b24nLCBldmVudExpc3RlbmVyczoge1xuICAgICAgICAgICAgY2xpY2s6IGRlZi5vbkNsaWNrXG4gICAgICAgIH0sIGNvbnRlbnQ6IGRlZi5sYWJlbCB9KTtcbiAgICByZXR1cm4gY3JlYXRlRWxlbWVudF8xLmNyZWF0ZUVsZW1lbnQoY29udmVydGVkRGVmLCBrZXllZEVsZW1zKTtcbn1cbmV4cG9ydHMuY3JlYXRlQnV0dG9uID0gY3JlYXRlQnV0dG9uO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnQocmVxdWlyZShcIi4vX3R5cGVHdWFyZHNcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vdW5pcXVlSWRcIikpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzSWRlbnRpZmlhYmxlID0gKHRlc3QpID0+IHtcbiAgICBpZiAodGVzdC5pZCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY2xhc3MgX0lkZW50aWZpZXJBc3NpZ25lciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuX2xhc3RJZHMgPSB7IFwiaWRcIjogMCB9O1xuICAgIH1cbiAgICBnZXRMYXN0SWQodW5pcXVlS2V5KSB7IHJldHVybiB0aGlzLl9sYXN0SWRzW3VuaXF1ZUtleV07IH1cbiAgICBfY2xlYW5VbmlxdWVLZXkoc3VmZml4KSB7XG4gICAgICAgIGlmICghc3VmZml4KSB7XG4gICAgICAgICAgICByZXR1cm4gXCJpZFwiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdWZmaXgucmVwbGFjZSgvLS9nLCBcIl9cIik7XG4gICAgfVxuICAgIF9nZXROdW1lcmljSWQobGFzdElkKSB7XG4gICAgICAgIGNvbnN0IHBpZWNlcyA9IGxhc3RJZC5zcGxpdChcIi1cIik7XG4gICAgICAgIGxldCBudW1lcmljSWQgPSBOYU47XG4gICAgICAgIGZvciAobGV0IHBjIG9mIHBpZWNlcykge1xuICAgICAgICAgICAgY29uc3QgcGFyc2VkUGllY2UgPSBwYXJzZUludChwYyk7XG4gICAgICAgICAgICBpZiAoIWlzTmFOKHBhcnNlZFBpZWNlKSkge1xuICAgICAgICAgICAgICAgIG51bWVyaWNJZCA9IHBhcnNlZFBpZWNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudW1lcmljSWQ7XG4gICAgfVxuICAgIGdlbmVyYXRlVW5pcXVlSWQodW5pcXVlS2V5LCBzdXBwbGVtZW50YWxTdWZmaXgpIHtcbiAgICAgICAgdW5pcXVlS2V5ID0gdGhpcy5fY2xlYW5VbmlxdWVLZXkodW5pcXVlS2V5KTtcbiAgICAgICAgY29uc3QgbmV4dElkID0gKHRoaXMuX2xhc3RJZHNbdW5pcXVlS2V5XSB8fCAwKSArIDE7XG4gICAgICAgIHRoaXMuX2xhc3RJZHNbdW5pcXVlS2V5XSA9IG5leHRJZDtcbiAgICAgICAgaWYgKHN1cHBsZW1lbnRhbFN1ZmZpeCkge1xuICAgICAgICAgICAgcmV0dXJuIGAke25leHRJZH0tJHtzdXBwbGVtZW50YWxTdWZmaXh9YDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBgJHtuZXh0SWR9YDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZWdpc3RlcklkKGlkVG9SZWdpc3RlciwgdW5pcXVlS2V5KSB7XG4gICAgICAgIGNvbnN0IGxhc3RJZCA9IHRoaXMuX2dldE51bWVyaWNJZChpZFRvUmVnaXN0ZXIpO1xuICAgICAgICBjb25zdCBrZXkgPSB0aGlzLl9jbGVhblVuaXF1ZUtleSh1bmlxdWVLZXkpO1xuICAgICAgICBpZiAoaXNOYU4obGFzdElkKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsYXN0SWQgPD0gdGhpcy5fbGFzdElkc1trZXldKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbGFzdElkc1trZXldID0gbGFzdElkO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmVzZXQodW5pcXVlS2V5KSB7XG4gICAgICAgIGNvbnN0IGtleSA9IHRoaXMuX2NsZWFuVW5pcXVlS2V5KHVuaXF1ZUtleSk7XG4gICAgICAgIHRoaXMuX2xhc3RJZHNba2V5XSA9IDA7XG4gICAgfVxufVxuZXhwb3J0cy5JZGVudGlmaWVyQXNzaWduZXIgPSBuZXcgX0lkZW50aWZpZXJBc3NpZ25lcigpO1xuZnVuY3Rpb24gZ2VuZXJhdGVVbmlxdWVJZCh1bmlxdWVLZXksIHN1cHBsZW1lbnRhbFN1ZmZpeCkge1xuICAgIHJldHVybiBleHBvcnRzLklkZW50aWZpZXJBc3NpZ25lci5nZW5lcmF0ZVVuaXF1ZUlkKHVuaXF1ZUtleSwgc3VwcGxlbWVudGFsU3VmZml4KTtcbn1cbmV4cG9ydHMuZ2VuZXJhdGVVbmlxdWVJZCA9IGdlbmVyYXRlVW5pcXVlSWQ7XG5mdW5jdGlvbiByZWdpc3RlclVuaXF1ZUlkKGxhc3RJZCwgdW5pcXVlS2V5KSB7XG4gICAgcmV0dXJuIHRoaXMuSWRlbnRpZmllckFzc2lnbmVyLnJlZ2lzdGVySWQobGFzdElkLCB1bmlxdWVLZXkpO1xufVxuZXhwb3J0cy5yZWdpc3RlclVuaXF1ZUlkID0gcmVnaXN0ZXJVbmlxdWVJZDtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY3JlYXRlRWxlbWVudF8xID0gcmVxdWlyZShcIi4vY3JlYXRlRWxlbWVudFwiKTtcbmZ1bmN0aW9uIGNyZWF0ZVRhYmxlKHRhYmxlSUQsIHRhYmxlQ2xhc3MsIGVsZW1lbnRzLCByb3dOdW0sIGNvbE51bSkge1xuICAgIGxldCB0Ymw7XG4gICAgbGV0IHJvdztcbiAgICBsZXQgY2VsbDtcbiAgICBsZXQgZWxlbTtcbiAgICBsZXQgcklkeDtcbiAgICBsZXQgY0lkeDtcbiAgICBpZiAoIXJvd051bSkge1xuICAgICAgICByb3dOdW0gPSAoZWxlbWVudHMgJiYgZWxlbWVudHMubGVuZ3RoKSB8fCAwO1xuICAgIH1cbiAgICB0YmwgPSBjcmVhdGVFbGVtZW50XzEuY3JlYXRlRWxlbWVudCh7XG4gICAgICAgIHR5cGU6IFwidGFibGVcIixcbiAgICAgICAgY2xzOiB0YWJsZUNsYXNzXG4gICAgfSk7XG4gICAgZm9yIChySWR4ID0gMDsgcklkeCA8IHJvd051bTsgcklkeCArPSAxKSB7XG4gICAgICAgIGlmICghY29sTnVtKSB7XG4gICAgICAgICAgICBjb2xOdW0gPSBlbGVtZW50c1tySWR4XS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgcm93ID0gdGJsLmluc2VydFJvdygtMSk7XG4gICAgICAgIGZvciAoY0lkeCA9IDA7IGNJZHggPCBjb2xOdW07IGNJZHggKz0gMSkge1xuICAgICAgICAgICAgZWxlbSA9IGVsZW1lbnRzW3JJZHhdW2NJZHhdO1xuICAgICAgICAgICAgY2VsbCA9IHJvdy5pbnNlcnRDZWxsKC0xKTtcbiAgICAgICAgICAgIHByb2Nlc3NDZWxsQ29udGVudHMoZWxlbSwgY2VsbCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRibDtcbn1cbmV4cG9ydHMuY3JlYXRlVGFibGUgPSBjcmVhdGVUYWJsZTtcbmZ1bmN0aW9uIHByb2Nlc3NDZWxsQ29udGVudHMoZGF0YSwgY2VsbCkge1xuICAgIDtcbiAgICBsZXQgY29udGVudDtcbiAgICBsZXQga2V5O1xuICAgIGlmICghZGF0YSkge1xuICAgICAgICByZXR1cm4gY2VsbDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBkYXRhID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgY2VsbC5pbm5lckhUTUwgPSBkYXRhO1xuICAgIH1cbiAgICBlbHNlIGlmIChkYXRhLmFwcGVuZENoaWxkKSB7XG4gICAgICAgIGNlbGwuYXBwZW5kQ2hpbGQoZGF0YSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoZGF0YS5jcmVhdGUpIHtcbiAgICAgICAgICAgIGNvbnRlbnQgPSBjcmVhdGVFbGVtZW50XzEuY3JlYXRlRWxlbWVudChkYXRhLmNyZWF0ZSk7XG4gICAgICAgICAgICBjZWxsLmFwcGVuZENoaWxkKGNvbnRlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY2VsbC5pbm5lckhUTUwgPSBkYXRhLmNvbnRlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChrZXkgaW4gZGF0YS5hdHRyKSB7XG4gICAgICAgICAgICBpZiAoZGF0YS5hdHRyLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICBjZWxsLnNldEF0dHJpYnV0ZShrZXksIGRhdGEuYXR0cltrZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2VsbDtcbn1cbmV4cG9ydHMucHJvY2Vzc0NlbGxDb250ZW50cyA9IHByb2Nlc3NDZWxsQ29udGVudHM7XG47XG5mdW5jdGlvbiBhZGRSb3codGFibGUsIGVsZW1lbnRzLCBpZHgsIGNvbE51bSkge1xuICAgIDtcbiAgICBsZXQgcm93O1xuICAgIGxldCBjZWxsO1xuICAgIGxldCBjSWR4O1xuICAgIGxldCBkYXRhO1xuICAgIGlmICghaWR4ICYmIChpZHggIT09IDApKSB7XG4gICAgICAgIGlkeCA9IC0xO1xuICAgIH1cbiAgICBpZiAoIWNvbE51bSAmJiBjb2xOdW0gIT09IDApIHtcbiAgICAgICAgY29sTnVtID0gZWxlbWVudHMubGVuZ3RoO1xuICAgIH1cbiAgICBpZiAoIXRhYmxlKVxuICAgICAgICByZXR1cm47XG4gICAgaWYgKCF0YWJsZS5pbnNlcnRSb3cpXG4gICAgICAgIHJldHVybjtcbiAgICByb3cgPSB0YWJsZS5pbnNlcnRSb3coaWR4KTtcbiAgICBmb3IgKGNJZHggPSAwOyBjSWR4IDwgY29sTnVtOyBjSWR4ICs9IDEpIHtcbiAgICAgICAgY2VsbCA9IHJvdy5pbnNlcnRDZWxsKC0xKTtcbiAgICAgICAgZGF0YSA9IGVsZW1lbnRzW2NJZHhdIHx8IFwiXCI7XG4gICAgICAgIHByb2Nlc3NDZWxsQ29udGVudHMoZGF0YSwgY2VsbCk7XG4gICAgfVxuICAgIHJldHVybiByb3c7XG59XG5leHBvcnRzLmFkZFJvdyA9IGFkZFJvdztcbjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wYXJzZUZpbGUgPSB2b2lkIDA7XG5jb25zdCBtYXRjaGVyXzEgPSByZXF1aXJlKFwiLi9tYXRjaGVyXCIpO1xuY29uc3Qgb2JqZWN0X2hlbHBlcnNfMSA9IHJlcXVpcmUoXCJAdG9vbGtpcC9vYmplY3QtaGVscGVyc1wiKTtcbmV4cG9ydHMucGFyc2VGaWxlID0gKGZpbGVDb250ZW50cykgPT4ge1xuICAgIGNvbnN0IGxpbmVzID0gZ2V0TGluZXNJbkZpbGUoZmlsZUNvbnRlbnRzKTtcbiAgICBjb25zdCBwcm9wcyA9IHtcbiAgICAgICAgbGluZTogJycsXG4gICAgICAgIHN0YXRlOiB7XG4gICAgICAgICAgICBjb21wZXRlbmNpZXM6IHt9LFxuICAgICAgICAgICAgbGV2ZWxzOiB7fSxcbiAgICAgICAgICAgIGNhdGVnb3JpZXM6IHt9XG4gICAgICAgIH0sXG4gICAgICAgIGxhc3RMZXZlbDogbnVsbCxcbiAgICAgICAgbGFzdENhdGVnb3J5OiBudWxsLFxuICAgICAgICBsZXZlbE9yZGVyOiBbXSxcbiAgICAgICAgY2F0ZWdvcnlPcmRlcjogW11cbiAgICB9O1xuICAgIGZvciAobGV0IGxpbmUgb2YgbGluZXMpIHtcbiAgICAgICAgcHJvcHMubGluZSA9IGxpbmU7XG4gICAgICAgIHBhcnNlTGluZShwcm9wcyk7XG4gICAgfVxuICAgIC8vY29uc29sZS5sb2coY29tcGV0ZW5jaWVzKTtcbiAgICBjb25zdCBvdXQgPSB7XG4gICAgICAgIGxldmVsczogcHJvcHMubGV2ZWxPcmRlcixcbiAgICAgICAgY2F0ZWdvcmllczogcHJvcHMuY2F0ZWdvcnlPcmRlcixcbiAgICAgICAgY29tcGV0ZW5jaWVzOiBvYmplY3RfaGVscGVyc18xLm1hcChwcm9wcy5zdGF0ZS5jb21wZXRlbmNpZXMsIChjKSA9PiBjKVxuICAgIH07XG4gICAgcmV0dXJuIG91dDtcbn07XG5jb25zdCBnZXRMaW5lc0luRmlsZSA9IChmaWxlQ29udGVudHMpID0+IHtcbiAgICByZXR1cm4gZmlsZUNvbnRlbnRzLnNwbGl0KCdcXG4nKTtcbn07XG4vKipcbiAqIHBhcnNlTGluZVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogaGFuZGxlIGdldHRpbmcgY29udGVudCBvdXQgb2YgYSBsaW5lXG4gKi9cbmNvbnN0IHBhcnNlTGluZSA9IChwcm9wcykgPT4ge1xuICAgIGNvbnN0IHsgbGluZSwgc3RhdGUgfSA9IHByb3BzO1xuICAgIC8vIG5vdGhpbmcgdG8gZG8gaWYgd2UgYXJlbid0IHlldCBvbiB0aGUgY29tcGV0ZW5jaWVzXG4gICAgY29uc3QgbGV2ZWxIZWFkZXIgPSBtYXRjaGVyXzEubWF0Y2hMZXZlbChsaW5lKTtcbiAgICBpZiAoIXByb3BzLmxhc3RMZXZlbCAmJiAhbGV2ZWxIZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyByZXNldCBpZiB0aGlzIGlzIGEgaGVhZGVyIHRoYXQgZG9lc24ndCBtZWV0IGNyaXRlcmlhXG4gICAgaWYgKHByb3BzLmxhc3RMZXZlbCAmJiBtYXRjaGVyXzEuaXNIMihsaW5lKSAmJiAhbGV2ZWxIZWFkZXIpIHtcbiAgICAgICAgcHJvcHMubGFzdExldmVsID0gbnVsbDtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAobGV2ZWxIZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlTGV2ZWwocHJvcHMsIGxldmVsSGVhZGVyKTtcbiAgICB9XG4gICAgLy8gaWYgdGhpcyBpcyBhIGNhdGVnb3J5LCBzZXQgdGhhdCB2YWx1ZSBoZXJlXG4gICAgY29uc3QgY2F0ZWdvcnlIZWFkZXIgPSBtYXRjaGVyXzEubWF0Y2hDYXRlZ29yeShsaW5lKTtcbiAgICBpZiAoY2F0ZWdvcnlIZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlQ2F0ZWdvcnkocHJvcHMsIGNhdGVnb3J5SGVhZGVyLCBsZXZlbEhlYWRlcik7XG4gICAgfVxuICAgIC8vIGlmIHRoaXMgaXMgYSBjb21wZXRlbmN5LCBjcmVhdGUgaXRcbiAgICBjb25zdCBjb21wZXRlbmN5ID0gbWF0Y2hlcl8xLm1hdGNoQ29tcGV0ZW5jeShsaW5lKTtcbiAgICBpZiAoY29tcGV0ZW5jeSkge1xuICAgICAgICByZXR1cm4gcGFyc2VDb21wZXRlbmN5KGNvbXBldGVuY3ksIHByb3BzKTtcbiAgICB9XG59O1xuY29uc3QgcGFyc2VDYXRlZ29yeSA9IChwcm9wcywgY2F0ZWdvcnlIZWFkZXIsIGxldmVsSGVhZGVyKSA9PiB7XG4gICAgY29uc3QgeyBzdGF0ZSB9ID0gcHJvcHM7XG4gICAgcHJvcHMubGFzdENhdGVnb3J5ID0gY2F0ZWdvcnlIZWFkZXI7XG4gICAgaWYgKCFzdGF0ZS5jYXRlZ29yaWVzW2NhdGVnb3J5SGVhZGVyXSkge1xuICAgICAgICBzdGF0ZS5jYXRlZ29yaWVzW2NhdGVnb3J5SGVhZGVyXSA9IDA7XG4gICAgICAgIHByb3BzLmNhdGVnb3J5T3JkZXIucHVzaChjYXRlZ29yeUhlYWRlcik7XG4gICAgfVxuICAgIHN0YXRlLmNhdGVnb3JpZXNbY2F0ZWdvcnlIZWFkZXJdICs9IDE7XG4gICAgcmV0dXJuO1xufTtcbmNvbnN0IHBhcnNlTGV2ZWwgPSAocHJvcHMsIGxldmVsSGVhZGVyKSA9PiB7XG4gICAgY29uc3QgeyBzdGF0ZSB9ID0gcHJvcHM7XG4gICAgcHJvcHMubGFzdExldmVsID0gbGV2ZWxIZWFkZXI7XG4gICAgaWYgKCFzdGF0ZS5sZXZlbHNbbGV2ZWxIZWFkZXJdKSB7XG4gICAgICAgIHN0YXRlLmxldmVsc1tsZXZlbEhlYWRlcl0gPSAwO1xuICAgICAgICBwcm9wcy5sZXZlbE9yZGVyLnB1c2gobGV2ZWxIZWFkZXIpO1xuICAgIH1cbiAgICBzdGF0ZS5sZXZlbHNbbGV2ZWxIZWFkZXJdICs9IDE7XG4gICAgcmV0dXJuO1xufTtcbmNvbnN0IHBhcnNlQ29tcGV0ZW5jeSA9IChjb21wZXRlbmN5LCBwcm9wcykgPT4ge1xuICAgIGNvbnN0IHsgc3RhdGUgfSA9IHByb3BzO1xuICAgIGlmIChzdGF0ZS5jb21wZXRlbmNpZXNbY29tcGV0ZW5jeV0pIHtcbiAgICAgICAgc3RhdGUuY29tcGV0ZW5jaWVzW2NvbXBldGVuY3ldLmxldmVscy5wdXNoKHByb3BzLmxhc3RMZXZlbCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzdGF0ZS5jb21wZXRlbmNpZXNbY29tcGV0ZW5jeV0gPSB7XG4gICAgICAgICAgICBpZDogY29tcGV0ZW5jeSxcbiAgICAgICAgICAgIG5hbWU6IGNvbXBldGVuY3ksXG4gICAgICAgICAgICBsZXZlbHM6IFtwcm9wcy5sYXN0TGV2ZWxdLFxuICAgICAgICAgICAgY2F0ZWdvcnk6IHByb3BzLmxhc3RDYXRlZ29yeVxuICAgICAgICB9O1xuICAgIH1cbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNIMiA9IGV4cG9ydHMubWF0Y2hDb21wZXRlbmN5ID0gZXhwb3J0cy5tYXRjaENhdGVnb3J5ID0gZXhwb3J0cy5tYXRjaExldmVsID0gdm9pZCAwO1xuY29uc3QgcHJpbWl0aXZlX2hlbHBlcnNfMSA9IHJlcXVpcmUoXCJAdG9vbGtpcC9wcmltaXRpdmUtaGVscGVyc1wiKTtcbmNvbnN0IExFVkVMX1JFR0VYID0gL15cXHMqPyMjXFxzKj8oW1xcdyAmXFwvXSspXFxzKj9cXHsjLztcbmNvbnN0IENBVEVHT1JZX1JFR0VYID0gL15cXHMqPyMjI1xccyo/KC4rKSQvO1xuY29uc3QgQ09NUEVURU5DWV9SRUdFWCA9IC9eXFxzKj9bXFwqLV1cXHMqPyguKykkLztcbmV4cG9ydHMubWF0Y2hMZXZlbCA9IChsaW5lKSA9PiBfbWF0Y2goTEVWRUxfUkVHRVgsIGxpbmUpO1xuZXhwb3J0cy5tYXRjaENhdGVnb3J5ID0gKGxpbmUpID0+IF9tYXRjaChDQVRFR09SWV9SRUdFWCwgbGluZSk7XG5leHBvcnRzLm1hdGNoQ29tcGV0ZW5jeSA9IChsaW5lKSA9PiBfbWF0Y2goQ09NUEVURU5DWV9SRUdFWCwgbGluZSk7XG5jb25zdCBfbWF0Y2ggPSAocmVnZXgsIGxpbmUpID0+IHtcbiAgICBjb25zdCBtYXRjaCA9IHJlZ2V4LmV4ZWMobGluZSk7XG4gICAgcmV0dXJuIG1hdGNoID8gcHJpbWl0aXZlX2hlbHBlcnNfMS50cmltKG1hdGNoWzFdKSA6ICcnO1xufTtcbi8qKlxuICogaXNSZWxldmFudEhlYWRlclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogY2hlY2sgaWYgdGhlIHNwZWNpZmllZCBsaW5lIGlzIGEgaGVhZGVyIHRoYXQgaW5kaWNhdGVzIGEgcG90ZW50aWFsIGxldmVsXG4gKi9cbmV4cG9ydHMuaXNIMiA9IChsaW5lKSA9PiB7XG4gICAgY29uc3Qgc3RyaXBwZWRMaW5lID0gbGluZS5yZXBsYWNlKC9eXFxzKy8sICcnKTtcbiAgICBpZiAoc3RyaXBwZWRMaW5lLnN1YnN0cmluZygwLCAyKSA9PT0gJyMjJyAmJiBzdHJpcHBlZExpbmVbMl0gIT09ICcjJykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZW5kZXJMYXlvdXQgPSB2b2lkIDA7XG5jb25zdCBjcmVhdGVfZWxlbWVudHNfMSA9IHJlcXVpcmUoXCJAdG9vbGtpcC9jcmVhdGUtZWxlbWVudHNcIik7XG5jb25zdCBsaXN0XzEgPSByZXF1aXJlKFwiLi4vbGlzdFwiKTtcbmNvbnN0IGZpbHRlcnNfMSA9IHJlcXVpcmUoXCIuLi9maWx0ZXJzXCIpO1xuY29uc3QgbWF0cml4XzEgPSByZXF1aXJlKFwiLi4vbWF0cml4XCIpO1xuZXhwb3J0cy5yZW5kZXJMYXlvdXQgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGNyZWF0ZV9lbGVtZW50c18xLmNyZWF0ZUVsZW1lbnQoe1xuICAgICAgICBwYXJlbnQ6IGRvY3VtZW50LmJvZHksXG4gICAgICAgIGNsczoge1xuICAgICAgICAgICAgbmFtZTogJ2xheW91dCcsXG4gICAgICAgICAgICBzdHlsZXM6IHtcbiAgICAgICAgICAgICAgICAnaHRtbCwgYm9keSwgLmxheW91dCc6IHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbjogJzAnLFxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAnMCcsXG4gICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6ICdSb2JvdG8nXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAnLmxheW91dCc6IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgZmlsdGVyc18xLnJlbmRlckZpbHRlckJhcigpLFxuICAgICAgICAgICAgbGlzdF8xLnJlbmRlckxpc3QoKSxcbiAgICAgICAgICAgIG1hdHJpeF8xLnJlbmRlck1hdHJpeCgpXG4gICAgICAgIF1cbiAgICB9KTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVuZGVyTGlzdCA9IHZvaWQgMDtcbmNvbnN0IGNyZWF0ZV9lbGVtZW50c18xID0gcmVxdWlyZShcIkB0b29sa2lwL2NyZWF0ZS1lbGVtZW50c1wiKTtcbmNvbnN0IGdyb3VwXzEgPSByZXF1aXJlKFwiLi9ncm91cFwiKTtcbmNvbnN0IGNvcmVfMSA9IHJlcXVpcmUoXCIuLi8uLi9zZWxlY3RvcnMvY29yZVwiKTtcbmNvbnN0IGZpbHRlcnNfMSA9IHJlcXVpcmUoXCIuLi8uLi9zZWxlY3RvcnMvZmlsdGVyc1wiKTtcbmV4cG9ydHMucmVuZGVyTGlzdCA9ICgpID0+IHtcbiAgICBjb25zdCBjbHNTZWxlY3RvciA9IGZpbHRlcnNfMS5zZWxlY3REaXNwbGF5KCkuc2VsZWN0KChkaXNwbGF5KSA9PiAoZGlzcGxheSA9PT0gJ2xpc3QnKSA/ICdsaXN0JyA6ICdoaWRkZW4nKTtcbiAgICBjb25zdCBzZWxlY3RvciA9IGNvcmVfMS5zZWxlY3RMZXZlbHMoKVxuICAgICAgICAubWFwU2VsZWN0KChsZXZlbCkgPT4ge1xuICAgICAgICByZXR1cm4gZ3JvdXBfMS5yZW5kZXJHcm91cChsZXZlbCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGNyZWF0ZV9lbGVtZW50c18xLmNyZWF0ZUVsZW1lbnQoe1xuICAgICAgICBjbHM6IGNsc1NlbGVjdG9yLFxuICAgICAgICBzdHlsZXM6IHtcbiAgICAgICAgICAgICcubGlzdCc6IHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgZ3JpZFRlbXBsYXRlQ29sdW1uczogJzFmcicsXG4gICAgICAgICAgICAgICAgZm9udFNpemU6ICcyZW0nLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgb3ZlcmZsb3dZOiAnYXV0bydcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2hpbGRyZW46IHNlbGVjdG9yXG4gICAgfSk7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJlbmRlckdyb3VwID0gdm9pZCAwO1xuY29uc3QgY3JlYXRlX2VsZW1lbnRzXzEgPSByZXF1aXJlKFwiQHRvb2xraXAvY3JlYXRlLWVsZW1lbnRzXCIpO1xuY29uc3Qgb2JqZWN0X2hlbHBlcnNfMSA9IHJlcXVpcmUoXCJAdG9vbGtpcC9vYmplY3QtaGVscGVyc1wiKTtcbmNvbnN0IGNvbXBldGVuY3lfMSA9IHJlcXVpcmUoXCIuLi9jb21wZXRlbmN5XCIpO1xuY29uc3Qgc3R5bGVfaGVscGVyc18xID0gcmVxdWlyZShcIkB0b29sa2lwL3N0eWxlLWhlbHBlcnNcIik7XG5jb25zdCBzdGF0ZV8xID0gcmVxdWlyZShcIi4uLy4uLy4uL21vZGVscy9zdGF0ZVwiKTtcbmNvbnN0IGNvcmVfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9zZWxlY3RvcnMvY29yZVwiKTtcbmNvbnN0IGZpbHRlcnNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9zZWxlY3RvcnMvZmlsdGVyc1wiKTtcbmNvbnN0IHN0eWxlcyA9IHtcbiAgICAnLmhpZGRlbic6IHtcbiAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgfSxcbiAgICAnLmNvbHVtbic6IHtcbiAgICAgICAgZm9udFNpemU6ICcwLjllbScsXG4gICAgICAgIHdpZHRoOiAnNTB2dycsXG4gICAgICAgIG1hcmdpbkJvdHRvbTogJzFlbScsXG4gICAgICAgIG5lc3RlZDoge1xuICAgICAgICAgICAgJyYuY29sbGFwc2VkIC5jb2xOYW1lIGltZyc6IHtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06ICdyb3RhdGUoMGRlZyknXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJyYuY29sbGFwc2VkIC5ncm91cENoaWxkcmVuJzoge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICAnLmNvbE5hbWUnOiB7XG4gICAgICAgIG1hcmdpbjogJzFyZW0nLFxuICAgICAgICBmb250RmFtaWx5OiAnWmlsbGEgU2xhYicsXG4gICAgICAgIGZvbnRTaXplOiAnMC45ZW0nLFxuICAgICAgICBmb250V2VpZ2h0OiAnNTAwJyxcbiAgICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgbWFyZ2luTGVmdDogJy0xLjJlbScsXG4gICAgICAgIG5lc3RlZDoge1xuICAgICAgICAgICAgJ2ltZyc6IHtcbiAgICAgICAgICAgICAgICB3aWR0aDogJzEuNWVtJyxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6ICcxLjVlbScsXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtOiAncm90YXRlKDE4MGRlZyknLFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzUwJSA1MCUnXG4gICAgICAgICAgICB9LFxuICAgICAgICB9XG4gICAgfVxufTtcbmV4cG9ydHMucmVuZGVyR3JvdXAgPSAobGV2ZWwsIGNhdGVnb3J5KSA9PiB7XG4gICAgY29uc3QgaXNHcm91cE9mR3JvdXBzID0gIWNhdGVnb3J5O1xuICAgIGNvbnN0IGxhYmVsID0gY2F0ZWdvcnkgfHwgbGV2ZWw7XG4gICAgLy8gZ2V0IHRoZSBhcHByb3ByaWF0ZSBzZWxlY3RvclxuICAgIGxldCBjaGlsZHJlbjtcbiAgICBpZiAoIWNhdGVnb3J5KSB7XG4gICAgICAgIGNoaWxkcmVuID0gY29yZV8xLnNlbGVjdENhdGVnb3JpZXMoKVxuICAgICAgICAgICAgLm1hcFNlbGVjdCgoY2F0ZWdvcnkpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBleHBvcnRzLnJlbmRlckdyb3VwKGxldmVsLCBjYXRlZ29yeSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY2hpbGRyZW4gPSBjb3JlXzEuc2VsZWN0Q29tcGV0ZW5jaWVzKClcbiAgICAgICAgICAgIC5zZWxlY3QoKGNvbXBldGVuY2llcykgPT4ge1xuICAgICAgICAgICAgY29uc3Qgb3V0ID0gb2JqZWN0X2hlbHBlcnNfMS5maWx0ZXIoY29tcGV0ZW5jaWVzLCAoY29tcGV0ZW5jeSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjb21wZXRlbmN5LmNhdGVnb3J5ICE9PSBjYXRlZ29yeSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjb21wZXRlbmN5LmxldmVscy5pbmRleE9mKGxldmVsKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIG91dDtcbiAgICAgICAgfSkubWFwU2VsZWN0KChjb21wZXRlbmN5KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBvdXQgPSBjb21wZXRlbmN5XzEucmVuZGVyQ29tcGV0ZW5jeShjb21wZXRlbmN5LCBsZXZlbCk7XG4gICAgICAgICAgICByZXR1cm4gb3V0O1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgY2xzU2VsZWN0b3IgPSBmaWx0ZXJzXzEuc2VsZWN0SGlkZGVuTGV2ZWxzKCkuc2VsZWN0KChsZXZlbHMpID0+IHtcbiAgICAgICAgaWYgKGxldmVscy5pbmRleE9mKGxldmVsKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiAnY29sdW1uIGhpZGRlbic7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICdjb2x1bW4nO1xuICAgIH0pO1xuICAgIC8vIGxpc3RlbmVyc1xuICAgIGxldCBpc0NvbGxhcHNlZCA9IGZhbHNlO1xuICAgIGNvbnN0IG9uRXhwYW5kQ29sbGFwc2UgPSAoKSA9PiB7XG4gICAgICAgIGlzQ29sbGFwc2VkID0gIWlzQ29sbGFwc2VkO1xuICAgICAgICBzdHlsZV9oZWxwZXJzXzEuYWRkT3JSZW1vdmVDbGFzcyhvdXQsICdjb2xsYXBzZWQnLCBpc0NvbGxhcHNlZCk7XG4gICAgfTtcbiAgICBjb25zdCBvbkRlbGV0ZSA9IChlKSA9PiB7XG4gICAgICAgIHN0YXRlXzEuU1RBVEUuc2V0KCdoaWRkZW5MZXZlbHMnLCBbLi4uc3RhdGVfMS5TVEFURS5nZXQoJ2hpZGRlbkxldmVscycpLCBsYWJlbF0pO1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH07XG4gICAgLy8gZ2VuZXJhdGUgdGhlIGFjdHVhbCBlbGVtZW50XG4gICAgY29uc3Qgb3V0ID0gY3JlYXRlX2VsZW1lbnRzXzEuY3JlYXRlRWxlbWVudCh7XG4gICAgICAgIGNsczogY2xzU2VsZWN0b3IsXG4gICAgICAgIHN0eWxlcyxcbiAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgIHsgY2xzOiAnY29sTmFtZScsIGV2ZW50TGlzdGVuZXJzOiB7IGNsaWNrOiAoKSA9PiBvbkV4cGFuZENvbGxhcHNlKCkgfSwgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgeyB0eXBlOiAnaW1nJywgYXR0cjogeyBzcmM6ICcuL3Jlcy9kb3duX2NhcmV0LnBuZycgfSB9LFxuICAgICAgICAgICAgICAgICAgICB7IGNvbnRlbnQ6IGxhYmVsIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdpbWcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cjogeyBzcmM6ICcuL3Jlcy9leC5wbmcnIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjbHM6IGlzR3JvdXBPZkdyb3VwcyA/ICdpY29uJyA6ICdoaWRkZW4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRMaXN0ZW5lcnM6IHsgY2xpY2s6IChlKSA9PiBvbkRlbGV0ZShlKSB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNsczogJ2dyb3VwQ2hpbGRyZW4nLFxuICAgICAgICAgICAgICAgIGNoaWxkcmVuXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9KTtcbiAgICByZXR1cm4gb3V0O1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZW5kZXJDb21wZXRlbmN5ID0gdm9pZCAwO1xuY29uc3QgY3JlYXRlX2VsZW1lbnRzXzEgPSByZXF1aXJlKFwiQHRvb2xraXAvY3JlYXRlLWVsZW1lbnRzXCIpO1xuY29uc3Qgb2JqZWN0X2hlbHBlcnNfMSA9IHJlcXVpcmUoXCJAdG9vbGtpcC9vYmplY3QtaGVscGVyc1wiKTtcbmNvbnN0IHN0eWxlcyA9IHtcbiAgICAnLmNvbXBldGVuY3knOiB7XG4gICAgICAgIHBhZGRpbmc6ICcwLjVyZW0nLFxuICAgICAgICBtYXJnaW46ICcwLjVyZW0nLFxuICAgICAgICBmb250U2l6ZTogJzAuNmVtJyxcbiAgICAgICAgYm9yZGVyVG9wOiAnMXB4IHNvbGlkICNlZWUnLFxuICAgICAgICBmb250RmFtaWx5OiAnQW5vbnltb3VzIFBybycsXG4gICAgICAgIG5lc3RlZDoge1xuICAgICAgICAgICAgJy5uYW1lJzoge1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IFwiMC41XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnLm5hbWUuYm9sZCc6IHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAnMSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnLmNhdGVnb3J5LCAubGV2ZWxzJzoge1xuICAgICAgICAgICAgICAgIG1hcmdpblRvcDogJzAuNXJlbScsXG4gICAgICAgICAgICAgICAgZm9udFNpemU6ICcwLjhyZW0nLFxuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdub25lJyxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjZmZmJyxcbiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6ICcxMHB4JyxcbiAgICAgICAgICAgICAgICBib3hTaGFkb3c6ICcxcHggMXB4IDNweCAycHggcmdiYSgwLDAsMCwuMiknLFxuICAgICAgICAgICAgICAgIHBhZGRpbmc6ICcwLjVyZW0nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJyY6aG92ZXIgLmxldmVscyc6IHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgICAgICAgICAgIHpJbmRleDogJzUnXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuY3JlYXRlX2VsZW1lbnRzXzEuY3JlYXRlRWxlbWVudCh7XG4gICAgc3R5bGVzXG59KTtcbmV4cG9ydHMucmVuZGVyQ29tcGV0ZW5jeSA9IChjb21wZXRlbmN5LCBsZXZlbEdyb3VwKSA9PiB7XG4gICAgY29uc3Qgb3RoZXJMZXZlbHMgPSBvYmplY3RfaGVscGVyc18xLmZpbHRlcihjb21wZXRlbmN5LmxldmVscywgKGwpID0+IChsICE9PSBsZXZlbEdyb3VwKSk7XG4gICAgY29uc3Qgb3V0ID0gY3JlYXRlX2VsZW1lbnRzXzEuY3JlYXRlRWxlbWVudCh7XG4gICAgICAgIGNsczogJ2NvbXBldGVuY3knLFxuICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgeyBjb250ZW50OiBjb21wZXRlbmN5Lm5hbWUsIGNsczogWyduYW1lJywgb3RoZXJMZXZlbHMubGVuZ3RoID09PSAwID8gJ2JvbGQnIDogJyddIH0sXG4gICAgICAgICAgICBvdGhlckxldmVscy5sZW5ndGggIT09IDAgPyB7IGNsczogJ2xldmVscycsIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgIHsgY29udGVudDogJ0Fsc28gaW46JyB9LFxuICAgICAgICAgICAgICAgICAgICB7IHR5cGU6ICd1bCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogY29tcGV0ZW5jeS5sZXZlbHMubWFwKChsZXZlbCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsZXZlbEdyb3VwID09PSBsZXZlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHR5cGU6ICdsaScsIGNvbnRlbnQ6IGxldmVsIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXSB9IDoge30sXG4gICAgICAgIF1cbiAgICB9KTtcbiAgICByZXR1cm4gb3V0O1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZW5kZXJGaWx0ZXJCYXIgPSB2b2lkIDA7XG5jb25zdCBjcmVhdGVfZWxlbWVudHNfMSA9IHJlcXVpcmUoXCJAdG9vbGtpcC9jcmVhdGUtZWxlbWVudHNcIik7XG5jb25zdCB2aWV3c18xID0gcmVxdWlyZShcIi4vdmlld3NcIik7XG5jb25zdCBmaWx0ZXJzXzEgPSByZXF1aXJlKFwiLi9maWx0ZXJzXCIpO1xuZXhwb3J0cy5yZW5kZXJGaWx0ZXJCYXIgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGNyZWF0ZV9lbGVtZW50c18xLmNyZWF0ZUVsZW1lbnQoe1xuICAgICAgICBjbHM6ICdmaWx0ZXJCYXInLFxuICAgICAgICBzdHlsZXM6IHtcbiAgICAgICAgICAgICcuZmlsdGVyQmFyJzoge1xuICAgICAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJyMzMzMnLFxuICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6ICdBbm9ueW1vdXMgUHJvJyxcbiAgICAgICAgICAgICAgICBjb2xvcjogJyNGRkYnLFxuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnLmxhYmVsJzoge1xuICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMC44cmVtJyxcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAnMC44JyxcbiAgICAgICAgICAgICAgICBtYXJnaW5Cb3R0b206ICcwLjI1cmVtJyxcbiAgICAgICAgICAgICAgICBmb250RmFtaWx5OiAnWmlsbGEgU2xhYidcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnLnRpdGxlJzoge1xuICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMS4ycmVtJyxcbiAgICAgICAgICAgICAgICBtYXJnaW46ICcxcmVtJyxcbiAgICAgICAgICAgICAgICBtYXJnaW5Cb3R0b206ICcwLjJyZW0nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJy5zdWJ0aXRsZSc6IHtcbiAgICAgICAgICAgICAgICBmb250U2l6ZTogJzAuN3JlbScsXG4gICAgICAgICAgICAgICAgbWFyZ2luTGVmdDogJzFyZW0nLFxuICAgICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogJzFyZW0nXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICB7IGNsczogJ3RpdGxlJywgY29udGVudDogJ0NvbXBldGVuY3kgRXhwbG9yZXInIH0sXG4gICAgICAgICAgICB7IGNsczogJ3N1YnRpdGxlJywgY29udGVudDogJ2J5IGtpcCBwcmljZScgfSxcbiAgICAgICAgICAgIC8qKiBjaG9pY2Ugb2Ygdmlld3MgKi9cbiAgICAgICAgICAgIHZpZXdzXzEucmVuZGVyVmlld3MoKSxcbiAgICAgICAgICAgIC8qKiBzaG93IHdoYXQgbGV2ZWxzIGFyZSB2aXNpYmxlICAqL1xuICAgICAgICAgICAgZmlsdGVyc18xLnJlbmRlckZpbHRlcnMoKVxuICAgICAgICBdXG4gICAgfSk7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNlbGVjdEhpZGRlbkxldmVscyA9IGV4cG9ydHMuc2VsZWN0RGlzcGxheSA9IGV4cG9ydHMuc2VsZWN0RmlsdGVycyA9IHZvaWQgMDtcbmNvbnN0IG1vZGVsXzEgPSByZXF1aXJlKFwiQHRvb2xraXAvbW9kZWxcIik7XG5jb25zdCBzdGF0ZV8xID0gcmVxdWlyZShcIi4uL21vZGVscy9zdGF0ZVwiKTtcbmV4cG9ydHMuc2VsZWN0RmlsdGVycyA9ICgpID0+IG1vZGVsXzEuc2VsZWN0KHN0YXRlXzEuU1RBVEUsIChzKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbGV2ZWxzOiBzLmxldmVscyxcbiAgICAgICAgZGlzcGxheTogcy5kaXNwbGF5LFxuICAgICAgICBoaWRkZW5MZXZlbHM6IHMuaGlkZGVuTGV2ZWxzXG4gICAgfTtcbn0pO1xuZXhwb3J0cy5zZWxlY3REaXNwbGF5ID0gKCkgPT4gbW9kZWxfMS5zZWxlY3Qoc3RhdGVfMS5TVEFURSwgcyA9PiBzLmRpc3BsYXkpO1xuZXhwb3J0cy5zZWxlY3RIaWRkZW5MZXZlbHMgPSAoKSA9PiBtb2RlbF8xLnNlbGVjdChzdGF0ZV8xLlNUQVRFLCBzID0+IHMuaGlkZGVuTGV2ZWxzKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZW5kZXJWaWV3cyA9IHZvaWQgMDtcbmNvbnN0IGNyZWF0ZV9lbGVtZW50c18xID0gcmVxdWlyZShcIkB0b29sa2lwL2NyZWF0ZS1lbGVtZW50c1wiKTtcbmNvbnN0IGZpbHRlcnNfMSA9IHJlcXVpcmUoXCIuLi8uLi9zZWxlY3RvcnMvZmlsdGVyc1wiKTtcbmNvbnN0IHN0YXRlXzEgPSByZXF1aXJlKFwiLi4vLi4vbW9kZWxzL3N0YXRlXCIpO1xuZXhwb3J0cy5yZW5kZXJWaWV3cyA9ICgpID0+IHtcbiAgICBjb25zdCBjbHNTZWxlY3RvciA9IChkaXNwbGF5KSA9PiBmaWx0ZXJzXzEuc2VsZWN0RmlsdGVycygpXG4gICAgICAgIC5zZWxlY3QoZiA9PiBmLmRpc3BsYXkpXG4gICAgICAgIC5zZWxlY3QoKG1vZGUpID0+IChtb2RlID09PSBkaXNwbGF5KSA/ICdzZWxlY3RlZCBkaXNwbGF5TW9kZScgOiAnZGlzcGxheU1vZGUnKTtcbiAgICByZXR1cm4gY3JlYXRlX2VsZW1lbnRzXzEuY3JlYXRlRWxlbWVudCh7XG4gICAgICAgIGNsczogJ3ZpZXdzJyxcbiAgICAgICAgc3R5bGVzOiB7XG4gICAgICAgICAgICAnLnZpZXdzJzoge1xuICAgICAgICAgICAgICAgIG1hcmdpbjogJzFyZW0nLFxuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgICAgICAgICBuZXN0ZWQ6IHtcbiAgICAgICAgICAgICAgICAgICAgJy5kaXNwbGF5TW9kZSc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICdhdXRvJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogJzVweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAnMC4xcmVtIDAuMjVyZW0nLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnLmRpc3BsYXlNb2RlOm5vdCguc2VsZWN0ZWQpJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogJzAuNSdcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgJy5zZWxlY3RlZCc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJyNmZmYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjMzMzJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgeyBjbHM6ICdsYWJlbCcsIGNvbnRlbnQ6ICdWaWV3IEFzOiAnIH0sXG4gICAgICAgICAgICB7IGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgIHsgY29udGVudDogJ0xpc3QnLCBjbHM6IGNsc1NlbGVjdG9yKCdsaXN0JyksIGV2ZW50TGlzdGVuZXJzOiB7IGNsaWNrOiAoKSA9PiBzdGF0ZV8xLlNUQVRFLnNldCgnZGlzcGxheScsICdsaXN0JykgfSB9LFxuICAgICAgICAgICAgICAgICAgICB7IGNvbnRlbnQ6ICdNYXRyaXgnLCBjbHM6IGNsc1NlbGVjdG9yKCdtYXRyaXgnKSwgZXZlbnRMaXN0ZW5lcnM6IHsgY2xpY2s6ICgpID0+IHN0YXRlXzEuU1RBVEUuc2V0KCdkaXNwbGF5JywgJ21hdHJpeCcpIH0gfVxuICAgICAgICAgICAgICAgIF0gfVxuICAgICAgICBdXG4gICAgfSk7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJlbmRlckZpbHRlcnMgPSB2b2lkIDA7XG5jb25zdCBmaWx0ZXJzXzEgPSByZXF1aXJlKFwiLi4vLi4vc2VsZWN0b3JzL2ZpbHRlcnNcIik7XG5jb25zdCBjcmVhdGVfZWxlbWVudHNfMSA9IHJlcXVpcmUoXCJAdG9vbGtpcC9jcmVhdGUtZWxlbWVudHNcIik7XG5jb25zdCBjb3JlXzEgPSByZXF1aXJlKFwiLi4vLi4vc2VsZWN0b3JzL2NvcmVcIik7XG5jb25zdCBzdGF0ZV8xID0gcmVxdWlyZShcIi4uLy4uL21vZGVscy9zdGF0ZVwiKTtcbmV4cG9ydHMucmVuZGVyRmlsdGVycyA9ICgpID0+IHtcbiAgICBjb25zdCBjbHNTZWxlY3RvciA9IChsZXZlbCkgPT4ge1xuICAgICAgICByZXR1cm4gZmlsdGVyc18xLnNlbGVjdEZpbHRlcnMoKVxuICAgICAgICAgICAgLnNlbGVjdChmID0+IGYuaGlkZGVuTGV2ZWxzKVxuICAgICAgICAgICAgLnNlbGVjdCgobGV2ZWxzKSA9PiAobGV2ZWxzLmluZGV4T2YobGV2ZWwpICE9PSAtMSkgPyAnaGlkZGVuIGxldmVsJyA6ICdsZXZlbCcpO1xuICAgIH07XG4gICAgY29uc3QgY2hpbGRTZWxlY3RvciA9IGNvcmVfMS5zZWxlY3RMZXZlbHMoKS5tYXBTZWxlY3QoKGwpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNsczogY2xzU2VsZWN0b3IobCksXG4gICAgICAgICAgICBjb250ZW50OiBsLFxuICAgICAgICAgICAgZXZlbnRMaXN0ZW5lcnM6IHtcbiAgICAgICAgICAgICAgICBjbGljazogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnaGlkaW5nJyk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlXzEuaGlkZU9yVW5oaWRlTGV2ZWwobCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0pO1xuICAgIHJldHVybiBjcmVhdGVfZWxlbWVudHNfMS5jcmVhdGVFbGVtZW50KHtcbiAgICAgICAgY2xzOiAnZmlsdGVycycsXG4gICAgICAgIHN0eWxlczoge1xuICAgICAgICAgICAgJy5maWx0ZXJzJzoge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAnMXJlbSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICB7IGNsczogJ2xhYmVsJywgY29udGVudDogJ1Zpc2libGUgTGV2ZWxzOicgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjbHM6ICdsZXZlbHMnLFxuICAgICAgICAgICAgICAgIHN0eWxlczoge1xuICAgICAgICAgICAgICAgICAgICAnLmxldmVscyc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAgICAgICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0J1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnLmxldmVsJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogJzAuMXJlbSAwLjI1cmVtJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luQm90dG9tOiAnMC41cmVtJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAnYXV0bycsXG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6ICc1cHgnXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICcubGV2ZWw6bm90KC5oaWRkZW4pJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnI0ZGRicsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogXCIjMzMzXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgJy5oaWRkZW4ubGV2ZWwnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dERlY29yYXRpb246ICdsaW5lLXRocm91Z2gnLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogJzAuNSdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IGNoaWxkU2VsZWN0b3JcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0pO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZW5kZXJNYXRyaXggPSB2b2lkIDA7XG5jb25zdCBjcmVhdGVfZWxlbWVudHNfMSA9IHJlcXVpcmUoXCJAdG9vbGtpcC9jcmVhdGUtZWxlbWVudHNcIik7XG5jb25zdCBmaWx0ZXJzXzEgPSByZXF1aXJlKFwiLi4vLi4vc2VsZWN0b3JzL2ZpbHRlcnNcIik7XG5leHBvcnRzLnJlbmRlck1hdHJpeCA9ICgpID0+IHtcbiAgICBjb25zdCBjbHNTZWxlY3RvciA9IGZpbHRlcnNfMS5zZWxlY3REaXNwbGF5KCkuc2VsZWN0KChkaXNwbGF5KSA9PiAoZGlzcGxheSA9PT0gJ21hdHJpeCcpID8gJ21hdHJpeCcgOiAnaGlkZGVuJyk7XG4gICAgcmV0dXJuIGNyZWF0ZV9lbGVtZW50c18xLmNyZWF0ZUVsZW1lbnQoe1xuICAgICAgICBjbHM6IGNsc1NlbGVjdG9yLFxuICAgICAgICBzdHlsZXM6IHtcbiAgICAgICAgICAgICcubWF0cml4Jzoge1xuICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6ICdaaWxsYSBTbGFiJyxcbiAgICAgICAgICAgICAgICBmb250U2l6ZTogJzJlbScsXG4gICAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgIGhlaWdodDogJzEwMCUnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNvbnRlbnQ6ICdTb3JyeSwgbm90IHJlYWR5IHlldCA6PCdcbiAgICB9KTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9