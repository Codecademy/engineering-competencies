!function(e){var t={};function __webpack_require__(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,__webpack_require__),r.l=!0,r.exports}__webpack_require__.m=e,__webpack_require__.c=t,__webpack_require__.d=function(e,t,n){__webpack_require__.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},__webpack_require__.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},__webpack_require__.t=function(e,t){if(1&t&&(e=__webpack_require__(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(__webpack_require__.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)__webpack_require__.d(n,r,function(t){return e[t]}.bind(null,r));return n},__webpack_require__.n=function(e){var t=e&&e.__esModule?function getDefault(){return e.default}:function getModuleExports(){return e};return __webpack_require__.d(t,"a",t),t},__webpack_require__.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},__webpack_require__.p="",__webpack_require__(__webpack_require__.s=48)}([function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(23)),__export(n(53)),__export(n(24)),__export(n(54)),__export(n(5)),__export(n(57))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}(n(52))},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(27)),__export(n(28)),__export(n(16)),__export(n(95)),__export(n(96))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(13),s=n(0),i=n(78),o=n(38),l=n(6),a=n(1);class _Model{constructor(e,t){this._innerModel=this._getDefaultValues(),this.__history=new i.HistoryChain,this._event=new o.ModelEvent("modelchange"),this._transforms=t||{},a.isNullOrUndefined(e)||this.import(e)}getType(){return"primitive"}addEventListener(e){this._event.addEventListener(e)}static addEventListener(e){this._event.addEventListener(e)}_dispatchEvent(e){this._event.dispatch(this,e),_Model._event.dispatch(this,e)}_copyEvent(e,t){t._event=e._event}_notifyListeners(e){const{oldValue:t,value:n,eventChain:s}=e;r.equals(t,n)||(e.eventType||(e.eventType=this._calculateChangeType(t,n,s)),this._dispatchEvent(e))}_calculateChangeType(e,t,n){return n?n.eventType:t&&!e?"add":e&&!t?"remove":"modify"}_getApplicableTransforms(){return this._transforms._}_updateHistory(){this.__history.push(this.getData())}undo(){this.__history.navigateBack(e=>{e&&this.import(e)})}redo(){this.__history.navigateForward(e=>{e&&this.import(e)})}getData(){return this._innerGetData()}_innerGetData(){return this._cloneData(this._innerModel)}setData(e){this._innerSetData({value:e})}_innerSetData(e){const t=this.getData(),{value:n}=e,r=this._cloneData(n);this._innerModel=r,this._sendUpdate(Object.assign(Object.assign({},e),{oldValue:t,value:this.getData()}))}_sendUpdate(e){this._updateHistory(),this._notifyListeners(e)}import(e){var t;const n=null===(t=this._getApplicableTransforms())||void 0===t?void 0:t.incoming;let r;r=n?n(e):this._innerImport(e),this.setData(r)}_innerImport(e){return e}export(){var e;const t=null===(e=this._getApplicableTransforms())||void 0===e?void 0:e.outgoing;return t?t(this.getData()):this._innerExport()}_innerExport(){return this.getData()}equals(e){return!!l.isModel(e)&&r.equals(e.getData(),this.getData())}clone(e){const t=e||this._transforms,n=new(0,this.constructor)(this.getData(),t);return n._event=this._event,n}_cloneData(e){return s.clone(e)}_wrapInModel(e,t){const n=_Model.createModel(e);if(!l.isModel(e)){let e=n.getData();n.addEventListener(n=>{if(a.isNullOrUndefined(t))return;const{target:r,eventType:s}=n,i=l.isModel(r)?r.getData():r;this._sendUpdate({eventType:s,key:t,oldValue:e,value:i,eventChain:n}),e=i})}return n}}t._Model=_Model,_Model._event=new o.ModelEvent("modelchange")},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hideOrUnhideLevel=t.updateState=t.STATE=void 0;const r=n(0),s=n(14);class _State extends s.MObject{}t.STATE=new _State({categories:[],levels:[],competencies:[],hiddenLevels:["Engineering Manager","Director","VP"],display:"matrix"},{categories:s.createModelTransform(s.MSet),levels:s.createModelTransform(s.MSet),competencies:s.createModelTransform(s.MManager),hiddenLevels:s.createModelTransform(s.MSet)}),t.updateState=e=>{const n=t.STATE.getData();n.display=e.display||n.display,r.map(e,(e,t)=>{for(let r of e){const e=n[t];-1===e.indexOf(r)&&e.push(r)}}),t.STATE.setData(n)},t.hideOrUnhideLevel=e=>{const n=t.STATE.get("hiddenLevels"),r=n.indexOf(e);-1===r?n.push(e):n.splice(r,1),t.STATE.set("hiddenLevels",n)},window.STATE=t.STATE},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(1);function map(e,t,n){let s=[];if(!e)return s;if(r.isArray(e)){let r;e.map((e,i,o)=>{if(r)return;let l=t?t(e,i,o):e;s.push(l),n&&n()&&(r=!0)})}else{let r,i=0;for(r in e)if(e.hasOwnProperty(r)){let o=t?t(e[r],r,e):e[r];if(o&&s.push(o),i+=1,!n)continue;if(n())break}}return s}function getKeys(e){let t=Object.keys(e)||[];for(let n=t.length-1;n>=0;n-=1){let r=t[n];e.hasOwnProperty(r)||t.splice(n,1)}return t}t.map=map,t.filter=function filter(e,t){const n=[];return map(e,(e,r,s)=>{t(e,r,s)&&n.push(e)}),n},t.getNextKey=function getNextKey(e,t){let n,r=!t;for(n in e)if(e.hasOwnProperty(n)){if(r)return n;n===t&&(r=!0)}return""},t.getKeys=getKeys,t.keyCount=function keyCount(e){return getKeys(e).length},t.setDictValue=function setDictValue(e,t,n){e||(e={});let r=e;for(let e=0;e<n.length;e+=1){let s=n[e],i={};e===n.length-1&&(i=t),r[s]||(r[s]=i),r=r[s]}return e},t.getPrototype=function getPrototype(e){return e.prototype?e.prototype:e.__proto__?e.__proto__:null}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3);t.isModel=e=>e instanceof r._Model},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.selectHiddenLevels=t.selectDisplay=t.selectFilters=void 0;const r=n(14),s=n(4);t.selectFilters=()=>r.select(s.STATE,e=>({levels:e.levels,display:e.display,hiddenLevels:e.hiddenLevels})),t.selectDisplay=()=>r.select(s.STATE,e=>e.display),t.selectHiddenLevels=()=>r.select(s.STATE,e=>e.hiddenLevels)},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(60)),__export(n(29)),__export(n(30)),__export(n(61)),__export(n(31)),__export(n(62)),__export(n(17)),__export(n(32)),__export(n(63))},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(84)),__export(n(85)),__export(n(86))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.selectVisibleCompetencies=t.selectCategoriesAndLevels=t.selectCompetency=t.selectCategories=t.selectUnhiddenLevels=t.selectLevels=t.selectCompetencies=void 0;const r=n(14),s=n(4),i=n(0),o=n(111);t.selectCompetencies=()=>r.select(s.STATE,e=>e.competencies),t.selectLevels=()=>r.select(s.STATE,e=>e.levels),t.selectUnhiddenLevels=()=>r.select(s.STATE,e=>i.filter(e.levels,t=>-1===e.hiddenLevels.indexOf(t))),t.selectCategories=()=>r.select(s.STATE,e=>e.categories),t.selectCompetency=e=>t.selectCompetencies().select(t=>{for(let n of t)if(n.id===e)return n;return null}),t.selectCategoriesAndLevels=()=>r.select(s.STATE,e=>({categories:e.categories,levels:e.levels})),t.selectVisibleCompetencies=()=>r.select(s.STATE,e=>({hiddenLevels:e.hiddenLevels,competencies:e.competencies})).select(({competencies:e})=>i.filter(e,e=>!o.isCompetencyHidden(e)))},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(55)),__export(n(56)),__export(n(25)),__export(n(26))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(8),s=n(0),i=n(34),o=n(33),l=n(13);t._Library=class _Library{constructor(){this._rawStyles={},this._elems={},this._lastId=0}getNextId(){return this._lastId+=1,this._lastId.toString()}hasStyles(e){return!!this._rawStyles[e]}add(e,t,n){const r=this._getOrCreateExistingStyles(e),s=this._merge([r,t]);this._shouldAdd(r,s,n)&&(this._rawStyles[e]=s,this._updateElems(s,e))}_shouldAdd(e,t,n){return!!n||(!!s.isEmptyObject(e)||!l.equals(e,t))}remove(e){return!!this._rawStyles[e]&&(i.removeElement(this._elems[e]),delete this._rawStyles[e],delete this._elems[e],!0)}_merge(e){return e.length<1?null:r.combineStyles(...e)}_stringify(e){return r.stringifyStyles(e)}_updateElems(e,t){let n=this._stringify(e);for(let e=0;e<n.length;e+=1){this._getOrCreateElem(t).innerHTML=n[e]}}_getOrCreateElem(e){if(this._elems[e])return this._elems[e];let t=r.createStyleElement(`${e}-${this._idSuffix}`);return this._elems[e]=t,o.nextRender().then(()=>document.head.appendChild(t)),t}_getOrCreateExistingStyles(e){return this._rawStyles[e]||(this._rawStyles[e]={}),this._rawStyles[e]}getElemForKey(e){return this._elems[e]?this._elems[e]:null}get(e){return this._rawStyles[e]?this._rawStyles[e]:null}}},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(68)),__export(n(36)),__export(n(69))},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(38)),__export(n(77)),__export(n(15)),__export(n(9)),__export(n(19)),__export(n(21)),__export(n(92)),__export(n(93));n(46).setupModelWrapping()},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(3)),__export(n(43)),__export(n(83))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(59),s=n(27);function createSVGElement(e,t){if(e)return e.type="svg",e.namespace=s.SVG_NAMESPACE,r._coreCreateElement(e,t)}t.createElement=function createElement(e,t){if(e)return r._coreCreateElement(e,t)},t.createElements=function createElements(e,t){if(e)return r._coreCreateElements(e,t)},t.createCustomElement=function createCustomElement(e,t,n){if(e)return r._coreCreateElement(e,t,n)},t.createSVGElement=createSVGElement,t.createSVGElements=function createSVGElements(e,t){if(!e)return;const n=[];for(let r of e)n.push(createSVGElement(r,t));return n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),s=n(31);const i=new class _StyleStringifier{stringify(e){return e?this._stringify(e):[]}_stringify(e){let t=[],n="";return r.map(e,(e,r)=>{let s=this.generateContentForStyle(r,e);s&&(n.length+s.length>=1e4?(t.push(n),n=s):n+=s)}),n&&t.push(n),t}generateContentForStyle(e,t){return t instanceof Array?this._generateContentForFontDefinition(e,t):this._generateContentForCssClass(e,t)}_generateContentForCssClass(e,t){let n=this._buildCssClassContentString(e,t);return n&&(n=this._formatClass(e,n),-1!==e.indexOf("{")&&(n+="\n}")),n}_generateContentForFontDefinition(e,t){let n=[];for(let e of t)n.push(this._formatFontface(e.url,e.format));let r={fontFamily:e,src:n.join(",")};return this._generateContentForCssClass("@font-face",r)}_buildCssClassContentString(e,t){let n=-1!==e.indexOf("@keyframes"),s=[];return r.map(t,(e,t)=>{n?s.push(this._buildAnimationValueString(t,e)):s.push(this._formatProperty(t,e))}),s.join("")}_buildAnimationValueString(e,t){let n="";return r.map(t,(e,t)=>{e&&(n+=this._formatProperty(t,e))}),n?this._formatClass(e,n):""}getPropertyName(e){let t=e;if(t.toLowerCase()===t)return t;let n=t.split(/([A-Z])/g);for(let e=0;e<n.length;e++)n[e]=this._getUpdatedSegment(n[e],0===e);return n.join("")}_getUpdatedSegment(e,t){return t&&this._isCssPrefix(e)&&(e="-"+e),e.toLowerCase()!==e&&(e="-"+e.toLowerCase()),e}_isCssPrefix(e){switch(e){case"webkit":case"moz":case"ms":case"o":return!0}return!1}_formatClass(e,t){return`${e} {\n${t}}\n`}_formatProperty(e,t){let n=s.findContainedPlaceholder(t);return n&&(t=t.replace(`<${n.name}:${n.defaultValue}>`,n.defaultValue)),`\t${this.getPropertyName(e)} : ${t};\n`}_formatFontface(e,t){return`url(${e}) format(${t})`}};function getCssPropertyName(e){return i.getPropertyName(e)}t.stringifyStyles=function stringifyStyles(e){return i.stringify(e)},t.stringifyStyle=function stringifyStyle(e,t){return i.generateContentForStyle(e,t)},t.getCssPropertyName=getCssPropertyName,getCssPropertyName("webkitAlignContent")},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(81)),__export(n(82))},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(41)),__export(n(42))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(11);t.ShortDateTransform={incoming:e=>new Date(e.toString()),outgoing:e=>r.shortDate(e)},t.ShortDateTimeTransform={incoming:e=>new Date(e.toString()),outgoing:e=>r.shortDateTime(e)},t.DefaultDateTransform={incoming:e=>new Date(e.toString()),outgoing:e=>e.toString()}},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(44)),__export(n(87)),__export(n(88))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0);class DataManager{constructor(){this._data={},this._populateWithDefaultData()}_populateWithDefaultData(){}_createAndAddDefault(e){this.add(e)}add(e){return!this.contains(e.id)&&(this._data[e.id]=e,!0)}remove(e){if(!this.contains(e))return null;let t=this.get(e);return delete this._data[e],t}contains(e){return!!this._data[e]}clear(){this._data={}}get(e){return this.contains(e)?this._data[e]:null}map(e){r.map(this._data,e)}toArray(){let e=[];return this.map(t=>{e.push(t)}),e}toDictionary(){let e={};return this.map((t,n)=>{e[n]=t}),e}clone(){const e=new DataManager,t=this.toArray();for(let n of t)e.add(n);return e}}t.DataManager=DataManager},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(1),s=n(5);t.isCloneable=function isCloneable(e){return!!r.isFunction(e.clone)},t.isMappable=function isMappable(e){return!!r.isArray(e)||!!r.isObject(e)},t.isEmptyObject=function isEmptyObject(e){return!!r.isObject(e)&&!s.getNextKey(e)},t.isEmptyArray=function isEmptyArray(e){return!!r.isArray(e)&&!(e.length>0)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(5),s=n(1);function combineObjects(e,t,n){let i;return i=e||{},t&&function _loopThru(e,t,n){if(!e)return t;e.__proto__&&(t.__proto__=Object.create(e.__proto__));r.map(e,(e,r)=>{if(!s.isNullOrUndefined(e))if(n&&"object"==typeof e){let s=t[r];if(!s)return void(t[r]=e);s=combineObjects(s,e,n),t[r]=s}else t[r]=e})}(t,i,n),i}t.combineObjects=combineObjects,t.reconcileOptions=function reconcileOptions(e,t){let n,r;for(n in e||(e={}),t)t.hasOwnProperty(n)&&(r=e[n],null==r&&(e[n]=t[n]));return e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.padToDigits=function padToDigits(e,t){let n=e.toString().split("");for(;n.length<t;)n.splice(0,0,"0");return n.join("")},t.fullHexString=function fullHexString(e,t){let n,r;if(t=t||0,n=e.toString(16),n.length<t)for(r=0;r<t-n.length;r+=1)n="0"+n;return n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(1);function charAt(e,t){return e.substr(t,1)}function rest(e,t){return e.substring(t,e.length)}function isNumeric(e){return/^[0-9]+$/.test(e)}t.piece=function piece(e,t,n=1){let r;return r=e.split(t),r[n]||""},t.addPiece=function addPiece(e,t,n){return e.length>0&&(e+=n),e+t},t.titleCase=function titleCase(e,t=" "){let n,r,s;for(s="",n=e.split(t),r=0;r<n.length;r+=1)0!==r&&(s+=t),s+=charAt(n[r],0).toUpperCase(),s+=rest(n[r],1).toLowerCase();return s},t.sentenceCase=function sentenceCase(e){let t;return t=charAt(e,0).toUpperCase(),t+=rest(e,1).toLowerCase(),t},t.charAt=charAt,t.rest=rest,t.trim=function trim(e){let t;return t=e.replace(/^\s*/g,""),t=t.replace(/\s*?$/g,""),t},t.stripSpaces=function stripSpaces(e){let t;return t=e.replace(/\s/g,""),t=t.replace(/\&nbsp\;/g,""),t},t.format=function format(e,...t){let n=e.split("");t||(t=[]);let s="",i=!1;for(let e=0;e<n.length;e+=1){let o=n[e];"\\"!==o?"{"===o?(i=!0,n[e]=""):"}"===o&&i?(n[e]=r.isNullOrUndefined(t[+s])?"{"+s+"}":t[+s].toString(),i=!1,s=""):isNumeric(o)&&i?(s+=o,n[e]=""):i&&(i=!1,s=""):(n[e]="",e+=1)}return n.join("")},t.isNumeric=isNumeric,t.addLeadingZeroes=function addLeadingZeroes(e,t){let n,r;for(n="string"==typeof t?t:t.toString(),r=n.length;r<e;r+=1)n="0"+n;return n},t.stripHTML=function stripHTML(e){let t;return t=e.replace(/\<.*?\>/g,""),t},t.join=function join(e,...t){return t.join(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SVG_NAMESPACE="http://www.w3.org/2000/svg"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(1);t.isIElemDefinition=function isIElemDefinition(e){return!!r.isInterface(e,{attr:null,children:null,cls:"",content:"",id:"",parent:null,type:""})},t.isClassDefinition=function isClassDefinition(e){return!r.isString(e)&&!r.isArray(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0);const s=new class _StyleCombiner{combine(...e){return this._combineStyles(...e)}_combineStyles(...e){let t={};for(let n of e)n&&r.map(n,(e,n)=>{t[n]=e instanceof Array?this._combineFontStyle(t[n]||[],e):this._combineStandardStyle(t[n]||{},e)});return t}_combineStandardStyle(e,t){let n=this._combineStyle(e,t);if(n)return n}_combineFontStyle(e,t){return e.concat(t)}_combineStyle(e,t){let n=this._mergeClassDefinition(e,t);return r.isEmptyObject(n)?null:n}_mergeClassDefinition(...e){let t={};for(let n of e)r.map(n,(e,n)=>{t[n]=e});return t}};t.combineStyles=function combineStyles(...e){return s.combine(...e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(11),s=n(1),getClassableElement=e=>s.isDrawable(e)?e.base:e;function getClass(e){return getClassableElement(e).getAttribute("class")||""}function getClasses(e){const t=getClass(e);return t?t.split(" "):[]}function addClass(e,t){if(!e||!t)return;const n=getClassableElement(e),s=n.getAttribute("class");if(!s)return void n.setAttribute("class",r.trim(t));return-1===(" "+s+" ").indexOf(" "+t+" ")&&n.setAttribute("class",r.trim(s+" "+t)),e}function removeClass(e,t){if(!e||!t)return;let n;n=s.isDrawable(e)?e.base:e;let i=" "+n.getAttribute("class")+" ";const o=i.length;return i=i.replace(" "+t+" "," "),i.length!==o&&n.setAttribute("class",r.trim(i)),e}function addOrRemoveClass(e,t,n){return n?addClass(e,t):removeClass(e,t),e}function hasClass(e,t){let n,r;if(e)return n=s.isDrawable(e)?e.base:e,r=" "+n.getAttribute("class")+" ",-1!==r.indexOf(" "+t+" ")}t.getClass=getClass,t.getClasses=getClasses,t.addClass=addClass,t.addClasses=function addClasses(e,...t){if(!e||!t||0===t.length)return;const n=getClassableElement(e),s=getClasses(e);for(let e of t)e&&-1===r.indexOf(s,e)&&s.push(e);return n.setAttribute("class",s.join(" ")),e},t.removeClass=removeClass,t.addOrRemoveClass=addOrRemoveClass,t.hasClass=hasClass,t.clearClass=function clearClass(e){if(!e)return;let t;return t=s.isDrawable(e)?e.base:e,t.setAttribute("class",""),e},t.toggleClass=function toggleClass(e,t){return addOrRemoveClass(e,t,!hasClass(e,t))},t.setProperty=function setProperty(e,t,n,r){let s,i,o,l,a;for(o=0;o<document.styleSheets.length;o+=1)if(i=document.all?"rules":"cssRules",l=document.styleSheets[o][i],l)for(s=0;s<l.length;s+=1)if(a=l[s],a.selectorText===e&&(a.style[t]||r))return a.style[t]=n,!0;return!1},t.getProperty=function getProperty(e,t){let n,r,s,i,o;for(s=0;s<document.styleSheets.length;s+=1)if(r=document.all?"rules":"cssRules",i=document.styleSheets[s][r],i)for(n=0;n<i.length;n+=1)if(o=i[n],o.selectorText===e)return o.style[t];return""},t.getComputedStyle=function getComputedStyle(e,t){let n,r;return r=s.isDrawable(e)?e.base:e,window.getComputedStyle?(n=window.getComputedStyle(r),t?n.getPropertyValue(t):n):r.currentStyle?(n=r.currentStyle,t?n[t]:n):null}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0);t.StylePlaceholders=new class _StylePlaceholders{splitOutPlaceholders(e){let t={standard:{},withPlaceholders:{}};return r.map(e,(e,n)=>{r.map(e,(e,s)=>{this._containsPlaceholder(e)?r.setDictValue(t.withPlaceholders,e,[n,s]):r.setDictValue(t.standard,e,[n,s])})}),t}findContainedPlaceholder(e){let t=/<(.+?)>/.exec(e);if(!t||!t[1])return null;let n=t[1].split(":");return{name:n[0],defaultValue:n[1]}}_containsPlaceholder(e){return!!this.findContainedPlaceholder(e)}indexStyleDictByPlaceholder(e){let t={};return r.map(e,(e,n)=>{r.map(e,(e,s)=>{r.map(e,(e,i)=>{let o=this.findContainedPlaceholder(e);o&&r.setDictValue(t,!0,[o.name,n,s,i])})})}),t}mapIndexToStyle(e,t){let n={};return r.map(e,(e,s)=>{r.map(e,(e,i)=>{t[s]&&r.setDictValue(n,t[s][i],[s,i])})}),n}replacePlaceholders(e,t,n){let s=new RegExp("<"+t+".*?>","g"),i=r.cloneObject(e);return r.map(i,(e,t)=>{r.map(e,(e,r)=>{i[t][r]=e.replace(s,n)})}),i}},t.findContainedPlaceholder=function findContainedPlaceholder(e){return t.StylePlaceholders.findContainedPlaceholder(e)},t.splitStyles=function splitStyles(e){return t.StylePlaceholders.splitOutPlaceholders(e)},t.indexByPlaceholder=function indexByPlaceholder(e){return t.StylePlaceholders.indexStyleDictByPlaceholder(e)},t.replacePlaceholders=function replacePlaceholders(e,n,r){return t.StylePlaceholders.replacePlaceholders(e,n,r)},t.mapIndexToStyle=function mapIndexToStyle(e,n){return t.StylePlaceholders.mapIndexToStyle(e,n)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(17);const s=new class _StyleElementGenerator{createElement(e){return this._createElement(e)}_createElement(e){let t;return e&&(t=document.getElementById(e),t)||(t=document.createElement("style"),e&&t.setAttribute("id",e)),t}createElementForStyles(e,t,n){return e?this._createElementForStyles(e,t,n):[]}_createElementForStyles(e,t,n){let s=r.stringifyStyles(e),i=[];for(let e of s){let r=this._createElement(t);r.innerHTML=e,n&&document.head.appendChild(r),i.push(r)}return i}};t.createStyleElement=function createStyleElement(e){return s.createElement(e)},t.createElementForStyles=function createElementForStyles(e,t,n){return s.createElementForStyles(e,t,n)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}(n(64))},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(35)),__export(n(66)),__export(n(67))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(1);t.isHTMLElement=function isHTMLElement(e){return e instanceof HTMLElement},t.hasOffsets=function hasOffsets(e){return!r.isNullOrUndefined(e.offsetHeight)},t.isSelectable=function isSelectable(e){return!!e.select}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(1);t.isEquatable=function isEquatable(e){return!r.isNullOrUndefined(e)&&!!e.equals},t.isComparable=function isComparable(e){if(r.isNullOrUndefined(e))return!1;let t=e;return!!(t.lessThan&&t.greaterThan&&t.equals)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(12);class _StyleLibrary extends r._Library{get _idSuffix(){return"styles"}}t.StyleLibrary=new _StyleLibrary},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}(n(73))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(40),s=n(0);t.HistoryChain=class HistoryChain{get currentState(){return this._curNode.data}push(e){if(this._preventAdditions)return;let t=new r.HistoryNode(e);if(!this._start)return this._start=t,this._end=t,void(this._curNode=t);this._curNode!==this._end&&this._clearToCurIdx(),this._end.next=t,t.previous=this._end,this._end=t,this._curNode=this._end}_clearToCurIdx(){this._end=this._curNode,this._curNode.next=null}navigateBack(e){if(!this._curNode.previous)return null;const t=this._curNode.previous.data;return this._curNode=this._curNode.previous,e&&this._handleNavigateCallback(t,e),t}navigateForward(e){if(!this._curNode.next)return null;const t=this._curNode.next.data;return this._curNode=this._curNode.next,e&&this._handleNavigateCallback(t,e),t}_handleNavigateCallback(e,t){this._preventAdditions=!0,t(e),this._preventAdditions=!1}updateCurrentState(e){if(!this._curNode)return!1;let t=this._curNode.data,n=s.combineObjects(t,e,!0);return this._curNode.data=n,!0}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.HistoryNode=class HistoryNode{constructor(e){this.data=e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(18),s=n(42);class MIdentifiable extends s.MObject{get id(){return this.get("id")}set id(e){this.set("id",e)}static get _uniqueKey(){return this.name}static _generateNewId(e){const t=e||this._uniqueKey;return r.generateUniqueId(t,e)}static _updateLastId(e,t){const n=t||this._uniqueKey;r.registerUniqueId(e,n)}constructor(e,t,n){if(super(e),null==e?void 0:e.id)this.constructor._updateLastId(e.id,n);else{const e=this.constructor._generateNewId(n);this.set("id",e)}}}t.MIdentifiable=MIdentifiable},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(15),s=n(0);class MObject extends r._KeyedModel{constructor(e,t){super(e,t)}_getDefaultValues(){return{}}_map(e,t){s.map(e,t)}_getValue(e,t){return e[t]}get(e){return super.get(e)}_setValue(e,t,n){e[t]=n}set(e,t){return super.set(e,t)}}t.MObject=MObject},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3),s=n(6),i=n(1);class _KeyedModel extends r._Model{constructor(e,t){super(e,t)}getType(){return"keyed"}addKeyedListener(e,t){this._event.addEventListener(n=>{n.key===e&&t(n)},this)}_getApplicableTransforms(e){return e?this._transforms[e]:super._getApplicableTransforms()}get(e){return this._innerGet(e)}_innerGet(e){const t=this._getValue(this._innerModel,e);return s.isModel(t)?t.getData():void 0}_innerGetData(){if(i.isNullOrUndefined(this._innerModel))return this._innerModel;const e=this._getDefaultValues();return this._map(this._innerModel,(t,n)=>{s.isModel(t)&&this._setValue(e,n,t.getData())}),e}getModel(e){const t=this._getValue(this._innerModel,e);if(!s.isModel(t))return null;switch(t.getType()){case"array":case"keyed":case"primitive":return t}}update(e,t){const n=Object.assign(Object.assign({},this.get(e)),t);this._innerSet({key:e,value:n})}set(e,t){this._innerSet({key:e,value:t})}_innerSet(e){const{value:t,key:n}=e,r=this.getModel(n);if(s.isModel(r))r.setData(t),this._setValue(this._innerModel,n,r);else{const r=e.oldValue||this.get(n),s=this._wrapInModel(t,n);this._setValue(this._innerModel,n,s),this._sendUpdate(Object.assign(Object.assign({},e),{oldValue:r,value:s.getData()}))}return this.getModel(n)}_innerSetData(e){const{value:t}=e;if(s.isModel(t))super._innerSetData(Object.assign(Object.assign({},e),{value:this._wrapInModel(t)}));else if(i.isNullOrUndefined(t))super._innerSetData(e);else{const n=this._getDefaultValues();this._map(t,(e,t)=>{let r=this._wrapInModel(e,t);this._setValue(n,t,r)}),super._innerSetData(Object.assign(Object.assign({},e),{value:n}))}}_innerImport(e){const t=this._getDefaultValues();return this._map(e,(e,n)=>{var r;let s=e;const i=null===(r=this._getApplicableTransforms(n))||void 0===r?void 0:r.incoming;i&&(s=i(e)),this._setValue(t,n,this._wrapInModel(s,n))}),t}_innerExport(){const e=this._getDefaultValues();return this._map(this._innerModel,(t,n)=>{let r=s.isModel(t)?t.export():t;const i=this._getApplicableTransforms(n);(null==i?void 0:i.outgoing)&&(r=i.outgoing(r)),this._setValue(e,n,r)}),e}}t._KeyedModel=_KeyedModel},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(15),s=n(0),i=n(1);class MArray extends r._KeyedModels{_getDefaultValues(){return[]}_map(e,t){s.map(e,t)}_getValue(e,t){return e[t]}_setValue(e,t,n){this._shouldSplice(e,t,n)?e.splice(t,1):e[t]=n}_shouldSplice(e,t,n){return!(t<0)&&(!(t>=e.length)&&(void 0===n||!!i.isUndefined(n.getData())))}add(e){return this._innerSet({key:this._innerModel.length,value:e}),!0}}t.MArray=MArray},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),s=n(13),i=n(9);class Selector{constructor(e,t,n){this._applyFuncs=[],this._mapFuncs=[],this._processor=t||(e=>e),this._lastModel=this._processor(e.getData(),{}),this._setupFilters(n||{}),this._addEventListener(e)}getData(){return this._lastModel}_setupFilters({keys:e=[],eventTypes:t=[]}){this._filterMap={keys:r.arrayToMap(e),eventTypes:r.arrayToMap(t),customFilters:[]}}filter(e){return this._filterMap.customFilters.push(e),this}reselect(e){const t=this._createReselectEvent();if(e){const{apply:n,map:r}=e;n&&this._notifyApplySelectors(t,n),r&&this._notifyMapSelectors(t,r)}else this._notifyCallbacks(t)}_createReselectEvent(){return{name:"modelchange",target:this,oldValue:this._lastModel,value:this._lastModel,eventType:"none"}}_addEventListener(e){e.addEventListener(e=>{if(this._isFiltered(e))return;const t=this._processor(e.target.getData(),e);if(s.equals(t,this._lastModel))return;const n=this._lastModel;this._lastModel=t,this._notifyCallbacks(Object.assign(Object.assign({},e),{target:this,oldValue:n,value:t,eventChain:e}))})}_isFiltered(e){const{key:t,eventType:n}=e,{keys:r,eventTypes:s,customFilters:i}=this._filterMap;if(r.size>0&&!r.has(t))return!0;if(s.size>0&&!s.has(n))return!0;for(let t of i)if(t(e))return!0;return!1}_notifyCallbacks(e){this._notifyApplySelectors(e,this._applyFuncs),this._notifyMapSelectors(e,this._mapFuncs)}_notifyApplySelectors(e,t){for(let n of t)n(e)}_notifyMapSelectors(e,t){const{value:n}=e;if(r.isMappable(n))for(let s of t)r.map(n,(t,n)=>{s(t,n,e)})}apply(e,t){return this._applyFuncs.push(e),t||this.reselect({apply:[e]}),this}addEventListener(e,t){return this.apply(e,t)}map(e,t){return this._mapFuncs.push(e),t||this.reselect({map:[e]}),this}mapSelect(e,t){return new Selector(this,(t,n)=>{const s=[];return r.isMappable(t)&&r.map(t,(t,r)=>{s.push(e(t,r,n))}),s},t)}select(e,t){return new Selector(this,e,t)}}t.Selector=Selector,t.select=(e,t,n)=>new Selector(e,t,n),t.rawSelect=(e,t,n)=>{const r=new i.Model(e);return new Selector(r,t,n)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3),s=n(6),i=n(1),o=n(18),l=n(9),a=n(19),c=n(21);t.createModel=(e,t)=>s.isModel(e)?e.clone(t):_createModelForData(e,t);const _createModelForData=(e,t)=>i.isPrimitive(e)?new l.MPrimitive(e,t):i.isDate(e)?new l.MDate(e,t):o.isIdentifiable(e)?new a.MIdentifiable(e,t):i.isArray(e)?_createArrayModelForData(e,t):i.isObject(e)?new a.MObject(e,t):void 0,_createArrayModelForData=(e,t)=>e[0]&&o.isIdentifiable(e[0])?new c.MManager(e,t):new c.MArray(e,t);t.setupModelWrapping=()=>{r._Model.createModel=t.createModel},t.setupModelWrapping()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.filterRelevantCompetencies=t.selectCompetenciesForLevelAndCategory=void 0;const r=n(10),s=n(0);t.selectCompetenciesForLevelAndCategory=(e,n)=>r.selectCompetencies().select(r=>t.filterRelevantCompetencies(r,e,n)),t.filterRelevantCompetencies=(e,t,n)=>s.filter(e,e=>e.category===n&&-1!==e.levels.indexOf(t))},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(s,i){function fulfilled(e){try{step(r.next(e))}catch(e){i(e)}}function rejected(e){try{step(r.throw(e))}catch(e){i(e)}}function step(e){e.done?s(e.value):function adopt(e){return e instanceof n?e:new n((function(t){t(e)}))}(e.value).then(fulfilled,rejected)}step((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const s=n(49),i=n(97),o=n(4),l=n(99);window.addEventListener("load",()=>r(void 0,void 0,void 0,(function*(){l.renderLayout();const e=yield s.loadEngCompetencies(),t=yield s.loadManagerCompetencies(),n=i.parseFile(e+t);o.updateState(n)})))},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(s,i){function fulfilled(e){try{step(r.next(e))}catch(e){i(e)}}function rejected(e){try{step(r.throw(e))}catch(e){i(e)}}function step(e){e.done?s(e.value):function adopt(e){return e instanceof n?e:new n((function(t){t(e)}))}(e.value).then(fulfilled,rejected)}step((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.loadManagerCompetencies=t.loadEngCompetencies=void 0;const s=n(50);t.loadEngCompetencies=()=>r(void 0,void 0,void 0,(function*(){return yield s.loadFile({filename:"./README.md"})})),t.loadManagerCompetencies=()=>r(void 0,void 0,void 0,(function*(){return yield s.loadFile({filename:"./managers.md"})}))},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(51)),__export(n(58))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0);t.ajax=function ajax(e){return new Promise((t,n)=>{!function _innerAjax(e,t,n){let s=function _getXmlRequestObject(){let e=null;try{e=new XMLHttpRequest}catch(t){try{e=new ActiveXObject("Msxml2.XMLHTTP")}catch(t){try{e=new ActiveXObject("Microsoft.XMLHTTP")}catch(e){return null}}}return e}();return s?(function _assignXmlRequestCallbacks(e,t,n){return e.onreadystatechange=()=>{4===e.readyState&&(!function _isValidResponse(e){if(e<200)return!1;if(e>=300)return!1;return!0}(e.status)?n(e.responseText):t(e.responseText))},e}(s,(...e)=>t(...e),(...e)=>n(...e)),function _sendXmlRequest(e,{type:t,requestUrl:n,params:s,headerParams:i}){e.open(t,n,!0),function _addHeaderData(e,t){if(!t)return;r.map(t,(t,n)=>{e.setRequestHeader(n,t)})}(e,i);let o=null;"POST"===t&&(o=function _setRequestHeader(e,t){let n,r;t instanceof FormData?(n="multipart/form-data",r=t):(n="application/json",r=JSON.stringify(t));n&&e.setRequestHeader("Content-Type",n);return r}(e,s));return e.send(o),e}(s,e),s):null}(e,t,n)})}},function(e,t,n){"use strict";function isString(e){return"string"==typeof e}Object.defineProperty(t,"__esModule",{value:!0}),t.isUndefined=function isUndefined(e){return void 0===e},t.isNullOrUndefined=function isNullOrUndefined(e){return void 0===e||null===e},t.isFalsy=function isFalsy(e,t=[]){if(e)return!1;for(let n of t)if(n===e)return!1;return!0},t.isTruthy=function isTruthy(e,t=[]){return!this.isFalsy(e,t)},t.isInterface=function isInterface(e,t){let n,r,s=!0;for(n in t)if(t.hasOwnProperty(n)&&(r=t[n],r&&void 0===e[n])){s=!1;break}if(!s)return!1;let i=!1;for(n in e)if(e.hasOwnProperty(n)&&void 0===t[n]){i=!0;break}return!i},t.isString=isString,t.isKeyof=function isKeyof(e,t){return t?t.hasOwnProperty(e):isString(e)},t.isNumber=function isNumber(e){return"number"==typeof e},t.isBoolean=function isBoolean(e){return"boolean"==typeof e},t.isPrimitive=function isPrimitive(e){if(null===e)return!0;switch(typeof e){case"boolean":case"number":case"string":case"undefined":return!0;default:return!1}},t.isFunction=function isFunction(e){return"function"==typeof e},t.isArray=function isArray(e){return e instanceof Array},t.isObject=function isObject(e){return typeof e==typeof{}},t.isDate=function isDate(e){return e instanceof Date&&"[object Date]"===Object.prototype.toString.call(e)},t.isPromise=function isPromise(e){return e instanceof Promise},t.isPromiseLike=function isPromiseLike(e){return!!e.then&&"function"==typeof e.then},t.isStandardElement=function isStandardElement(e){return e instanceof HTMLElement||e instanceof SVGElement},t.isDrawable=function isDrawable(e){return!!e.draw},t.isDrawableElement=function isDrawableElement(e){return!!e.appendChild},t.isUpdatable=function isUpdatable(e){if(e)return!!e.update}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(24),s=n(5),i=n(1),o=n(23);function clonePoint(e){return{x:e.x,y:e.y}}function clone(e,t=[],n){for(let r of t)if(r.typeGuard(e,n))return r.cloner(e,n);return i.isPrimitive(e)?_clonePrimitive(e):o.isCloneable(e)?e.clone():i.isDate(e)?_cloneDate(e):i.isArray(e)?_cloneArray(e,t):i.isObject(e)?_cloneObject(e,t):void 0}t.cloneRect=function cloneRect(e){return{x:e.x,y:e.y,w:e.w,h:e.h}},t.clonePoint=clonePoint,t.clonePointArray=function clonePointArray(e){let t,n=[];for(t of e){let e=clonePoint(t);n.push(e)}return n},t.cloneObject=function cloneObject(e){return JSON.parse(JSON.stringify(e))},t.clone=clone;const _clonePrimitive=e=>e,_cloneDate=e=>new Date(e.valueOf()),_cloneObject=(e,t)=>{const n=Object.getPrototypeOf(e),r=Object.create(n);return s.map(e,(e,n)=>{r[n]=clone(e,t,n)}),r},_cloneArray=(e,t)=>{const n=[];for(let r of e)n.push(clone(r,t));return n};t.shallowCloneObject=function shallowCloneObject(e){return r.combineObjects({},e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(11),s=n(5);t.stringify=function stringify(e,t,n){let i=[],o=t?"<br>":"\n",l=t?"&nbsp;&nbsp;&nbsp;&nbsp;":"\t";return n||(n=""),s.map(e,(e,s)=>{let a;switch(typeof e){case"string":a=e;break;case"number":case"boolean":a=e.toString();break;default:if(!e){a=e;break}a=e.hasOwnProperty("toString")?o+e.toString():o+stringify(e,t,l)}i.push(function _format(e,t,n){if(n)return function _formatPropertyAsHTML(e,t){return r.format("<b>{0}</b>: {1}{2}",e,t,"<br>")}(e,t);return function _formatPropertyAsPlainText(e,t){return r.format("{0}: {1}\n",e,t)}(e,t)}(n+s,a,t))}),i.join("")}},function(e,t,n){"use strict";function indexOf(e,t,n){if(!e)return-1;for(let r=0;r<e.length;r+=1)if(n){if(n(e[r],t))return r}else if(e[r]===t)return r;return-1}Object.defineProperty(t,"__esModule",{value:!0}),t.contains=function contains(e,t,n){return-1!==indexOf(e,t,n)},t.indexOf=indexOf,t.removeElemFromArr=function removeElemFromArr(e,t,n){let r,s;for(n||(n=function(e,t){return e===t}),r=e.length-1;r>=0;r-=1)n(e[r],t)&&(s=e.splice(r,1));return s}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(25),s=n(26);function dateDiff(e,t,n,r,s){let i,o;return i=864e5,r||(e=clearTimeInfo(e,!0),t=clearTimeInfo(t,!0)),o=e>t||n?e-t:t-e,s||(o/=864e5),o}function getToday(e){let t;return t=new Date,e||(t=clearTimeInfo(t)),t}function clearTimeInfo(e,t){let n,r=shortDate(e);return n=t?new Date(r+" 00:00Z"):new Date(r),n}function shortDate(e){if(!e)return"";let t;return t=getShortYear(e),e.getMonth()+1+"/"+e.getDate()+"/"+t}function shortTime(e,t){let n,r,s,i;return n=+e.getMinutes(),s=+e.getHours(),i="",r=n<10?"0"+n:n.toString(),t&&(i=" AM",s>=12&&(i=" PM"),s>12&&(s-=12),0===s&&(s=12)),s+":"+r+i}function isLeapYear(e){if(!e)return!1;let t=e.getFullYear();return t%4==0&&(t%100!=0||t%400==0)}function getShortYear(e){return+e.getFullYear()%100}function isSameDate(e,t){return shortDate(e)===shortDate(t)}function _updateDateDifferences(e,t,n,r){t[n]||(t[n]=0),t[r]||(t[r]=0);let s=t[n],i=s%e,o=Math.floor(s/e);return t[n]=i,t[r]+=o,t}function _createPluralString(e,t,n){return 1===e?e+" "+t:(n||(n=t+"s"),e+" "+n)}t.dateDiff=dateDiff,function(e){e[e.EXCLUSIVE=-1]="EXCLUSIVE",e[e.DEFAULT=0]="DEFAULT",e[e.INCLUSIVE=1]="INCLUSIVE"}(t.InclusivityEnum||(t.InclusivityEnum={})),t.monthDiff=function monthDiff(e,t,n,r){let s,i;e>t||n?(s=e.getMonth()-t.getMonth(),i=e.getFullYear()-t.getFullYear()):(s=t.getMonth()-e.getMonth(),i=t.getFullYear()-e.getFullYear());let o=12*i+s;return o+=+r,o},t.getToday=getToday,t.clearTimeInfo=clearTimeInfo,t.businessDateDiff=function businessDateDiff(e,t,n,r,s){let i,o,l,a;i=dateDiff(e,t,n,r,s),o=(t>e?e.getDay():t.getDay())+1,o%=7,o<0&&(o=6);let c=0;for(a=0;a<Math.abs(i);a+=1)0!==o&&6!==o||(c+=1),o+=1,o%=7,o<0&&(o=6);return l=i<0?-1:1,i-c*l},t.shortDate=shortDate,t.inputDateFmt=function inputDateFmt(e){let t,n,r;return r=e.getFullYear(),t=e.getMonth()+1,t<10&&(t="0"+t),n=+e.getDate(),n<10&&(n="0"+n),e.getFullYear()+"-"+t+"-"+n},t.inputToDate=function inputToDate(e,t){let n;if(e){let t=e.split("-");n=new Date(+t[0],+t[1]-1,+t[2])}else{if(!t)return n=null,n;n=getToday()}if(t){let e=t.split(":");n.setHours(+e[0]),n.setMinutes(+e[1])}return n},t.shortTime=shortTime,t.inputTimeFmt=function inputTimeFmt(e,t){let n=[],s=e.getHours();n.push(r.padToDigits(s,2));let i=e.getMinutes();if(n.push(r.padToDigits(i,2)),t){let t=e.getSeconds();n.push(r.padToDigits(t,2))}return n.join(":")},t.shortDateTime=function shortDateTime(e,t){return shortDate(e)+" "+shortTime(e,t)},t.stopwatchDisplay=function stopwatchDisplay(e,t,n){let r,i,o;return t?(r=(void 0).toString(),i=(void 0).toString(),o=(void 0).toString()):(r=s.addLeadingZeroes(2,void 0),i=s.addLeadingZeroes(2,void 0),o=s.addLeadingZeroes(2,void 0)),void 0+"D  "+o+":"+i+":"+r+" '"+e},t.updatedStopwatchDisplay=function updatedStopwatchDisplay(e,t){let n=function _retrieveCountsFromMilli(e){let t={},n=e;return t.days=Math.floor(n/864e5),n-=24*t.days*60*60*1e3,t.hours=Math.floor(n/36e5),n-=60*t.hours*60*1e3,t.minutes=Math.floor(n/6e4),n-=60*t.minutes*1e3,t.seconds=Math.floor(n/1e3),n-=1e3*t.seconds,t.milliseconds=n,t}(e),r=[];return n.days&&r.push(n.days+" days"),n.hours&&r.push(n.hours+" hours"),n.minutes&&r.push(n.minutes+" minutes"),n.seconds&&r.push(n.seconds+" seconds"),n.milliseconds&&t.showMilli&&r.push(n.milliseconds+" ms"),r.join(" ")},t.addToDate=function addToDate(e,t){return t.milliseconds&&e.setMilliseconds(e.getMilliseconds()+t.milliseconds),t.seconds&&e.setSeconds(e.getSeconds()+t.seconds),t.minutes&&e.setMinutes(e.getMinutes()+t.minutes),t.hours&&e.setHours(e.getHours()+t.hours),t.days&&e.setDate(e.getDate()+t.days),t.months&&e.setMonth(e.getMonth()+t.months),t.years&&e.setFullYear(e.getFullYear()+t.years),e},t.getMonthName=function getMonthName(e,t){switch(e.getMonth()){case 0:return t?"Jan":"January";case 1:return t?"Feb":"February";case 2:return t?"Mar":"March";case 3:return t?"Apr":"April";case 4:return"May";case 5:return t?"Jun":"June";case 6:return t?"Jul":"July";case 7:return t?"Aug":"August";case 8:return t?"Sept":"September";case 9:return t?"Oct":"October";case 10:return t?"Nov":"November";case 11:return t?"Dec":"December"}return""},t.getDayOfWeek=function getDayOfWeek(e,t){switch(e.getDay()){case 0:return t?"Sun":"Sunday";case 1:return t?"Mon":"Monday";case 2:return t?"Tues":"Tuesday";case 3:return t?"Wed":"Wednesday";case 4:return t?"Thurs":"Thursday";case 5:return t?"Fri":"Friday";case 6:return t?"Sat":"Saturday"}return""},t.getLengthOfMonthInDays=function getLengthOfMonthInDays(e){if(!e)return-1;switch(e.getMonth()){case 0:case 2:case 4:case 6:case 7:case 9:case 11:return 31;case 1:return isLeapYear(e)?29:28;default:return 30}},t.isLeapYear=isLeapYear,t.getShortYear=getShortYear,t.isWeekend=function isWeekend(e){let t=e.getDay();return 0===t||6===t},t.isToday=function isToday(e){return isSameDate(getToday(),clearTimeInfo(e))},t.isSameDate=isSameDate,t.getDisplayDuration=function getDisplayDuration(e){_updateDateDifferences(1e3,e,"milliseconds","seconds"),_updateDateDifferences(60,e,"seconds","minutes"),_updateDateDifferences(60,e,"minutes","hours"),_updateDateDifferences(24,e,"hours","days"),_updateDateDifferences(30,e,"days","months"),_updateDateDifferences(12,e,"months","years");let t=[];return e.years&&t.push(_createPluralString(e.years,"year")),e.months&&t.push(_createPluralString(e.months,"month")),e.days&&t.push(_createPluralString(e.days,"day")),e.hours&&t.push(_createPluralString(e.hours,"hour")),e.minutes&&t.push(_createPluralString(e.minutes,"minute")),e.seconds&&t.push(_createPluralString(e.seconds,"second")),e.milliseconds&&t.push(_createPluralString(e.milliseconds,"millisecond")),t.join(" ")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(5);t.dictionaryToArray=(e={})=>{const t=[];return r.map(e,e=>{t.push(e)}),t},t.arrayToMap=(e=[])=>{const t=new Map;for(let n of e)t.set(n,!0);return t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(2);t.loadFile=function loadFile(e){return new Promise((t,n)=>{this._innerLoadFile(e,t,n)})},t._innerLoadFile=function _innerLoadFile(e,t,n){let r=new XMLHttpRequest;r.open("GET",e.filename),r.onreadystatechange=()=>{4==r.readyState&&200==r.status?t(r.responseText):404===r.status&&n(r.responseText)},r.send()},t.saveFile=function saveFile(e){return new Promise(t=>{!function _innerSaveFile({filename:e,content:t},n){let s;s="string"==typeof t?new Blob([t],{type:"text/plain"}):t;!function _generateDownload(e,t){if(window.navigator.msSaveOrOpenBlob)window.navigator.msSaveBlob(t,"u");else{let n=r.createElement({type:"a",attr:{href:window.URL.createObjectURL(t),download:e}});document.body.appendChild(n),n.click(),document.body.removeChild(n)}}(e,s)}(e)})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(1),s=n(8),i=n(65),o=n(0),l=n(28),a=n(14);function _setElemClassName(e,t){s.clearClass(e),r.isString(t)?s.addClass(e,t):r.isArray(t)&&s.addClass(e,t.join(" "))}function _setElemStyles(e,t){const n=t.styles;if(!n)return;let s;s=r.isArray(n)?[...n]:[n];for(let t of s)_handleSelector(t,t=>_innerSetElemStyles(e,t))}function _innerSetElemStyles(e,t){const n=s.flattenStyles(t);o.map(n,(e,t)=>{i.createCssClass(t,e,"create_elements")})}function _setElemAttribute(e,t,n){switch(t){case"value":e.value=n;break;default:e.setAttribute(t,n)}}function _isFocusable(e){return r.isNullOrUndefined(e.focusable)?!!e.eventListeners&&!!e.eventListeners.click:e.focusable}function _innerAddElemChildren(e,t,n,r,s){for(let i of t)i?_handleSelector(i,t=>{_innerAddElemChild(e,t,n,r,s)}):console.warn("cannot append non-existent child element")}function _innerAddElemChild(e,t,n,s,i){if(r.isArray(t))_innerAddElemChildren(e,t,n,s,i);else if(r.isDrawable(t))t.draw(e);else if(t.setAttribute)e.appendChild(t);else{let r=t;n&&(r.namespace=n);let o=i(r,s);e.appendChild(o)}}t._coreCreateElements=function _coreCreateElements(e,t,n){if(r.isArray(e)){const r=[];for(let s of e)r.push(this._coreCreateElement(s,t,n));return r}return[this._coreCreateElement(e,t,n)]},t._coreCreateElement=function _coreCreateElement(e,t,n){let s,i;return e.drawable?(i=function _createDrawable(e){let t;try{t=e()}catch(n){t=new e}return t}(e.drawable),s=i.base):s=function _createStandardElement(e){let t,n=e.type||"div";t=e.namespace?document.createElementNS(e.namespace,n):document.createElement(n);return t}(e),n||(n=_coreCreateElement),function _setElemIdentfiers(e,t,n,r){t.id&&_handleSelector(t.id,t=>e.setAttribute("id",t));t.key&&n&&(n[t.key]=r||e)}(s,e,t,i),function _setElemClass(e,t){const n=t.cls;if(!n)return;_handleSelector(n,t=>function _innerSetElemClass(e,t,n){l.isClassDefinition(t)?(_setElemStyles(e,{styles:t.styles}),_setElemClassName(e,t.name)):_setElemClassName(e,t)}(e,t))}(s,e),_setElemStyles(s,e),function _setElemAttributes(e,t){t.attr||(t.attr={});_isFocusable(t)&&(t.focusable=!0);(function _needsTabIndex(e){if(!_isFocusable(e))return!1;if(e.attr.tabIndex)return!1;return!0})(t)&&(t.attr.tabindex=0);o.map(t.attr,(t,n)=>{_handleSelector(t,t=>function _innerSetAttribute(e,t,n){if(r.isNullOrUndefined(t))return;if(t.key){let n=t;_setElemAttribute(e,n.key,n.val)}else _setElemAttribute(e,n,t)}(e,t,n))})}(s,e),function _setElemStyle(e,t){if(!t.style)return;_handleSelector(t.style,t=>{o.map(t,(t,n)=>{e.style[n]=t})})}(s,e),function _setEventListeners(e,t){if(!t.eventListeners)return;if(t.focusable&&t.eventListeners.click&&!t.eventListeners.keypress){let n=t.eventListeners.click;t.eventListeners.keypress=e=>{13!==e.keyCode&&32!==e.keyCode||(n(e),e.preventDefault())};let r=!1;t.eventListeners.mousedown=t=>{r=!0,e.blur()},t.eventListeners.mouseup=e=>{r=!1},t.eventListeners.focus=t=>{if(r)return t.preventDefault(),e.blur(),!1}}o.map(t.eventListeners,(t,n)=>{e.addEventListener(n,t)})}(s,e),e.children?function _addElemChildren(e,t,n,r){if(!t.children)return;_handleSelector(t.children,s=>{e.innerHTML="",_innerAddElemChildren(e,s,t.namespace,n,r)})}(s,e,t,n):function _setElemBaseContent(e,t){t.content?_handleSelector(t.content,t=>e.innerHTML=t):t.innerHTML?_handleSelector(t.innerHTML,t=>e.innerHTML=t):t.innerText&&_handleSelector(t.innerText,t=>e.innerText=t)}(s,e),_setElemSelector(e,s),function _appendElemToParent(e,t){if(!e.parent)return;r.isDrawable(t)?t.draw(e.parent):e.parent.appendChild(t)}(e,s),s};const _setElemSelector=(e,t)=>{if(!e.selector)return;const{selector:n,applyCb:r}=e.selector;n.apply(e=>{r(e,t)});const s=n.getData();r({value:s,eventType:"none"},t)},_handleSelector=(e,t)=>{a.isSelector(e)?e.apply(e=>{const{value:n}=e;t(n,e)}):t(e,{})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.THEME_BG_COLOR_CLS="themeBGColor",t.THEME_COLOR_CLS="themeColor",t.THEME_COLOR_HOVER_CLS="themeBGHoverColor"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),s=n(29);const i=new class _StyleFlattener{flatten(e){return this._flattenStyles(e,"")}_flattenStyles(e,t){let n={};return r.map(e,(e,r)=>{let i=this._buildNewSelectors(r,t);for(let t of i){let r=this._flattenClassDefinition(t,e);n=s.combineStyles(n,r)}}),n}_flattenClassDefinition(e,t){let n={[e]:{}};return r.map(t,(t,r)=>{if("nested"===r){let r=this._flattenStyles(t,e);n=s.combineStyles(n,r)}else n[e][r]=t}),n}_buildNewSelectors(e,t){let n=e.split(",");if(!t)return n;for(let e=0;e<n.length;e+=1)n[e]=this._buildNewSelector(n[e],t);return n}_buildNewSelector(e,t){let n="";return n=-1!==e.indexOf("&")?e.replace(/&/g,t):t+" "+e,n}};t.flattenStyles=function flattenStyles(e){return i.flatten(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=new class _StyleRuleHelper{getCssRule(e,t){return this._getCssRule(e,t)}_getCssRule(e,t){let n;return t||(n=this._getExistingSelector(e)),n||(n={style:{}}),n}_getExistingSelector(e){for(let t of document.styleSheets){let n=this._getRules(t);if(n)continue;let r=this._searchRulesForSelector(e,n);if(r)return r}return null}_getRules(e){let t,n=document.all?"rules":"cssRules";try{t=e[n]}catch(e){return null}return t}_searchRulesForSelector(e,t){for(let n of t)if(n.selectorText===e)return n;return null}};t.getCssRule=function getCssRule(e,t){return r.getCssRule(e,t)}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(s,i){function fulfilled(e){try{step(r.next(e))}catch(e){i(e)}}function rejected(e){try{step(r.throw(e))}catch(e){i(e)}}function step(e){e.done?s(e.value):function adopt(e){return e instanceof n?e:new n((function(t){t(e)}))}(e.value).then(fulfilled,rejected)}step((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const s=n(0),i=n(33),o=n(30),l=n(32),a=n(17);const c=new class _TransitionController{constructor(){this._lastClsId=0,this._generatedClasses={}}transition(e){return r(this,void 0,void 0,(function*(){if(!e.elem)return Promise.reject("no element");if(!e.time)return Promise.reject("no time");let t=this._getClass(e.start,e.elem);e.end.transition||(e.end.transition="all ease-in-out "+e.time/1e3+"s");let n=this._getClass(e.end,e.elem);yield this._animate(e,t,n)}))}_getClass(e,t){e=this._replacePlaceholders(e,t);let n=JSON.stringify(e).replace(/ /g,"");if(this._generatedClasses[n])return this._generatedClasses[n];let r=this._generateRandomClassName();return this._generatedClasses[n]=r,this._createTransitionClass(r,e,t),r}_generateRandomClassName(){return this._lastClsId+=1,"gencls"+this._lastClsId}_createTransitionClass(e,t,n){this._styleElem||this._createStyleElem(),this._styleElem.innerHTML+=a.stringifyStyle("."+e,t)}_replacePlaceholders(e,t){return s.map(e,(n,r)=>{n=(n=(n=(n=(n=(n=n.replace("<width>",t.offsetWidth+1+"px")).replace("<height>",t.offsetHeight+"px")).replace("<left>",t.offsetLeft+"px")).replace("<top>",t.offsetTop+"px")).replace("<right>",t.offsetLeft+t.offsetWidth+"px")).replace("<bottom>",t.offsetTop+t.offsetHeight+"px"),e[r]=n}),e}_createStyleElem(){this._styleElem=l.createStyleElement(),document.head.appendChild(this._styleElem)}_animate(e,t,n){return r(this,void 0,void 0,(function*(){yield i.nextRender(),o.addClass(e.elem,t),yield i.wait(e.delay||0),o.addClass(e.elem,n),yield i.wait(e.time),o.removeClass(e.elem,t),yield i.nextRender(),this._removeEndClass(e.elem,n)}))}_removeEndClass(e,t){return r(this,void 0,void 0,(function*(){yield i.wait(10),o.removeClass(e,t)}))}};t.transition=function transition(e,t,n,r,s){return c.transition({elem:e,start:t,end:n,time:r,delay:s||0})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.wait=function wait(e){return new Promise(t=>{window.setTimeout(t,e)})},t.nextRender=function nextRender(){return new Promise(e=>{requestAnimationFrame(()=>{e()})})}},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(12)),__export(n(37)),__export(n(70)),__export(n(71)),__export(n(72))},function(e,t,n){"use strict";function globalOffsetLeft(e,t,n){return _auxGlobalOffset(e,"offsetLeft",t,n)}function globalOffsetTop(e,t,n){return _auxGlobalOffset(e,"offsetTop",t,n)}function globalOffsets(e,t,n){return{left:globalOffsetLeft(e,t,n),top:globalOffsetTop(e,t,n)}}function _auxGlobalOffset(e,t,n,r){let s=0;for(;e&&e!==n;)e[t]&&(s+=e[t]),e=r?e.parentNode:e.offsetParent;return s}Object.defineProperty(t,"__esModule",{value:!0}),t.globalOffsetLeft=globalOffsetLeft,t.globalOffsetTop=globalOffsetTop,t.globalOffsets=globalOffsets,t.getScrollPosition=function getScrollPosition(){return{x:window.pageXOffset?window.pageXOffset:document.body.scrollLeft,y:window.pageYOffset?window.pageYOffset:document.body.scrollTop}},t.measureElement=function measureElement(e,t){let n=!1;if(!e.parentNode){n=!0;let r=e.style.opacity;e.style.opacity="0",window.setTimeout(()=>{e.style.opacity=r}),t||(t=document.body),t.appendChild(e)}let r=e.getBoundingClientRect();return n&&t.removeChild(e),r},t.findCommonParent=function findCommonParent(e,t){let n,r;if(e&&t)for(n=e,r=t;n;){for(;r;){if(n===r)return n;r=r.parentNode}n=n.parentNode,r=t}},t.moveRelToElem=function moveRelToElem(e,t,n,r,s){let i,o,l,a;return i=globalOffsets(e),o=globalOffsets(e),l=o.left+n-i.left,a=o.top+r-i.top,s||(e.style.position="absolute",e.style.left=l+"px",e.style.top=a+"px"),{x:l,y:a}},t.isInDOM=function isInDOM(e){let t=e.parentNode;for(;t;){if(t===document.body)return!0;t=t.parentNode}return!1}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(8),s=n(35),i=n(1);function isChild(e,t){let n;for(n=t;n;){if(n===e)return!0;n=n.parentNode}return!1}t.removeSubclassFromAllElements=function removeSubclassFromAllElements(e,t,n){let s,i,o;for(s=document.getElementsByClassName(e),i=0;i<s.length;i+=1)o=s[i],o!==n&&r.removeClass(o,t)},t.isChildEventTarget=function isChildEventTarget(e,t){return isChild(t,e.target)},t.isChild=isChild,t.appendChildren=function appendChildren(e,...t){let n;for(n=0;n<t.length;n+=1)e.appendChild(t[n])},t.clearChildren=function clearChildren(e){for(let t=e.children.length-1;t>=0;t-=1){let n=e.children[t];e.removeChild(n)}},t.moveElemRelativePosition=function moveElemRelativePosition(e,t){let n=parseInt(e.style.top)||0,r=parseInt(e.style.left)||0;e.style.top=n+t.y+"px",e.style.left=r+t.x+"px"},t.resetPageFocus=function resetPageFocus(){let e=-1;i.isNullOrUndefined(document.body.tabIndex)&&(e=document.body.tabIndex),document.body.tabIndex=0,document.body.focus(),document.body.tabIndex=e},t.removeElement=function removeElement(e){e.parentNode&&e.parentNode.removeChild(e)},t.select=function select(e){if(s.isSelectable(e))e.select();else{let t=document.createRange();t.selectNodeContents(e);let n=window.getSelection();n.removeAllRanges(),n.addRange(t)}},t.HTML_TAB="&nbsp;&nbsp;&nbsp;&nbsp;",t.encodeForHTML=function encodeForHTML(e){return e=(e=(e=(e=(e=e.replace(/&/g,"&amp;")).replace(/</g,"&lt;")).replace(/>/g,"&gt;")).replace(/\\n/g,"<br>")).replace(/\\t/g,t.HTML_TAB)},t.decodeFromHTML=function decodeFromHTML(e){return e=(e=(e=(e=(e=(e=(e=(e=e.replace(/&amp;/g,"&")).replace(/&lt;/g,"<")).replace(/&gt;/g,">")).replace(/&quot;/g,'"')).replace(/&apos;/g,"'")).replace(/<br>/g,"\n")).replace(new RegExp(t.HTML_TAB,"g"),"\t")).replace(/&nbsp;/g," ")},t.replaceElemWithElem=function replaceElemWithElem(e,t){if(!e.parentNode)return;let n=e.nextSibling,r=e.parentNode;r.removeChild(e),r.insertBefore(t,n)},t.isVisible=function isVisible(e){if(s.hasOffsets(e)){if(0!==e.offsetWidth)return!0;if(0!==e.offsetHeight)return!0}else{if(0!==e.clientWidth)return!0;if(0!==e.clientHeight)return!0}return!1},t.getElementsBySelector=function getElementsBySelector(e){let t=document.body.querySelectorAll(e),n=[];for(let e of t)n.push(e);return n},t.doesElementMatchSelector=function doesElementMatchSelector(e,t){return!!e&&(!!e.matches&&e.matches(t))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(36),s=n(1);t.equals=function equals(e,t){return r.isEquatable(e)?e.equals(t):s.isPrimitive(e)?e===t:s.isDate(e)?+e==+t:JSON.stringify(e)===JSON.stringify(t)},t.lesserThan=function lesserThan(e,t){return r.isComparable(e)?e.lesserThan(t):e<t},t.greaterThan=function greaterThan(e,t){return r.isComparable(e)?e.greaterThan(t):e>t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.INCORRECT_ORDER=1]="INCORRECT_ORDER",e[e.SAME=0]="SAME",e[e.CORRECT_ORDER=-1]="CORRECT_ORDER"}(t.SortOrderEnum||(t.SortOrderEnum={}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(12),s=n(0),i=n(8),o=n(34);class _PlaceholderLibrary extends r._Library{constructor(){super(...arguments),this._indexedPlaceholders={}}get _idSuffix(){return"placeholder"}_indexByPlaceholder(e,t){let n={[t]:e},r=i.indexByPlaceholder(n);return s.map(r,(e,n)=>{if(!e[t])return;let r=(this._indexedPlaceholders[n]||{})[t]||{},i=s.combineObjects(r,e[t]);s.setDictValue(this._indexedPlaceholders,i,[n,t])}),r}_updateElems(e,t){let n=this._indexByPlaceholder(e,t);s.map(n,(e,n)=>{let r=e[t],s=i.mapIndexToStyle(r,this._rawStyles[t]);s&&this._updatePlaceholderElem(s,t,n)})}_updatePlaceholderElem(e,t,n){super._updateElems(e,this._formatElemString(t,n))}replacePlaceholder(e){e.baseElem?this._replaceSingleElemPlaceholders(e):e.uniqueKey?this._replacePlaceholderForKey(e):this._replacePlaceholdersForMultipleKeys(e)}_replacePlaceholdersForMultipleKeys(e){const t=this._indexedPlaceholders[e.placeholder];t&&!s.isEmptyObject(t)&&s.map(t,(t,n)=>{e.uniqueKey=n,this._replacePlaceholderForKey(e),e.uniqueKey=null})}_replacePlaceholderForKey(e){if(!e.uniqueKey)return;const t=this._replacePlaceholderViaIndex(e);this._updatePlaceholderElem(t,e.uniqueKey,e.placeholder)}_replaceSingleElemPlaceholders(e){if(!e.uniqueKey||!e.newValue)return;const t=this._replacePlaceholderViaIndex(e),n=this._findMatches(e.baseElem,s.getKeys(t));s.map(n,(e,n)=>{for(let r of e)s.map(t[n],(e,t)=>{r.style[t]=e})})}_findMatches(e,t){let n={};for(let r of t)n[r]=this._findMatch(e,r);return n}_findMatch(e,t){let n=[],r=[e],s=0;for(;s<r.length;){let e=r[s];o.doesElementMatchSelector(e,t)&&n.push(e),r=r.concat([...e.childNodes]),s+=1}return n}_replacePlaceholderViaIndex(e){this._indexedPlaceholders[e.placeholder]||(this._indexedPlaceholders[e.placeholder]={});const t=this._indexedPlaceholders[e.placeholder][e.uniqueKey]||{};let n=i.mapIndexToStyle(t,this._rawStyles[e.uniqueKey]);return i.replacePlaceholders(n,e.placeholder,e.newValue)}_formatElemString(e,t){return`${e}-${t}`}}t.PlaceholderLibrary=new _PlaceholderLibrary},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(12);class _FontLibrary extends r._Library{get _idSuffix(){return"fonts"}}t.FontLibrary=new _FontLibrary},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(37);function createCssClass(e,t,n){return n=n||r.StyleLibrary.getNextId(),r.StyleLibrary.add(n,{[e]:t}),r.StyleLibrary.getElemForKey(n)}t.createCssClass=createCssClass,t.addHiddenClass=function addHiddenClass(e="hidden"){return createCssClass("."+e,{display:"none"})},t.addUnselectableClass=function addUnselectableClass(e="unselectable"){return createCssClass("."+e,{userSelect:"none",mozUserSelect:"none",webkitUserSelect:"none",khtmlUserSelect:"none",oUserSelect:"none"})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(74);class ModelEvent extends r.CodeEvent{}t.ModelEvent=ModelEvent},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(75)),__export(n(76))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.CodeEvent=class CodeEvent{constructor(e){this._name=e,this._listeners=new Map}get listeners(){return new Map(this._listeners)}dispatch(e,t){let n=t;n.target=e,n.name=this._name;let r=[];r=r.concat(this._listeners.get(e)),r=r.concat(this._listeners.get(null));for(let e of r)e&&e(n)}addEventListener(e,t){t||(t=null);let n=this._listeners.get(t);n||(n=[]),n.push(e),this._listeners.set(t,n)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isListenable=e=>!!e.addEventListener},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(6)),__export(n(80))},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(39)),__export(n(40)),__export(n(79))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(39);class _UndoChain extends r.HistoryChain{constructor(){super(),window.addEventListener("keyup",e=>{e.ctrlKey&&90===e.keyCode&&(this._shouldIgnoreEvent(e)||(e.shiftKey?this.redo():this.undo()))})}undo(){let e=this.navigateBack();e&&e.reverseFunction&&e.reverseFunction()}redo(){let e=this.navigateForward();e&&e.forwardFunction&&e.forwardFunction()}}t._UndoChain=_UndoChain},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(41),s=n(19),i=n(9),o=n(21),l=n(45);t.isPrimitiveModel=e=>e instanceof i.MPrimitive,t.isDateModel=e=>e instanceof i.MDate,t.isObjectModel=e=>e instanceof s.MObject,t.isArrayModel=e=>e instanceof o.MArray,t.isManagerModel=e=>e instanceof o.MManager,t.isIdentifiableModel=e=>e instanceof r.MIdentifiable,t.isSelector=e=>e instanceof l.Selector},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isIdentifiable=e=>!!e.id},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.IdentifierAssigner=new class _IdentifierAssigner{constructor(){this._lastIds={id:0}}getLastId(e){return this._lastIds[e]}_cleanUniqueKey(e){return e?e.replace(/-/g,"_"):"id"}_getNumericId(e){const t=e.split("-");let n=NaN;for(let e of t){const t=parseInt(e);isNaN(t)||(n=t)}return n}generateUniqueId(e,t){e=this._cleanUniqueKey(e);const n=(this._lastIds[e]||0)+1;return this._lastIds[e]=n,t?`${n}-${t}`:""+n}registerId(e,t){const n=this._getNumericId(e),r=this._cleanUniqueKey(t);return!isNaN(n)&&(!(n<=this._lastIds[r])&&(this._lastIds[r]=n,!0))}reset(e){const t=this._cleanUniqueKey(e);this._lastIds[t]=0}},t.generateUniqueId=function generateUniqueId(e,n){return t.IdentifierAssigner.generateUniqueId(e,n)},t.registerUniqueId=function registerUniqueId(e,t){return this.IdentifierAssigner.registerId(e,t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(43),s=n(13),i=n(1),o=n(6);class _KeyedModels extends r._KeyedModel{_getType(){return"array"}remove(e){const t=this.get(e);return this._innerSet({key:e,value:void 0}),t}findIndex(e){let t;return this._map(this._innerModel,(n,r)=>{s.equals(e,o.isModel(n)?n.getData():n)&&(t=r)}),t}contains(e){const t=this.findIndex(e);return!i.isUndefined(t)}clear(){this._innerSetData({eventType:"remove",value:this._getDefaultValues()})}}t._KeyedModels=_KeyedModels},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3);class MPrimitive extends r._Model{_getDefaultValues(){}}t.MPrimitive=MPrimitive},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3),s=n(20);class MDate extends r._Model{_getApplicableTransforms(){const e=super._getApplicableTransforms();return e||s.DefaultDateTransform}_getDefaultValues(){return null}getData(){return super.getData()}}t.MDate=MDate},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3),s=n(6);class Model extends r._Model{_getDefaultValues(){}setData(e){const t=this._wrapInModel(e,this._transforms);this._innerSetData({value:t})}getData(){const e=this._innerGetData();return s.isModel(e)?e.getData():e}getModel(e="o"){if(s.isModel(this._innerModel))return this._innerModel}}t.Model=Model},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(44);class MSet extends r.MArray{add(e){return!this.contains(e)&&super.add(e)}}t.MSet=MSet},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(89),s=n(15),i=n(0),o=n(1);class MManager extends s._KeyedModels{_getDefaultValues(){return new r.DataManager}_getValue(e,t){return e.get(t)}_innerGetData(){return super._innerGetData().toArray()}_innerExport(){return super._innerExport().toArray()}toDataManager(){return super._innerGetData()}toArray(){return this._innerGetData()}toDictionary(){return this.toDataManager().toDictionary()}_setValue(e,t,n){this._isRemoval(e,t,n)?e.remove(t):this._isReplacement(e,t)?(e.remove(t),e.add(n)):o.isUndefined(n)||e.add(n)}_isRemoval(e,t,n){return!!r.isDataManager(e)&&(!!e.contains(t)&&(!!o.isUndefined(n)||!!o.isUndefined(n.getData())))}_isReplacement(e,t){return!!r.isDataManager(e)&&!!e.contains(t)}_map(e,t){r.isDataManager(e)?e.map(t):o.isArray(e)?i.map(e,(e,n)=>t(e,e.id)):i.map(e,t)}add(e){return!this.contains(e)&&(this._innerSet({key:e.id,value:e,eventType:"add"}),!0)}getIndex(e){if(this._innerModel.contains(e.id))return e.id}}t.MManager=MManager},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(90)),__export(n(22)),__export(n(91))},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(s,i){function fulfilled(e){try{step(r.next(e))}catch(e){i(e)}}function rejected(e){try{step(r.throw(e))}catch(e){i(e)}}function step(e){e.done?s(e.value):function adopt(e){return e instanceof n?e:new n((function(t){t(e)}))}(e.value).then(fulfilled,rejected)}step((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const s=n(22);class AsyncManager extends s.DataManager{constructor(e,t){super(),this._innerLoad=e,this._innerCreate=t,this._inFlight={}}_createAndAddDefault(e){let t=this.create(e);return this.add(t),this}getOrCreate(e){return r(this,void 0,void 0,(function*(){if(!e)throw new Error("no ID provided");let t=this.get(e);return t||(this._inFlight[e]||(this._inFlight[e]=this._loadAndCreate(e)),this._inFlight[e])}))}_loadAndCreate(e){return r(this,void 0,void 0,(function*(){let t=yield this.load(e);if(!t)throw new Error("no data found for id '"+e+"'");let n=this.create(t);return this.add(n),n}))}create(e){return this._innerCreate?this._innerCreate(e):e}load(e){return r(this,void 0,void 0,(function*(){return this._innerLoad||Promise.reject("innerLoad not defined"),this._innerLoad(e)}))}}t.AsyncManager=AsyncManager},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(22);t.isDataManager=function isDataManager(e){return e instanceof r.DataManager}},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(46)),__export(n(45))},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(94)),__export(n(20))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(20),s=n(9);t.createModelTransform=e=>({incoming:t=>new e(t)}),t.createModelDateTransform=(e=r.DefaultDateTransform)=>({incoming:t=>new s.MDate(t,{_:e})})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(18),s=n(16);function createInput(e,t){const n=Object.assign(Object.assign({},e),{type:"input",attr:Object.assign(Object.assign({},e.attr),{value:e.value,type:e.type}),eventListeners:{change:e.onChange}});return s.createElement(n,t)}t.createInput=createInput,t.createLabeledInput=function createLabeledInput(e,t,n){if(!t.id){const e=r.IdentifierAssigner.generateUniqueId("input","genInput");t.id=e,t.attr=Object.assign(Object.assign({},t.attr),{name:e})}return e.type="label",e.attr=Object.assign(Object.assign({},e.attr),{for:t.id}),[s.createElement(e,n),createInput(t,n)]},t.createButton=function createButton(e,t){const n=Object.assign(Object.assign({},e),{type:"button",eventListeners:{click:e.onClick},content:e.label});return s.createElement(n,t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(16);function processCellContents(e,t){let n,s;if(!e)return t;if("string"==typeof e)t.innerHTML=e;else if(e.appendChild)t.appendChild(e);else for(s in e.create?(n=r.createElement(e.create),t.appendChild(n)):t.innerHTML=e.content,e.attr)e.attr.hasOwnProperty(s)&&t.setAttribute(s,e.attr[s]);return t}t.createTable=function createTable(e,t,n,s,i){let o,l,a,c,u,d;for(s||(s=n&&n.length||0),o=r.createElement({type:"table",cls:t}),u=0;u<s;u+=1)for(i||(i=n[u].length),l=o.insertRow(-1),d=0;d<i;d+=1)c=n[u][d],a=l.insertCell(-1),processCellContents(c,a);return o},t.processCellContents=processCellContents,t.addRow=function addRow(e,t,n,r){let s,i,o,l;if(n||0===n||(n=-1),r||0===r||(r=t.length),e&&e.insertRow){for(s=e.insertRow(n),o=0;o<r;o+=1)i=s.insertCell(-1),l=t[o]||"",processCellContents(l,i);return s}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parseFile=void 0;const r=n(98),s=n(0);t.parseFile=e=>{const t=getLinesInFile(e),n={line:"",state:{competencies:{},levels:{},categories:{}},lastLevel:null,lastCategory:null,levelOrder:[],categoryOrder:[]};for(let e of t)n.line=e,parseLine(n);return{levels:n.levelOrder,categories:n.categoryOrder,competencies:s.map(n.state.competencies,e=>e)}};const getLinesInFile=e=>e.split("\n"),parseLine=e=>{const{line:t,state:n}=e,s=r.matchLevel(t);if(!e.lastLevel&&!s)return;if(e.lastLevel&&r.isH2(t)&&!s)return void(e.lastLevel=null);if(s)return parseLevel(e,s);const i=r.matchCategory(t);if(i)return parseCategory(e,i,s);const o=r.matchCompetency(t);return o?parseCompetency(o,e):void 0},parseCategory=(e,t,n)=>{const{state:r}=e;e.lastCategory=t,r.categories[t]||(r.categories[t]=0,e.categoryOrder.push(t)),r.categories[t]+=1},parseLevel=(e,t)=>{const{state:n}=e;e.lastLevel=t,n.levels[t]||(n.levels[t]=0,e.levelOrder.push(t)),n.levels[t]+=1},parseCompetency=(e,t)=>{const{state:n}=t;n.competencies[e]?n.competencies[e].levels.push(t.lastLevel):n.competencies[e]={id:e,name:e,levels:[t.lastLevel],category:t.lastCategory}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isH2=t.matchCompetency=t.matchCategory=t.matchLevel=void 0;const r=n(11),s=/^\s*?##\s*?([\w &\/]+)\s*?\{#/,i=/^\s*?###\s*?(.+)$/,o=/^\s*?[\*-]\s*?(.+)$/;t.matchLevel=e=>_match(s,e),t.matchCategory=e=>_match(i,e),t.matchCompetency=e=>_match(o,e);const _match=(e,t)=>{const n=e.exec(t);return n?r.trim(n[1]):""};t.isH2=e=>{const t=e.replace(/^\s+/,"");return"##"===t.substring(0,2)&&"#"!==t[2]}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.renderLayout=void 0;const r=n(2),s=n(100),i=n(103),o=n(106);t.renderLayout=()=>r.createElement({parent:document.body,cls:{name:"layout",styles:{"html, body, .layout":{width:"100%",height:"100%",margin:"0",padding:"0",fontFamily:"Roboto"},".layout":{display:"flex"}}},children:[i.renderFilterBar(),s.renderList(),o.renderMatrix()]})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.renderList=void 0;const r=n(2),s=n(101),i=n(10),o=n(7);t.renderList=()=>{const e=o.selectDisplay().select(e=>"list"===e?"list":"hidden"),t=i.selectLevels().mapSelect(e=>s.renderGroup(e));return r.createElement({cls:e,styles:{".list":{display:"flex",flexDirection:"column",alignItems:"center",gridTemplateColumns:"1fr",fontSize:"2em",width:"100%",overflowY:"auto"}},children:t})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.renderGroup=void 0;const r=n(2),s=n(102),i=n(8),o=n(4),l=n(10),a=n(47),c=n(14),u=n(111),d={".hidden":{display:"none"},".column":{fontSize:"0.9em",width:"50vw",marginBottom:"1em",nested:{"&.collapsed .colName img":{transform:"rotate(0deg)"},"&.collapsed .groupChildren":{display:"none"}}},".colName":{margin:"1rem",fontFamily:"Zilla Slab",fontSize:"0.9em",fontWeight:"500",cursor:"pointer",display:"flex",marginLeft:"-1.2em",nested:{img:{width:"1.5em",height:"1.5em",transform:"rotate(180deg)",transformOrigin:"50% 50%"}}}};t.renderGroup=(e,n)=>{const f=!n,p=n||e;let _,h;_=n?a.selectCompetenciesForLevelAndCategory(e,n).mapSelect(t=>s.renderCompetency(t,e)):l.selectCategories().mapSelect(n=>t.renderGroup(e,n));const m=c.select(o.STATE,({hiddenLevels:t,competencies:r})=>{const s=["column"],i=a.filterRelevantCompetencies(r,e,n);return(u.isLevelHidden(e)||n&&0===i.length)&&s.push("hidden"),s});let y=!1;return h=r.createElement({cls:m,styles:d,children:[{cls:"colName",eventListeners:{click:()=>(y=!y,void i.addOrRemoveClass(h,"collapsed",y))},children:[{type:"img",attr:{src:"./res/down_caret.png"}},{content:p},{type:"img",attr:{src:"./res/ex.png"},cls:f?"icon":"hidden",eventListeners:{click:e=>(e=>{o.STATE.set("hiddenLevels",[...o.STATE.get("hiddenLevels"),p]),e.stopPropagation()})(e)}}]},{cls:"groupChildren",children:_}]}),h}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.renderCompetency=void 0;const r=n(2),s=n(0);r.createElement({styles:{".competency":{padding:"0.5rem",margin:"0.5rem",fontSize:"0.6em",borderTop:"1px solid #eee",fontFamily:"Anonymous Pro",position:"relative",nested:{".name":{opacity:"0.5",cursor:"pointer"},".name.bold":{opacity:"1"},".category, .levels":{marginTop:"0.5rem",fontSize:"0.8rem",display:"none",position:"absolute",backgroundColor:"#fff",borderRadius:"10px",boxShadow:"1px 1px 3px 2px rgba(0,0,0,.2)",padding:"0.5rem"},"&:hover":{nested:{".levels":{display:"block",zIndex:"5"}}}}}}}),t.renderCompetency=(e,t)=>{const n=s.filter(e.levels,e=>e!==t);return r.createElement({cls:"competency",children:[{content:e.name,cls:["name",0===n.length?"bold":""]},0!==n.length?{cls:"levels",children:[{content:"Also in:"},{type:"ul",children:e.levels.map(e=>t===e?{}:{type:"li",content:e})}]}:{}]})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.renderFilterBar=void 0;const r=n(2),s=n(104),i=n(105);t.renderFilterBar=()=>r.createElement({cls:"filterBar",styles:{".label":{fontSize:"0.8rem",opacity:"0.8",fontFamily:"Zilla Slab"},".filterBar":{height:"100%",backgroundColor:"#333",fontFamily:"Anonymous Pro",color:"#FFF",display:"flex",flexDirection:"column",nested:{".label":{marginBottom:"0.25rem"},".title":{fontSize:"1.2rem",marginLeft:"1rem",marginBottom:"1rem"},".subtitle":{fontSize:"0.7rem",marginLeft:"1rem",marginTop:"1rem",marginBottom:"0.2rem"}}}},children:[{cls:"subtitle",content:"Competency Explorer"},{cls:"title",content:"Codecademy Engineering"},s.renderViews(),i.renderFilters()]})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.renderViews=void 0;const r=n(2),s=n(7),i=n(4);t.renderViews=()=>{const clsSelector=e=>s.selectFilters().select(e=>e.display).select(t=>t===e?"selected displayMode":"displayMode");return r.createElement({cls:"views",styles:{".views":{margin:"1rem",display:"flex",flexDirection:"column",nested:{".displayMode":{cursor:"pointer",width:"auto",borderRadius:"5px",padding:"0.1rem 0.25rem"},".displayMode:not(.selected)":{opacity:"0.5"},".selected":{backgroundColor:"#fff",color:"#333"}}}},children:[{cls:"label",content:"View As: "},{children:[{content:"Matrix",cls:clsSelector("matrix"),eventListeners:{click:()=>i.STATE.set("display","matrix")}},{content:"List",cls:clsSelector("list"),eventListeners:{click:()=>i.STATE.set("display","list")}}]}]})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.renderFilters=void 0;const r=n(7),s=n(2),i=n(10),o=n(4);t.renderFilters=()=>{const e=i.selectLevels().mapSelect(e=>{return{cls:(t=e,r.selectFilters().select(e=>e.hiddenLevels).select(e=>-1!==e.indexOf(t)?"hidden level":"level")),content:e,eventListeners:{click:()=>{console.log("hiding"),o.hideOrUnhideLevel(e)}}};var t});return s.createElement({cls:"filters",styles:{".filters":{display:"flex",flexDirection:"column",padding:"1rem"}},children:[{cls:"label",content:"Visible Levels:"},{cls:"levels",styles:{".levels":{display:"flex",flexDirection:"column",justifyContent:"flex-start"},".level":{padding:"0.1rem 0.25rem",cursor:"pointer",marginBottom:"0.5rem",width:"auto",borderRadius:"5px"},".level:not(.hidden)":{backgroundColor:"#FFF",color:"#333"},".filters .hidden.level":{display:"block",textDecoration:"line-through",opacity:"0.5"}},children:e}]})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.renderMatrix=void 0;const r=n(2),s=n(7),i=n(10),o=n(107),l=n(112);t.renderMatrix=()=>{const e=s.selectDisplay().select(e=>"matrix"===e?"matrix":"hidden"),t=i.selectCategoriesAndLevels().select(e=>{let t=[{cls:"blank"}];const{levels:n,categories:r}=e;for(let e of r)t.push({cls:"category label",content:e});for(let e of n){t.push(l.renderLevelLabel(e));for(let n of r)t.push(o.renderCompetencies(e,n))}return t});return r.createElement({cls:e,styles:{".matrix":{fontFamily:"Zilla Slab",fontSize:"2em",display:"grid",gridTemplateColumns:"10rem repeat(5, 1fr)",width:"100%",height:"100%",overflowY:"auto",gridRowGap:"2rem",nested:{".label":{alignSelf:"center",height:"100%"}}}},children:t})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.renderCompetencies=void 0;const r=n(2),s=n(47),i=n(108),o=n(7),l=n(111),a=n(109);t.renderCompetencies=(e,t)=>{const n=s.selectCompetenciesForLevelAndCategory(e,t).select(e=>a.bucketByOriginLevel(e)).mapSelect(t=>i.renderMatrixCompetency(t.competencies,e,t.originLevel)),c=o.selectHiddenLevels().select(t=>{const n=["competencies"];return l.isLevelHidden(e)&&n.push("hidden"),n});return r.createElement({cls:c,styles:{".competencies":{fontFamily:"Anonymous Pro",margin:"0",padding:"0",paddingRight:"1rem"}},children:n})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.renderMatrixCompetency=void 0;const r=n(14),s=n(110),i=n(0),o={".matrixCompetency":{fontSize:"0.8rem",border:"none",nested:{".header":{marginBottom:"0.5rem",cursor:"pointer"},".header:empty":{display:"none"},".hiddenCompetencies":{margin:"0",padding:"0",marginBottom:"0.5rem"},"&.collapsed .hiddenCompetencies":{display:"none"}}},".nonOrigin":{opacity:.5},".nestedCompetency":{margin:"0",padding:"0.25rem 0"}};t.renderMatrixCompetency=(e,t,n)=>{const l=new r.MPrimitive(!1);t===n&&l.setData(!0);const a=r.select(l).select(e=>{const r=["matrixCompetency"];return t!==n&&r.push("nonOrigin"),e||r.push("collapsed"),r}),c=n===t?"":`${e.length} from ${n}`;return{cls:a,style:{opacity:s.getLevelOpacity(n,t)},styles:o,eventListeners:{click:()=>{n!==t&&l.setData(!l.getData())}},children:[{content:c,cls:"header"},{cls:"hiddenCompetencies",type:"ul",children:i.map(e,e=>({type:"li",content:e.name,cls:"nestedCompetency"}))}]}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.bucketByOriginLevel=void 0;const r=n(4),s=n(113);t.bucketByOriginLevel=e=>{const t={};for(let n of e){const e=s.getOriginLevel(n),r=s.getLevelIndex(e);t[r]||(t[r]={competencies:[],originLevel:e}),t[r].competencies.push(n)}return sortByLevel(t)};const sortByLevel=e=>{const t=[],n=r.STATE.get("levels");for(let r=0;r<n.length;r+=1)e[r]&&(e[r].competencies.length<=0||t.push(e[r]));return t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getLevelOpacity=void 0;const r=n(113),s=n(4);t.getLevelOpacity=(e,t)=>{if(e===t)return 1;const n=r.getLevelIndex(e);return.4+.6/s.STATE.get("levels").length*n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isCompetencyHidden=t.isLevelHidden=void 0;const r=n(4);t.isLevelHidden=e=>-1!==r.STATE.get("hiddenLevels").indexOf(e),t.isCompetencyHidden=e=>{for(let n of e.levels)if(!t.isLevelHidden(n))return!1;return!0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.renderLevelLabel=void 0;const r=n(7),s=n(111);t.renderLevelLabel=e=>({cls:r.selectHiddenLevels().select(()=>{const t=["level","label"];return s.isLevelHidden(e)&&t.push("hidden"),t}),content:e})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getOriginLevel=t.isContinuationOfCompetency=t.isFirstLevelWithCompetency=t.getLevelDirection=t.getLevelIndex=t.LevelDirection=void 0;const r=n(4);var s;!function(e){e[e.A_BEFORE_B=-1]="A_BEFORE_B",e[e.EQUAL=0]="EQUAL",e[e.B_BEFORE_A=1]="B_BEFORE_A"}(s=t.LevelDirection||(t.LevelDirection={})),t.getLevelIndex=e=>r.STATE.get("levels").indexOf(e),t.getLevelDirection=(e,n)=>{const r=t.getLevelIndex(e),i=t.getLevelIndex(n);return r<i?s.A_BEFORE_B:r>i?s.B_BEFORE_A:s.EQUAL},t.isFirstLevelWithCompetency=(e,n)=>{for(let r of n.levels)if(t.getLevelDirection(e,r)===s.B_BEFORE_A)return!1;return!0},t.isContinuationOfCompetency=(e,n)=>1!==n.levels.length&&!t.isFirstLevelWithCompetency(e,n),t.getOriginLevel=e=>e.levels.sort(t.getLevelDirection)[0]}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,